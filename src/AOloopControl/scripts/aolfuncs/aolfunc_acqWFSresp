#!/bin/bash

#########################################################################################
##          ACQUIRE WFS RESPONSE                                                       ##
#########################################################################################

execname="./AOloopControl"




# CHECK IF ALREADY RUNNING
mkdir -p status
file="./status/stat_acqWFSON.txt"
if [ -a $file ]; then
	acqWFSONstat=$( cat $file )
else
	acqWFSONstat="OFF"
	echo "$acqWFSONstat" > $file
fi


if [ "$acqWFSONstat" = " ON" ]; then
echo "WFS RM acquisition already running"
exit
fi


echo " ON" > "./status/stat_acqWFSON.txt"


aCALIBdatestr=`date -u +%Y-%m-%d_%H:%M:%S`

# STAGING DIRECTORIES
dir_conf_staged="conf_staged"







# arg 1: parameter name
# arg 2: default value
# 
# param value is stored in variable "paramvalue"
function ConfReadParam {
file="./conf/param_$1.txt"
if [ -f "$file" ]; then
paramvalue=$( cat $file )
else
paramvalue="$2"
echo "$2" > $file
fi
}




##########################################
# READ REQUIRED PARAMETERS
##########################################

# READ LOOP NUMBER
if [ -f LOOPNUMBER ]; then
LOOPNUMBER=$( cat LOOPNUMBER )
else
LOOPNUMBER="7"
echo "$LOOPNUMBER" > LOOPNUMBER
fi

ConfReadParam DMMODE "0"
DMMODE="$paramvalue"

ConfReadParam ACzrmNBcycle "5"
ACzrmNBcycle="$paramvalue"

ConfReadParam delayRM1us "0"
delayRM1us="$paramvalue"

ConfReadParam RMamplum "0.05"
RMamplum="$paramvalue"

ConfReadParam RMdelayfr "2"
RMdelayfr="$paramvalue"

ConfReadParam RMfrave "5"
RMfrave="$paramvalue"

ConfReadParam RMexfr "2"
RMexfr="$paramvalue"

ConfReadParam WFSnorm "1"
WFSnorm="$paramvalue"

ConfReadParam rmMamplum "0.1"
rmMamplum="$paramvalue"


ConfReadParam RMCalibReuseMasks "0"
RMCalibReuseMasks="$paramvalue"


if [ "$DMMODE" = "ZONAL" ]; then
	ConfReadParam ACmrmtime "60.0"
	ACmrmtime="$paramvalue"

	ConfReadParam ACmrmNBcycle "5"
	ACmrmNBcycle="$paramvalue"
fi




##############################################
# FUNCTION: ACQUIRE MODAL LO RESPONSE MATRIX
##############################################
# ACQUIRE LOW ORDER RESPONSE
#
# INPUT:
#	respM_LOmodes.fits
#
# OUTPUT:
#	LOzrespmat0.fits
#	LOwfsref0.fits
#
function function_acqWFSresp_LOmodes {

if pgrep "aol${LOOPNUMBER}run" > /dev/null # is aolrun running ?
then # use option -r to re-use AO shared memory configuration
    ./auxscripts/aolMeasureLOrespmat2 -r -n ${ACmrmNBcycle} -d ${delayRM1us} ${rmMamplum} ${RMdelayfr} ${RMfrave} ${RMexfr} ${WFSnorm}
else
    ./auxscripts/aolMeasureLOrespmat2 -n ${ACmrmNBcycle} -d ${delayRM1us} ${rmMamplum} ${RMdelayfr} ${RMfrave} ${RMexfr} ${WFSnorm}
fi
}






##########################################
# ACQUIRE ZONAL RESPONSE MATRIX
##########################################
# ACQUIRE HIGH ORDER WFS RESPONSE: 
#
# INPUT:
# 	conf/RMpokeCube.fits.gz  (poke sequence)
#		if file does not exist, create straight poke sequence (one actuator at a time) 
#
# OUTPUT: 
# 	zrespmat0.fits
#	wfsref00.fits
#
if pgrep "aol${LOOPNUMBER}run" > /dev/null  # is aolrun running ?
then # use option -r to re-use AO shared memory configuration
	./auxscripts/aolMeasureZrespmat2 -c aol${LOOPNUMBER}RT2 -r -n ${ACzrmNBcycle} -d ${delayRM1us} ${RMamplum} ${RMdelayfr} ${RMfrave} ${RMexfr} ${WFSnorm}
else
    ./auxscripts/aolMeasureZrespmat2 -c aol${LOOPNUMBER}RT2 -n ${ACzrmNBcycle} -d ${delayRM1us} ${RMamplum} ${RMdelayfr} ${RMfrave} ${RMexfr} ${WFSnorm}
fi



##########################################
# ACQUIRE MODAL LO RESPONSE MATRIX
##########################################

if [ "$DMMODE" = "ZONAL" ]; then
	if [ "$RMCalibReuseMasks" = "1" ]; then
	# reuse modes
	function_acqWFSresp_LOmodes
	fi
fi







##########################################
# PROCESS & DECODE HIGH ORDER WFS RESPONSE
##########################################
#
# INPUT:
#	zrespmat0.fits
#	wfsref00.fits 
#	
# OPTIONAL INPUT:
# 	./conf/RMpokeCube.fits
#	./conf/RMmat.fits
#	./conf/RMpixindex.fits
#		if these 3 files exist, use them to decode the zrespmat0.fits
#	
# OUTPUT:
#	./conf_zrm_staged/zrespM.fits
#	./conf_zrm_staged/wfsmap.fits
#	./conf_zrm_staged/dmmap.fits   
#
./auxscripts/aolCleanZrespmat2
stageddir="conf_zrm_staged"
mkdir -p $stageddir
cp zrespM.fits $stageddir
cp wfsmap.fits $stageddir
cp dmmap.fits $stageddir







if [ "$RMCalibReuseMasks" = "0" ]; then
##########################################
# MAKE MASKS  
##########################################
# 
# INPUT:
#     ./conf_zrm_staged/zrespM.fits
# OUTPUT:
#     wfsmask.fits  (overwrite)
#     dmmaskRM.fits (overwrite)
#
./auxscripts/aolmkMasks

if [ "$DMMODE" = "MODAL" ]; then  # set dmmaskRM.fits to 1.0 over all pixels
$execname
readshmim aol${LOOPNUMBER}_dmC
im0=0*aol${LOOPNUMBER}_dmC
dmmaskRM=1.0+im0
savefits dmmaskRM \"!dmmaskRM.fits\"
exitCLI
fi

# MAKE SLAVED ACTUATOR DM MASK: dmmaskRM.fits -> dmslaved.fits, dmmask.fits
# 
# INPUT:
#	dmmaskRM.fits
# OUTPUT:
#	dmslaved.fits  (overwrite)
#	dmmask.fits    (overwrite)
#

if [ "$DMMODE" = "ZONAL" ]; then
./auxscripts/mkDMslaveActprox dmmaskRM.fits 2.5
else # set dmmask to 1, dmslaved to 0
$execname << EOF
readshmim aol${LOOPNUMBER}_dmC
im0=0*aol${LOOPNUMBER}_dmC
dmmask=1.0+im0
savefits dmmask \"!dmmask.fits\"
savefits im0 \"!dmslaved.fits\"
exitCLI
EOF
fi

fi  # end of if [ "$RMCalibReuseMasks" = "0" ]; then



####################################################
# UPDATE wfsref00 TO NORMALIZE FLUX OVER wfsmask 
####################################################
# 
# INPUT
#	wfsref00.fits
#	wfsmask.fits
#
# OUTPUT
#	wfsref0.fits
#
$execname << EOF
loadfits wfsref00.fits im0
loadfits wfsmask.fits wfm
a=itot(im0)/itot(im0*wfm)
im1=im0*a
savefits im1 \"!wfsref0.fits\"
listim
exitCLI
EOF


####################################################
# ACQUIRE LOW ORDER RESPONSE
####################################################
#
# INPUT:
#	respM_LOmodes.fits
#
# OUTPUT:
#	LOzrespmat0.fits
#	LOwfsref0.fits
#

if [ "$RMCalibReuseMasks" = "0" ]; then
# don't reuse modes
function_acqWFSresp_LOmodes
fi




echo "OFF" > "./status/stat_acqWFSON.txt"


