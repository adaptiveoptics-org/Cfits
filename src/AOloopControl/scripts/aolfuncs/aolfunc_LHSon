#!/bin/bash

#########################################################################################
##          LINEAR HARDWARE SIMULATOR  ON                                              ##
#########################################################################################

execname="./AOloopControl"
statusfile="./status/stat_lsimON.txt"



LHSwfsref0namefile="./conf/shmim_wfsref0linsim.name.txt"
LHSzrepMnamefile="./conf/shmim_zrespMlinsim.name.txt"

LHSwfsref0_FITS=$( cat $LHSwfsref0namefile )
LHSzrespM_FITS=$( cat $LHSzrepMnamefile )

printHELP ()
{
echo
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : START LINEAR HARDWARE SIMULATOR $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo " "
echo "Current values:"
echo " $(tput bold)LOOPNUMBER  :$(tput sgr0)  $LOOPNUMBER"
echo " $(tput bold)LOOPNAME    :$(tput sgr0)  $LOOPNAME"
echo " $(tput bold)LHS wfsref0 :$(tput sgr0)  $LHSwfsref0_FITS"
echo " $(tput bold)LHS zrespM  :$(tput sgr0)  $LHSzrespM_FITS"
echo " "
echo " "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [options]"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "   --help -h             print (h)elp and exit"
echo "   --help1               print 1 line summary" 
echo ""
echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
	printf "%20s       AO Start linear hardware simulator\n" "$0" 
}






EXITSTATUS=0

function checkFile {
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}

function checkDir {
if [ -d $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}

function cmdexists()
{
  command -v "$1" >/dev/null 2>&1
}

function checkCommand {
if cmdexists $1; then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."; EXITSTATUS=1;
fi
}



# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done



### Start getopts code ###
while getopts :h FLAG; do
  case $FLAG in
    h)  #show help
	if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1)) 





if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo -e \\n"Illegal number of parameters ($NBARGS params required, $# entered)"\\n
fi
printHELP
        exit
fi




# ======================= CHECK REQUIRED DIRS & FILES =================================
echo ""


# ============================= CHECK IF COMMAND EXISTS ==========================

checkFile aolconf
checkFile $execname













##############################################
# FUNCTION: READ STATUS FROM FILE
##############################################
# arg 1: parameter name
# arg 2: default value
# 
# param value is stored in variable "paramvalue"
function StatReadStat {
mkdir -p status
file="./status/stat_$1.txt"
if [ -f "$file" ]; then
statusvalue=$( cat $file )
else
statusvalue="$2"
echo "$2" > $file
fi
}

##############################################
# FUNCTION: READ PARAMETER FROM FILE
##############################################
# arg 1: parameter name
# arg 2: default value
# 
# param value is stored in variable "paramvalue"
function ConfReadParam {
file="./conf/param_$1.txt"
if [ -f "$file" ]; then
paramvalue=$( cat $file )
else
paramvalue="$2"
echo "$2" > $file
fi
}












##########################################
# CHECK IF ALREADY RUNNING
##########################################

StatReadStat lsimON " ON"; lsimONstat="$statusvalue"

if [ "$lsimONstat" = " ON" ]; then
echo "LHS already ON"
echo "remove ./status/stat_lsimON.txt to force"
exit
fi






##############################################
# FUNCTION: READ PARAMETER FROM FILE
##############################################
# arg 1: parameter name
# arg 2: default value
# 
# param value is stored in variable "paramvalue"
function ConfReadParam {
file="./conf/param_$1.txt"
if [ -f "$file" ]; then
paramvalue=$( cat $file )
else
paramvalue="$2"
echo "$2" > $file
fi
}






##########################################
# READ REQUIRED PARAMETERS
##########################################

# READ LOOP NUMBER
if [ -f LOOPNUMBER ]; then
LOOPNUMBER=$( cat LOOPNUMBER )
else
LOOPNUMBER="7"
echo "$LOOPNUMBER" > LOOPNUMBER
fi

ConfReadParam linsimDelay "3000"; linsimDelay="$paramvalue" # READ LHS hardware latency [us]
ConfReadParam linsimdt "2000"; linsimdt="$paramvalue" # READ LHS loop interval [us]
ConfReadParam GPUlinsim "7"; GPUlinsim="$paramvalue" # READ GPU index for LHS 
ConfReadParam DMindex "00"; DMindex="$paramvalue" # DM index 





tmuxname="aol${LOOPNUMBER}linsim"
tmuxnameD="aol${LOOPNUMBER}linsimD"

#logRunningProcess "aollinsimDelay" "$tmuxnameD" "Add delay to simulation"
#logRunningProcess "aollindm2wfsim" "$tmuxname" "linear computation of simulated WFS from DM"

sleep 0.2
tmux new-session -d -s ${tmuxnameD}
sleep 0.2
tmux new-session -d -s ${tmuxname}
sleep 0.2

#aoconflog "Start linear WFS simulator"

tmux send-keys -t $tmuxnameD "./auxscripts/aollinsimDelay ${linsimDelay}" C-m
tmux send-keys -t $tmuxname "./auxscripts/aollindm2wfsim -w ${linsimdt} ${GPUlinsim}" C-m

# Save current (hardware) WFS camera name & write new simulated WFS camera name
cp ./conf/streamlink_wfsim.name.txt ./conf/streamlink_wfsim_hardware.name.txt
echo "aol${LOOPNUMBER}_linsimWFS" > ./conf/streamlink_wfsim.name.txt



# turn off DM voltage 
$execname << EOF
aoldmvoltOFF ${DMindex}
exitCLI
EOF

# set dark to zero
$execname << EOF
readshmim aol${LOOPNUMBER}_wfsdark
imzero aol${LOOPNUMBER}_wfsdark
exitCLI
EOF

# remove flat
dmdispzero ${DMindex} 00

# connect to camera
./aolfuncs/aolfunc_StreamLink wfsim

echo " ON" > $statusfile




