#!/bin/bash

# number of arguments to script
NBARGS=3


# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`




function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : Apply predictive filter to stream $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Apply linear predictive filter to stream"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-hf] <instrem> <filtstream> <outstream>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)            help"
echo "     $(tput bold)-n$(tput sgr0) <NBiter>   run for NBiter iterations (default = 1000 in savemode)"
echo "     $(tput bold)-s$(tput sgr0)            save ascii and FITS output"
echo "     $(tput bold)-r$(tput sgr0)            replace measurements by predictions -> FITS output"
echo "     $(tput bold)-i$(tput sgr0) <index>    read inmask<index>.fits and outmask<index>.fits"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "      <instream>     input stream"
echo "      <filter>       filter stream"
echo "      <outstream>    output stream"
echo ""
echo " $(tput bold)OUTPUT:$(tput sgr0)"
echo "      "
echo ""
echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "%25s       Apply predictive filter to stream\n" "$0" 
}





EXITSTATUS=0

function checkFile {
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}

function cmdexists()
{
  command -v "$1" >/dev/null 2>&1
}


function checkCommand {
if cmdexists $1; then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."; EXITSTATUS=1;
fi

}






# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done



NBiter="-1"
NBiterENTRY="0"
SAVEMODE="0"
MASKINDEX="0"
USEMINDEX="0"

while getopts :hn:sri: FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
       n)  #  set number of iterations
      NBiter="$OPTARG"
      NBiterENTRY="1"
      echo "Setting number of iterations to $NBiter"
      ;;
      i) # mask index
	  USEMINDEX="1"
      MASKINDEX="$OPTARG"
      ;;
      s)
      SAVEMODE="1"
      ;;
      r)
      SAVEMODE="2"
      ;;
    \?) 
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1))  
### End getopts code ###







if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi


# ======================= CHECK REQUIRED FILES =================================
echo ""
checkFile /tmp/$1.im.shm
checkFile /tmp/$2.im.shm


# ============================= CHECK IF COMMAND EXISTS ==========================

checkCommand "Cfits"






if [ $EXITSTATUS -eq 1 ]; then
echo ""
echo "$(tput setaf 1)$(tput bold) REQUIRED FILES, COMMANDS NOT FOUND: EXITING $(tput sgr0)"
echo ""
exit
else
echo ""
fi



if [ "$SAVEMODE" = "0" ]; then
if [ "${NBiterENTRY}" = "0" ]; then
NBiter="-1"
fi
fi

tlag="1.8"

inmaskname="inmask.fits"
outmaskname="outmask.fits"

if [ "$USEMINDEX" = "1" ]; then
inmaskname="inmask${MASKINDEX}.fits"
outmaskname="outmask${MASKINDEX}.fits"
fi


Cfits << EOF
readshmim $1
loadfits "${inmaskname}" inmask
loadfits "${outmaskname}" outmask
readshmim $2
listim
linARapplyRT $1 0 2 $2 5 outPFmodeval 1 2 ${NBiter} ${SAVEMODE} $tlag
listim
exit
EOF







