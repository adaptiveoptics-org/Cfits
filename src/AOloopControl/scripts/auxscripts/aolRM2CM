#!/bin/bash



# number of arguments to script
NBARGS=2


# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`







function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : COMPUTE CONTROL MATRIX $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Compute constrol matrix from response matrix"
echo "  Reads :"
echo "    ./conf_staged/wfsmask.fits"
echo "    ./conf_staged/zrespM.fits" 
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-h] <SVDlim> <outCMfname>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)          help"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "     <SVDlim>     Singular Value Decomposition limit"
echo ""
echo " $(tput bold)OUTPUT:$(tput sgr0)"
echo "     <outCMfname>      output file name (FITS)"
echo ""
echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "     $(tput bold)%-25s$(tput sgr0)       Align Pyramid camera\n" "$0" 
}



# ================= OPTIONS =============================
# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done



while getopts :h FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1)) 







if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi



loopnb=$( head -1 LOOPNUMBER )


./AOloopControl -n $pname << EOF
loadfits "./conf_staged/wfsmask.fits" wfsmask
loadfits "./conf_staged/zrespM.fits" zrespM
zrespMm=zrespM*wfsmask
aolRM2CM zrespMm contrM $1
savefits contrM "!$2"
exitCLI
EOF


cp ./conf/zRMpokeCube.fits ./conf/aol${loopnb}_DMmodes_zonal.fits
