#!/bin/bash

loopnb=$(cat LOOPNUMBER)


# number of arguments to script
NBARGS=2


# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`







function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : COMPUTE CONTROL MATRIX $(tput sgr 0)"
echo "------------------------------------------------------------------------"
echo "  Compute constrol matrix from response matrix"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr 0)"
echo "     $0 [-h] <SVDlim> <outCMfname>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr 0)"
echo "     $(tput bold)-h$(tput sgr 0)          help"
echo ""
echo " $(tput bold)INPUT:$(tput sgr 0)"
echo "     <SVDlim>     Singular Value Decomposition limit"
echo ""
echo " $(tput bold)OUTPUT:$(tput sgr 0)"
echo "     <outCMfname>      output file name (FITS)"
echo ""
echo "------------------------------------------------------------------------"
}




# ================= OPTIONS =============================

#Parse command line flags
#If an option should be followed by an argument, it should be followed by a ":".
#Notice there is no ":" after "h". The leading ":" suppresses error messages from
#getopts. This is required to get unrecognized option code to work.

while getopts :h FLAG; do
  case $FLAG in
    h)  #show help
      printHELP
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      #If you just want to display a simple error message instead of the full
      #help, remove the 2 lines above and uncomment the 2 lines below.
      #echo -e "Use ${BOLD}$SCRIPT -h${NORM} to see the help documentation."\\n
      #exit 2
      ;;
  esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.

### End getopts code ###





if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr 0)"
fi
printHELP
        exit
fi





Cfits -n $pname << EOF
loadfits "./conf/aol${loopnb}_zrespM.fits" zrespM
aolRM2CM zrespM contrM $1
savefits contrM "!$2"
exit
EOF


cp ./conf/zRMpokeCube.fits ./conf/aol${loopnb}_DMmodes_zonal.fits
