#!/bin/bash



# number of arguments to script
NBARGS=3


loopnb=$(cat LOOPNUMBER)
# ======================= PROCESS NAME =================================
pname=`echo "$0${loopnb}" | sed "s/\.\///g"`





function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : Slow offload of WFS residuals to WFS reference $(tput sgr 0)"
echo "------------------------------------------------------------------------"
echo "offloads aol#_wfsres_ave to aol#_wfszpoX"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr 0)"
echo "     $0 [-h] <time interval> <averaging coeff> <wfszpo channel>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr 0)"
echo "     $(tput bold)-h$(tput sgr 0)          help"
echo ""
echo " $(tput bold)INPUT:$(tput sgr 0)"
echo "     <time interval>       time between updates [sec]"
echo "     <averaging coeff>     averaging coefficient"
echo "     <wfszpo channel>      zero point offset channel"
echo ""
echo "------------------------------------------------------------------------"
}




# ================= OPTIONS =============================

#Parse command line flags
#If an option should be followed by an argument, it should be followed by a ":".
#Notice there is no ":" after "h". The leading ":" suppresses error messages from
#getopts. This is required to get unrecognized option code to work.

while getopts :hH:L:N:Cc FLAG; do
  case $FLAG in
    h)  #show help
      printHELP
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      #If you just want to display a simple error message instead of the full
      #help, remove the 2 lines above and uncomment the 2 lines below.
      #echo -e "Use ${BOLD}$SCRIPT -h${NORM} to see the help documentation."\\n
      #exit 2
      ;;
  esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.

### End getopts code ###







if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr 0)"
fi
printHELP
        exit
fi








cnt=0

while true
do

echo "$cnt   WFS residual offset to WFS ref"
Cfits -n $pname << EOF > /dev/null
readshmim aol${loopnb}_wfsres_ave
readshmim aol${loopnb}_wfsref
im=aol${loopnb}_wfsref+$2*aol${loopnb}_wfsres_ave
listim
cpsh im aol${loopnb}_wfszpo$3	
exit
EOF
let cnt=cnt+1
sleep $1

done

