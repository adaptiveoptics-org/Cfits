#!/bin/bash



# number of arguments to script
NBARGS=4


pname="aolARPFblock"





function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname :  AO find optimal AR linear predictive filter $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Uses pseudo-open loop telemetry"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-h] <telemetry log> <block> <latency> <PForder>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)          help"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "     <telemetry log>     pseudo-open loop WFS telemetry"
echo "     <block>             block number"
echo "     <latency>           latency [frame]"
echo "     <PForder>           filter order"
echo ""
echo " $(tput bold)EXAMPLE:$(tput sgr0)"
echo "    $0 wfsmodes_ol.fits 3 2.36 6"
echo ""
echo " $(tput bold)OUTPUT:$(tput sgr0)"
echo ""
echo "------------------------------------------------------------------------"
}




printHELP1 ()
{
    printf "%20s       Example script\n" "$0" 
}


EXITSTATUS=0



function checkFile {
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}




# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done



while getopts :h FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1))  








if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi




# ======================= CHECK REQUIRED FILES =================================
echo ""
checkFile $1





if [ $EXITSTATUS -eq 1 ]; then
echo ""
echo "$(tput setaf 1)$(tput bold) REQUIRED FILES, COMMANDS NOT FOUND: EXITING $(tput sgr0)"
echo ""
exit
else
echo ""
fi









loopnb=$(cat LOOPNUMBER)
GPUindex=1

Cfits -n aol${loopnb}scangain << EOF
readshmim aol${loopnb}_mode_blknb
loadfits "$1" olwfsmeas
mselblock olwfsmeas aol${loopnb}_mode_blknb $2 olwfsmeasblk
savefits olwfsmeasblk "!olwfsmeasblk.fits"
mkARpfilt olwfsmeasblk $4 $3 0.001 0.0 outPF 
savefits outPF "!outPF.fits"

applyARpfilt outPF olwfsmeasblk $3 outrec
savefits outrec "!outPFrec.fits"
savefits outf "!outPFf.fits"
res=outrec-outf
imstats res
imstats olwfsmeasblk
exit
EOF

cp gainscan.txt gainscan.$2.txt

