#!/bin/bash


# number of arguments to script
NBARGS=0


# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`
#echo "pname = $pname"






function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : CREATE/UPDATE AO MASKS $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  updates AO wfs and DM masks"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-h]"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)          help"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo ""
echo " $(tput bold)OUTPUT:$(tput sgr0)"
echo "     wfsmask.fits"
echo "     dmmaskRM.fits"
echo "     dmslaved.fits"
echo "     dmmask.fits" 
echo ""
echo "------------------------------------------------------------------------"
}




printHELP1 ()
{
    printf "%20s       Create AO wfs and DM masks\n" "$0" 
}





# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done





while getopts :h FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1)) 






if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi





loopnb=$(cat LOOPNUMBER)
datestr=`date -u +%Y-%m-%d_%H:%M:%S`





DMmaskRMp0=0.2
if [ -f "./conf/conf_DMmaskRMp0.txt" ]; then
DMmaskRMp0=$( cat ./conf/conf_DMmaskRMp0.txt )
fi


DMmaskRMc0=1.0
if [ -f "./conf/conf_DMmaskRMc0.txt" ]; then
DMmaskRMc0=$( cat ./conf/conf_DMmaskRMc0.txt )
fi


DMmaskRMp1=0.7
if [ -f "./conf/conf_DMmaskRMp1.txt" ]; then
DMmaskRMp1=$( cat ./conf/conf_DMmaskRMp1.txt )
fi


DMmaskRMc1=0.3
if [ -f "./conf/conf_DMmaskRMc1.txt" ]; then
DMmaskRMc1=$( cat ./conf/conf_DMmaskRMc1.txt )
fi




WFSmaskRMp0=0.05
if [ -f "./conf/conf_WFSmaskRMp0.txt" ]; then
WFSmaskRMp0=$( cat ./conf/conf_WFSmaskRMp0.txt )
fi


WFSmaskRMc0=1.0
if [ -f "./conf/conf_WFSmaskRMc0.txt" ]; then
WFSmaskRMc0=$( cat ./conf/conf_WFSmaskRMc0.txt )
fi


WFSmaskRMp1=0.65
if [ -f "./conf/conf_WFSmaskRMp1.txt" ]; then
WFSmaskRMp1=$( cat ./conf/conf_WFSmaskRMp1.txt )
fi


WFSmaskRMc1=0.3
if [ -f "./conf/conf_WFSmaskRMc1.txt" ]; then
WFSmaskRMc1=$( cat ./conf/conf_WFSmaskRMc1.txt )
fi







Cfits << EOF
aolnb $loopnb
loadfits "./${stageddir}/zrespmat.fits" zrespm
#loadfits "./${stageddir}/wfsmap.fits" wfsmap
#loadfits "./${stageddir}/dmmap.fits" dmmap
aolRMmkmasks zrespm wfsmap dmmap ${DMmaskRMp0} ${DMmaskRMc0} ${DMmaskRMp1} ${DMmaskRMc1} ${WFSmaskRMp0} ${WFSmaskRMc0} ${WFSmaskRMp1} ${WFSmaskRMc1}
savefits wfsmask "!wfsmask.fits"
savefits dmmask "!dmmaskRM.fits"
exit
EOF

if [ -f "./zrespmtmp/wfsimRMS.fits" ]; then
Cfits << EOF
loadfits wfsmask.fits wfsmask0
imref=0*wfsmask0+1
loadfits "./zrespmtmp/wfsimRMS.fits" wfsimrms
imr=wfsmask0/wfsimrms
imr1=imr*wfsmask0
# fraction of pixels in wfsmask0
a1=itot(wfsmask0)/itot(imref)
# goal fraction of pixels
a2=a1*(1.0-$WFSmaskSNRr)
lim=perc(imr1,a2)
imr2=imr1/lim
imtrunc imr2 0.0 1.001 imr3
imr4=floor(imr3)
savefits imr4 "!wfsmask_SNRfilt.fits"  
exit
EOF
cp wfsmask_SNRfilt.fits wfsmask.fits
fi


#stageddir="conf_zrm_staged"
#cp wfsmask.fits ./${stageddir}/
#cp dmmaskRM.fits ./${stageddir}/




#cp wfsmask.fits wfsmask/wfsmask_${datestr}.fits
#cp dmmaskRM.fits dmmaskRM/dmmaskRM_${datestr}.fits





#./auxscripts/mkDMslaveActprox dmmaskRM.fits 2.5

#cp dmslaved.fits dmslaved/dmslaved_${datestr}.fits

#Cfits << EOF
#loadfits dmmaskRM.fits dmmRM
#loadfits dmslaved.fits dmsl
#imtrunc dmsl 0.0 1.0 dmsl1
#dmm=1.0-(1.0-dmmRM)*(1.0-dmsl1)
#savefits dmm "!dmmask.fits"
#exit
#EOF

#cp dmmask.fits dmmask/dmmask_${datestr}.fits


# update on staged directory

#cp wfsmask.fits ./${stageddir}/
#cp dmmaskRM.fits ./${stageddir}/
#cp dmslaved.fits ./${stageddir}/
#cp dmmask.fits ./${stageddir}/

#echo "wfsmask/wfsmask_${datestr}.fits" > ./${stageddir}/conf_wfsmask_name.txt
#echo "dmmaskRM/dmmaskRM_${datestr}.fits" > ./${stageddir}/conf_dmmaskRM_name.txt
#echo "dmslaved/dmslaved_${datestr}.fits" > ./${stageddir}/conf_dmslaved_name.txt
#echo "dmmask/dmmask_${datestr}.fits" > ./${stageddir}/conf_dmmask_name.txt
