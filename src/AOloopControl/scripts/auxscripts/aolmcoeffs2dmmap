#! /bin/bash




# number of arguments to script
NBARGS=1


# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`
echo "pname = $pname"


loopnb=$(cat LOOPNUMBER)

function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : GPU-based  MODE COEFFS -> DM MAP (included filtering) $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Computes DM map from modal loop coefficients"
echo "  Requires Open Loop modes extraction process to be running"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-h -o <outputstream> -f -g <gain>] <GPU index>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)             help"
echo "     $(tput bold)-o$(tput sgr0) <file>      set output correction map"
echo "     $(tput bold)-f$(tput sgr0)             offload correction to aol${looop}_dmC"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "     <GPUindex>     GPU index"
echo ""
echo "------------------------------------------------------------------------"
}


OUTMODE=0 # default output : outDM_map
OFFLOADMODE=0
OUTCNAME="aol${loopnb}_dmCoutfilt"

# ================= OPTIONS =============================

#Parse command line flags
#If an option should be followed by an argument, it should be followed by a ":".
#Notice there is no ":" after "h". The leading ":" suppresses error messages from
#getopts. This is required to get unrecognized option code to work.

while getopts :ho:g:f FLAG; do
  case $FLAG in
    o) # set output correction channel
    OUTCNAME=$OPTARG
    OUTMODE=1
    ;;
    h)  #show help
      printHELP
      exit
      ;;
    f) # offload correction to dmC
    OFFLOADMODE=1
    ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      #If you just want to display a simple error message instead of the full
      #help, remove the 2 lines above and uncomment the 2 lines below.
      #echo -e "Use ${BOLD}$SCRIPT -h${NORM} to see the help documentation."\\n
      #exit 2
      ;;
  esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.

### End getopts code ###












if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi








if [ "$OUTMODE" = "0" ]; then

Cfits -n $pname << EOF
readshmim aol${loopnb}_modeval_dm_now
readshmim aol${loopnb}_DMmode_LIMIT
loadfits "conf/aol${loopnb}_DMmodes.fits" DMmodes
readshmim aol${loopnb}_dmC
im1=0+aol${loopnb}_dmC
readshmim ${OUTCNAME}
cpsh im1 ${OUTCNAME}
aolmc2dmfilt aol${loopnb}_modeval_dm_now DMmodes 2 ${OUTCNAME} $1 ${loopnb} $OFFLOADMODE
exit
EOF

else

Cfits -n $pname << EOF
readshmim aol${loopnb}_modeval_dm_now
readshmim aol${loopnb}_DMmode_LIMIT
loadfits "conf/aol${loopnb}_DMmodes.fits" DMmodes
readshmim aol${loopnb}_dmC
im1=0+aol${loopnb}_dmC
readshmim ${OUTCNAME}
cpsh im1 ${OUTCNAME}
aolmc2dmfilt aol${loopnb}_modeval_dm_now DMmodes 2 ${OUTCNAME} $1 ${loopnb} $OFFLOADMODE
exit
EOF


fi
