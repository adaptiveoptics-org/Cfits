#! /bin/bash

NBARGS=2
pname=`echo "$0" | sed "s/\.\///g"`





function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : Copy FITS files to shared memory $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Copy FITS file to shared memory"
echo "  Writes into ./loadedSM/ what has been loaded"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-h] <FITS file> <shared memory stream name>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)          help"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "   <FITS file>    filesystem FITS file"
echo "   <stream>       shared memory stream name"
echo ""
echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "%25s       Copy FITS files to shared memor\n" "$0" 
}



# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done


while getopts :h FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1)) 







if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi


mkdir -p loadedSM

# has the file changed since last request ?

cp ./loadedSM/$2.DMloaded ./loadedSM/$2.SMloaded.old
stat -L --format "%n %s %y" $1 > ./loadedSM/$2.SMloaded

str1=$(cat ./loadedSM/$2.DMloaded.old)
str2=$(cat ./loadedSM/$2.DMloaded)
if [ "$str1" = "$str2" ]; then
touch ./loadedSM/$2.same
rm ./loadedSM/$2.new
NEW="0"
else
rm ./loadedSM/$2.same
touch ./loadedSM/$2.new
NEW="1"
fi
rm ./loadedSM/$2.DMloaded.old


# has shared memory changed since last request ?

cp ./loadedSM/$2.DMcontent ./loadedSM/$2.SMcontent.old
stat -L --format "%n %s %y" /tmp/$2.im.shm > ./loadedSM/$2.sm.SMcontent

str1=$(cat ./loadedSM/$2.DMcontent.old)
str2=$(cat ./loadedSM/$2.DMcontent)
if [ "$str1" = "$str2" ]; then
touch ./loadedSM/$2.sm.same
rm ./loadedSM/$2.sm.new
NEW_SM="0"
else
rm ./loadedSM/$2.sm.same
touch ./loadedSM/$2.sm.new
NEW_SM="1"
fi
rm ./loadedSM/$2.DMcontent.old



./AOloopControl -n pname << EOF
loadfits "$1" im
readshmim "$2"
cpsh im "$2"
exitCLI
EOF



