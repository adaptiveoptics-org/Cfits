#! /bin/bash

EXPECTED_ARGS=6








function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : Cleans zonal resp matrix $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "Cleans zonal response matrices in ./zresptmp/ directory"
echo "if images conf/RMpixindex.fits conf/RMHmat.fits exist, use Hadamard coding/decoding"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-h] <RM ampl> <WFSn flag> <DMperc0> <DMcoeff0> <DMperc1> <DMcoeff1>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)          help"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "     <RM ampl>      RM amplitude [um]"
echo "     <WFSn flag>    WFS normalization flag"
echo "     <DMperc0>      DM map: background noise level percentile"
echo "     <DMcoeff0>     DM map: background coefficient (ususally 1.0)"
echo "     <DMperc1>      DM map: percentile level above background"
echo "     <DMcoeff1>     DM map: coefficient on level above background"
echo ""
echo " $(tput bold)OUTPUT:$(tput sgr0)"
echo "  zrespmat.fits    : zonal response matrix"
echo "  wfsref0.fits     : wfs reference"
echo "  wfsmap.fits      : WFS response map"
echo "  dmmap.fits       : DM response map"
echo "     wfsmask.fits"
echo "     dmmaskRM.fits"
echo "     dmslaved.fits"
echo "     dmmask.fits" 
echo ""
echo "------------------------------------------------------------------------"
}



printHELP1 ()
{
    printf "%20s       Cleans zonal resp matrix\n" "$0" 
}




# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done





while getopts :h FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1)) 






if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi



















loopnb=$(cat LOOPNUMBER)

pname0=$0
pname="aol${loopnb}zrespM"


Cfits -n $pname << EOF
aolnb $loopnb
loadfits "./conf/RMpokeCube.fits" RMpokeC
loadfits "./conf/RMHmat.fits" Hmat
loadfits "./conf/RMpixindex.fits" pixindexim
aolcleanzrm zrespmat wfsref0 wfsmap dmmap $1 $2

savefits zrespmat "!zrespmat.fits"
savefits wfsref0 "!wfsref0.fits"
savefits wfsmap "!wfsmap.fits"
savefits dmmap "!dmmap.fits"
savefits wfsmask "!wfsmask.fits"
savefits dmmask "!dmmaskRM.fits"
listim
exit
EOF




Cfits << EOF
loadfits "zrespmat.fits" zrespm
loadfits "wfsmap.fits" wfsmap
loadfits "dmmap.fits" dmmap
aolRMmkmasks zrespm wfsmap dmmap 0.2 1.0 0.7 0.3
savefits wfsmask "!wfsmask.fits"
savefits dmmask "!dmmaskRM.fits"
exit
EOF


#./auxscripts/mkDMslaveAct dmmap.fits 0.7 1.0
./auxscripts/mkDMslaveActprox dmmaskRM.fits 2.5


Cfits << EOF
loadfits dmmaskRM.fits dmmRM
loadfits dmslaved.fits dmsl
imtrunc dmsl 0.0 1.0 dmsl1
dmm=1.0-(1.0-dmmRM)*(1.0-dmsl1)
savefits dmm "!dmmask.fits"
exit
EOF

