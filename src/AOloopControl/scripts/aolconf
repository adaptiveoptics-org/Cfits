#!/bin/bash


# ====================== USER EDITS THIS SECTION =======================

execname="Cfits"

# default parameters

LOOPNAME="pyramid" # name of the control loop
LOOPNUMBER_default=2  # loop number

dmC="dmdisp3" # DM control channel
dmdisp="dmdisp" # total DM displacement channel
                                                     
dmRM="dmdisp7" # DM actuation channel for RM matrix
wfsimcam="imcam" # WFS camera image

shmimviewexec="shmimview"
shmimmonexec="shmimmon"


# CUSTOM USER-PROVIDED SCRIPTS:
. AOloopsetup.bash # executed here
# script AOloopAlign.bash : to be executed when menu entry sected




# ======================== END OF USER EDIT SECTION =====================






# ===================== TEST MODE ========================
testdmsize=20






# =================== some initial setup =======================

LINES=$( tput lines )
COLUMNS=$( tput cols )
let " nbwlines = $LINES - 10 "
let " nbwcols = $COLUMNS - 10 "
echo "$COLUMNS -> $nbwcols"
actionmode="Select"

LOOPNUMBER_file="LOOPNUMBER"
confnbfile="./conf/conf_CONFNUMBER.txt"

mkdir -p conf
mkdir -p status
mkdir -p tmp


# LOOPNUMBER (loop number)
if [ ! -f $LOOPNUMBER_file ]
then
	echo "creating loop number"
	echo "$LOOPNUMBER_default" > $LOOPNUMBER_file
else
	LOOPNUMBER=$(cat $LOOPNUMBER_file)
	echo "LOOPNUMBER = $LOOPNUMBER"
fi


outmesg="/tmp/aol${LOOPNUMBER}confout"
rm $outmesg
touch $outmesg


# CONFSELECTED (conf numnber)
if [ ! -f $confnbfile ]
then
	echo "creating configuration number"
	echo "$CONFSELECTED_default" > ./conf/conf_CONFNUMBER.txt
else
	CONFSELECTED=$(cat $confnbfile)
	echo "selected configuration = $CONFSELECTED"
fi



# connect to WFS camera
echo "connecting to camera"
ln -sf /tmp/${wfsimcam}.im.shm /tmp/aol${LOOPNUMBER}_wfsim.im.shm




# loop name
echo "$LOOPNAME" > ./conf/conf_LOOPNAME.txt
echo "loop name : $LOOPNAME"




tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15










# ================ FREQUENTLY USED FUNCTIONS ===================

echo "FUNCTIONS..."



function stringcenter {
line=$1
    let " col1 = $nbwcols-35"
    columns="$col1"
    string=$(printf "%*s%*s\n" $(( (${#line} + columns) / 2)) "$line" $(( (columns - ${#line}) / 2)) " ")
}



function getshmimsize {
$execname << EOF
readshmimsize $1 _size.txt
quit
EOF
sizestring=$( cat _size.txt )
sizestring=$(printf "%+12s\n" "$sizestring" )
rm _size.txt
}



function makemenuitemstringaolshm {
name="$1"
textfield=$( printf " %-20s" "$2" )
tf1=$( printf " %+17s" "aol${LOOPNUMBER}_${name}")
fname=$( cat ./conf/conf_${name}_fname.txt )
if [ -f "$fname" ] && [ -f "./conf/conf_${name}_fname.txt" ]; then
getshmimsize "aol${LOOPNUMBER}_${name}"
OKstr="\Z2\Zr$sizestring\Zn"
menustring="[${OKstr}] $textfield          \Z4\Zb$tf1\Zn <- \Zu${fname}\Zn"
else
OKstr="\Z1   MISSING  \Zn"
menustring="[${OKstr}] $textfield          \Z4\Zb$tf1\Zn <- \Zu\Z1${fname}\Zn"
fi
}



function Fits2shm {
$execname << EOF # move file to shared memory
loadfits "$1" im
imcp2shm im $2
quit
EOF
}



function SelectValue01 {
vali=$( echo $value| awk '{printf("%03d",1000.0*$1)}' )
menuitems1=( "000" "0.000" )
i="1"
while [ $i -lt "$1" ]
do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
i=$[$i+$i]
menuitems1+=( "$str0" "$str1" )
done

for i in `seq $1 $3 $2 `;
        do
if [[ "$i" -lt "$2" && "$i" -gt "001" ]]; then
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems1+=( "$str0" "$str1" )
fi
done 

cmd=( dialog --default-item "${vali}" --menu "Choose one:" 50 80 100 "${menuitems1[@]}" )
value1=$("${cmd[@]}" 2>&1 >/dev/tty)
value=$( echo $value1 | awk '{printf("%5.3f", $1*0.001)}' )
echo $value
}








function ReaddmCname {
file="./conf/conf_dmC_name.txt"
if [ -a $file ]
	then
	dmC=$(echo "$(cat $file)")
	else
	dmC="dmC" #default
fi
# DM correction channel
echo "linking to dm correction channel"
rm /tmp/aol${LOOPNUMBER}_dmC.im.shm 
ln -s /tmp/${dmC}.im.shm /tmp/aol${LOOPNUMBER}_dmC.im.shm
}



function ReaddmZPname {
file="./conf/conf_dmZP_name.txt"
if [ -a $file ]
	then
	dmZP=$(echo "$(cat $file)")
	else
	dmZP="dmZP" #default
fi
# DM correction channel
echo "linking to dm offset channel"
rm /tmp/aol${LOOPNUMBER}_dmZP.im.shm 
ln -s /tmp/${dmZP}.im.shm /tmp/aol${LOOPNUMBER}_dmZP.im.shm
}



function Readdmdispname {
file="./conf/conf_dmdisp_name.txt"
if [ -a $file ]
	then
	dmdisp=$(echo "$(cat $file)")
	else
	dmdisp="dmdisp" #default
fi
# DM correction channel
echo "linking to dm correction channel"
rm /tmp/aol${LOOPNUMBER}_dmdisp.im.shm 
ln -s /tmp/${dmdisp}.im.shm /tmp/aol${LOOPNUMBER}_dmdisp.im.shm
}

function ReaddmRMname {
file="./conf/conf_dmRM_name.txt"
if [ -a $file ]
	then
	dmRM=$(echo "$(cat $file)")
	else
	dmRM="dmRM" #default
fi
# DM response matrix channel
echo "linking to dm resp mat channel"
rm /tmp/aol${LOOPNUMBER}_dmRM.im.shm 
ln -s /tmp/${dmRM}.im.shm /tmp/aol${LOOPNUMBER}_dmRM.im.shm
}


function Readwfsimcamname {
file="./conf/conf_wfsim_name.txt"
if [ -a $file ]
	then
	wfsimcam=$(echo "$(cat $file)")
	else
	wfsimcam="wfsimcam" #default
fi
# WFS raw image
echo "linking to WFS camera"
ln -sf /tmp/${wfsimcam}.im.shm /tmp/aol${LOOPNUMBER}_wfsim.im.shm
}







function ReadWFSdarkfname {
file="./conf/conf_wfsdark_fname.txt"
if [ -a $file ]
	then
	wfsdarkfname=$(echo "$(cat $file)")
	else
	wfsdarkfname="wfsdark.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_wfsdark.im.shm
Fits2shm ${wfsdarkfname} aol${LOOPNUMBER}_wfsdark
ln -s $PWD/${wfsdarkfname} conf/aol${LOOPNUMBER}_wfsdark.fits
}



function ReadzrespMfname {
file="./conf/conf_zrespM_fname.txt"
if [ -a $file ]
	then
	zrespMfname=$(echo "$(cat $file)")
	else
	zrespMfname="zrespM.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_zrespM.im.shm
Fits2shm ${zrespMfname} aol${LOOPNUMBER}_zrespM
ln -s $PWD/${zrespMfname} conf/aol${LOOPNUMBER}_zrespM.fits
}

function ReadWFSmaskfname {
file="./conf/conf_wfsmask_fname.txt"
if [ -a $file ]
	then
	wfsmaskfname=$(echo "$(cat $file)")
	else
	wfsmaskfname="wfsmask.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_wfsmask.im.shm
Fits2shm ${wfsmaskfname} aol${LOOPNUMBER}_wfsmask
ln -s $PWD/${wfsmaskfname} conf/aol${LOOPNUMBER}_wfsmask.fits
}



function ReadDMmaskfname {
file="./conf/conf_dmmask_fname.txt"
if [ -a $file ]
	then
	dmmaskfname=$(echo "$(cat $file)")
	else
	dmmaskfname="dmmask.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_dmmask.im.shm
Fits2shm ${dmmaskfname} aol${LOOPNUMBER}_dmmask
ln -s $PWD/${dmmaskfname} conf/aol${LOOPNUMBER}_dmmask.fits
}


function ReadWFSref0fname {
file="./conf/conf_wfsref0_fname.txt"
if [ -a $file ]
	then
	wfsreffname=$(echo "$(cat $file)")
	else
	wfsreffname="wfsref0.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_wfsref0.im.shm
Fits2shm ${wfsreffname} aol${LOOPNUMBER}_wfsref0
ln -s $PWD/${wfsreffname} conf/aol${LOOPNUMBER}_wfsref0.fits
}









#  System response and control

function ReadCPAmax {
file="./conf/conf_cpamax.txt"
if [ -a $file ]
	then
	cpamax=$(echo "$(cat $file)")
	else
	cpamax="10.0" #default
fi
}

function ReadDMmodesfname {
file="./conf/conf_DMmodes_fname.txt"
if [ -a $file ]
	then
	DMmodesfname=$(echo "$(cat $file)")
	else
	DMmodesfname="DMmodes.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_DMmodes.im.shm
Fits2shm ${DMmodesfname} aol${LOOPNUMBER}_DMmodes
rm conf/aol${LOOPNUMBER}_DMmodes.fits
ln -s $PWD/${DMmodesfname} conf/aol${LOOPNUMBER}_DMmodes.fits
}


function ReadrespMfname {
file="./conf/conf_respM_fname.txt"
if [ -a $file ]
	then
	respMfname=$(echo "$(cat $file)")
	else
	respMfname="respM.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_respM.im.shm
Fits2shm ${respMfname} aol${LOOPNUMBER}_respM
rm conf/aol${LOOPNUMBER}_respM.fits
ln -s $PWD/${respMfname} conf/aol${LOOPNUMBER}_respM.fits
}





# arg1 : image/stream name
#
# Reads conf/conf_XXX_fname.txt
# -> moves file to shared mem under aol#_XXX stream
# -> makes sym link to conf/aol#_XXX.fits
#
function ReadConfFile {
file="./conf/conf_$1_fname.txt"
if [ -a $file ]
	then
	fname=$(echo "$(cat $file)")
	else
	fname="$1.fits" #default
fi
# rm /tmp/aol${LOOPNUMBER}_$1.im.shm  
Fits2shm ${fname} aol${LOOPNUMBER}_$1
rm conf/aol${LOOPNUMBER}_$1.fits
ln -s $PWD/${fname} conf/aol${LOOPNUMBER}_$1.fits
}



function SelectConfFile {
name="$1"
ffname="./conf/conf_${name}_fname.txt"
fname=$( cat $ffname )
echo "fname = $fname"
fname=$(dialog --title "Select  Matrix" --stdout --title "Select ${name}" --fselect ${fname} $nbwlines $nbwcols)
echo "$fname" > $ffname
ReadConfFile "$name"
}













function ReadLoopGain {
file="./conf/conf_loopgain.txt"
if [ -a $file ]
	then
	loopgain=$(echo "$(cat $file)")
	else
	loopgain="0.000" #default
fi
}


function ReadLoopMaxLim {
file="./conf/conf_loopmaxlim.txt"
if [ -a $file ]
	then
	loopmaxlim=$(echo "$(cat $file)")
	else
	loopmaxlim="0.100"
fi
}


function ReadLoopMultCoeff {
file="./conf/conf_loopmultcoeff.txt"
if [ -a $file ]
	then
	loopmultcoeff=$(echo "$(cat $file)")
	else
	loopmultcoeff="0.999"
fi
}



function ReadDMturbampl {
file="./conf/conf_dmturbampl.txt"
if [ -a $file ]
	then
	dmturbampl=$(echo "$(cat $file)")
	else
	dmturbampl=0.1 #default
fi
tmux new-session -d -s DMturbamp
tmux send-keys -t DMturbamp "$execname " C-m
tmux send-keys -t DMturbamp "aoloopcontroldmturampl $dmturbampl" C-m
tmux send-keys -t DMturbamp "exit" C-m
tmux send-keys -t DMturbamp "exit" C-m
}


function ReadDMturbws {
file="./conf/conf_dmturbws.txt"
if [ -a $file ]
	then
	dmturbws=$(echo "$(cat $file)")
	else
	dmturbws=1.0 #default
fi
tmux new-session -d -s DMturbws
tmux send-keys -t DMturbws "$execname " C-m
tmux send-keys -t DMturbws "aoloopcontroldmturws $dmturbws" C-m
tmux send-keys -t DMturbws "exit" C-m
tmux send-keys -t DMturbws "exit" C-m
}


function ReadDMturbtint {
file="./conf/conf_dmturbtint.txt"
if [ -a $file ]
	then
	dmturbtint=$(echo "$(cat $file)")
	else
	dmturbtint=0.1 #default
fi
tmux new-session -d -s DMturbtint
tmux send-keys -t DMturbtint "$execname " C-m
tmux send-keys -t DMturbtint "aoloopcontroldmturtint ${dmturbtint}" C-m
tmux send-keys -t DMturbtint "exit" C-m
tmux send-keys -t DMturbtint "exit" C-m
}


function ReadTMsync {
file="./conf/conf_AOsystsimsync.txt"
if [ -a $file ]
	then
	AOsystsimsync=$(echo "$(cat $file)")
	else
	AOsystsimsync=2 #default
fi
}


function ReadTMdelayus {
file="./conf/conf_AOsystsimWFSdelayus.txt"
if [ -a $file ]
	then
	AOsystsimWFSdelayus=$(echo "$(cat $file)")
	else
	AOsystsimWFSdelayus=100000 #default
fi
}









function ReadTestDMsize {
file="./conf/conf_testdmsize.txt"
if [ -a $file ]
	then
	testdmsize=$(echo "$(cat $file)")
	else
	testdmsize=20 #default
fi
}

function initDM {
file="./conf/conf_testdmsize.txt"
if [ -a $file ]
	then
	testdmsize=$(echo "$(cat $file)")
	else
	testdmsize=20 #default
fi
# start DM channels
tmux kill-session -t aosim${LOOPNUMBER}dmcomb
tmux new-session -d -s aosim${LOOPNUMBER}dmcomb 
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "$execname" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "aolcontroldmsetsize ${testdmsize}" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "aolcontroldmsetname aosimdmctrl" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "aolcontrolDMcomb 1 dmtestvolt" C-m
}













function TestModeStart {

echo "TEST MODE START"

# start DM channels
tmux kill-session -t aosim${LOOPNUMBER}dmcomb
tmux new-session -d -s aosim${LOOPNUMBER}dmcomb 
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "$execname" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "aolcontroldmsetsize ${testdmsize}" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "aolcontroldmsetname aosimdmctrl" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "aolcontrolDMcomb 1 dmtestvolt" C-m


mkdir -p testconf
echo "$execname -n aol${LOOPNUMBER}test << EOF" > script_aol${LOOPNUMBER}test 
echo "AOsystsim ${AOsystsimsync} ${AOsystsimWFSdelayus}" >> script_aol${LOOPNUMBER}test 
chmod +x script_aol${LOOPNUMBER}test 

tmux new-session -d -s aol${LOOPNUMBER}test
echo " ON" > ./status/testloopstatus.txt
tmux send-keys -t aol${LOOPNUMBER}test "./script_aol${LOOPNUMBER}test" C-m

echo "aosimdmctrl2" > ./conf/conf_dmC_name.txt
ReaddmCname
echo "aosimdmctrl1" > ./conf/conf_dmZP_name.txt
ReaddmZPname
echo "aosimdmctrl" > ./conf/conf_dmdisp_name.txt
Readdmdispname
echo "aosimdmctrl3" > ./conf/conf_dmRM_name.txt
ReaddmRMname
echo "aosimwfsim" > ./conf/conf_wfsim_name.txt
Readwfsimcamname

echo "0.1" > ./conf/conf_loopgain.txt
ReadLoopGain

echo "1.0" > ./conf/conf_loopmaxlim.txt
ReadLoopMaxLim 

echo "0.99" > ./conf/conf_loopmultcoeff.txt
ReadLoopMultCoeff
}

function TestModeStop {
pkill aol${LOOPNUMBER}test
echo "OFF" > ./status/testloopstatus.txt
}


function TestStartTurb {
echo " ON" > ./status/testdmturbstatus.txt
mkdir -p ./conf/turb
tmux kill-session -t aosim${LOOPNUMBER}dmturb
tmux new-session -d -s aosim${LOOPNUMBER}dmturb 
tmux send-keys -t aosim${LOOPNUMBER}dmturb "$execname" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturb "aolcontroldmsetsize ${testdmsize}" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturb "aolcontroldmsetname aosimdmctrl" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturb "aoloopcontrolDMturb" C-m

tmux kill-session -t aosim${LOOPNUMBER}dmturbctrl
tmux new-session -d -s aosim${LOOPNUMBER}dmturbctrl
tmux send-keys -t aosim${LOOPNUMBER}dmturbctrl "$execname" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturbctrl "aoloopcontroldmturampl 0.1" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturbctrl "aoloopcontroldmturtint 10000" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturbctrl "aoloopcontroldmturws 1.0" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturbctrl "aoloopcontroldmturlo 0.0" C-m

}

function TestStopTurb {
tmux kill-session -t aosim${LOOPNUMBER}dmturb
echo "OFF" > ./status/testdmturbstatus.txt
}




# =================== READ CONFIGURATION====================================

# hardware I/O [shared memory]
ReaddmCname
ReaddmZPname
Readdmdispname
ReaddmRMname
Readwfsimcamname
ReadLoopDelay


# I/O pre-processing [FITS files]
ReadWFSdarkfname

# SYSTEM CALIBRATION
ReadConfFile "zrespM"
ReadConfFile "wfsmask"
ReadConfFile "dmmask"
ReadConfFile "wfsref0"


# System response and control
ReadCPAmax
#ReadDMmodesfname
#ReadrespMfname
ReadConfFile "DMmodes"
ReadConfFile "respM"
ReadConfFile "contrM"


ReadLoopGain
ReadLoopMaxLim
ReadLoopMultCoeff









# =================== STATE MACHINE ====================================
state="menutop"


confnb=0
confselected=1

menuconfmanage_default=0








echo "START STATE MACHINE"



while true; do

stateok=0



# =====================================================
# ===================== TOP MENU ======================
# =====================================================

if [ $state = "menutop" ]; then
stateok=1
confselected=$(cat "./conf/conf_CONFNUMBER.txt")
menuname="TOP MENU\n [Active conf = ${confselected}]"


stringcenter "AO CONFIGURE AND CONTROL"
menuitems=( "1 ->" "\Zb\Zr$string\Zn" )

menuitems+=( "C" "Configure/link AO loop" )
menuitems+=( "L" "Control AO loop" )
menuitems+=( "T" "Test mode: simulated AO system" )
menuitems+=( "V" "View / monitor" )
menuitems+=( " " " ")

stringcenter "DATA LOGGING / ANALYSIS"
menuitems+=( "2 ->" "\Zb\Zr$string\Zn" )
menuitems+=( "R" "Record / analyze")
menuitems+=( " " " ")

stringcenter "CUSTOM EXTERNAL SCRIPTS"
menuitems+=( "3 ->" "\Zb\Zr$string\Zn" )
menuitems+=( "A" "Align")


dialog --colors --title "AO loop top menu  - LOOP ${LOOPNUMBER}" \
--ok-label "Select" \
--cancel-label "Exit" \
--default-item "${menutop_default}" \
 --menu "$menuname" \
 $nbwlines $nbwcols  100 "${menuitems[@]}"  2> $tempfile


retval=$?
choiceval=$(cat $tempfile)
menutop_default="$choiceval"
case $retval in
   0) # button
	case $choiceval in
   	 C) state="menuconfigureloop";;   
   	 L) state="menucontrolloop";;
   	 T) state="menutestmode"   ;;
   	 V) state="menuview" ;;

 	R) state="menurecord" ;;

   	 A) state="menualign";;

	esac;;
   1) state="menuexit";;   
   255) state="menuexit";;
esac
fi








if [ $state = "menualign" ]; then
stateok=1
./AOloopAlign.bash
state="menutop"
fi



















function UpdateModes {

value=${SVDlim[10#${mb}]}
SelectValue01 100 1001 50
SVDlim[10#${mb}]=${value}
echo "${SVDlim[10#${mb}]}" > ./conf/block${mb}_SVDlim.txt
tmuxname="aol${LOOPNUMBER}mkmodes"
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "./aolmkmodes ${cpamax} ${mb} ${SVDlim[10#${mb}]}" C-m
	
tmux send-keys -t aol${LOOPNUMBER}mkmodes "touch mkmodes.run0" C-m
waitforfile mkmodes.run0
rm mkmodes.run0
datestr=`date -u +%Y-%m-%d_%H:%M:%S`

tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodesall.fits DMmodes/DMmodes_${datestr}.fits" C-m
echo "DMmodes/DMmodes_${datestr}.fits" > ./conf/conf_DMmodes_fname.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodesWFSall.fits respM/respM_${datestr}.fits" C-m
echo "respM/respM_${datestr}.fits" > ./conf/conf_respM_fname.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmat.fits contrM/contrM_${datestr}.fits" C-m
echo "contrM/contrM_${datestr}.fits" > ./conf/conf_contrM_fname.txt


i2="$mb"

tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodes_${i2}.fits DMmodes/DMmodes${i2}_${datestr}.fits" C-m
echo "DMmodes/DMmodes${i2}_${datestr}.fits" > ./conf/conf_DMmodes${i2}_fname.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodesWFS_${i2}.fits respM/respM${i2}_${datestr}.fits" C-m
echo "respM/respM${i2}_${datestr}.fits" > ./conf/conf_respM${i2}_fname.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmat_${i2}.fits contrM/contrM${i2}_${datestr}.fits" C-m
echo "contrM/contrM${i2}_${datestr}.fits" > ./conf/conf_contrM${i2}_fname.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmatc_${i2}.fits contrMc/contrMc${i2}_${datestr}.fits" C-m
echo "contrMc/contrMc${i2}_${datestr}.fits" > ./conf/conf_contrMc${i2}_fname.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmatcact_${i2}.fits contrMcact/contrMcact${i2}_${datestr}.fits" C-m
echo "contrMcact/contrMcact${i2}_${datestr}.fits" > ./conf/conf_contrMcact${i2}_fname.txt



tmux send-keys -t aol${LOOPNUMBER}mkmodes "touch mkmodes.run" C-m
waitforfile mkmodes.run


ReadConfFile "DMmodes"
ReadConfFile "respM"
ReadConfFile "contrM"

i2="${mb}"
ReadConfFile "DMmodes${i2}"
ReadConfFile "respM${i2}"
ReadConfFile "contrM${i2}"
ReadConfFile "contrMc${i2}"
ReadConfFile "contrMcact${i2}"

}


































# =====================================================
# =============== CONFIGURE AO LOOP ===================
# =====================================================

if [ $state = "menuconfigureloop" ]; then
stateok=1
menuname="\Zb\Zu LOOP CONFIGURATION\Zn\n 
Notations: \n      
  \Z4shared memory stream\Zn\n
  \Zufile system FITS file\Zn\n   
  \Z1missing file or stream\Zn\n
\n
For all configurations files (not including Hardware I/O links) :\n
  File \Zbconf/conf_<name>_fname.txt\Zn contains the original .fits file path and name\n
  A symbolic link to the FITS file is written as \Zuconf/aol${LOOPNUMBER}_<name>.fits\Zn\n
  File is loaded in shared memory as /tmp/\Z4aol${LOOPNUMBER}_<name>\Zn.im.shm\n
"

confOK=1
stringcenter "HELP"
menuitems=( "H" "\Zb\Zr\Z4$string\Zn" )
menuitems+=( " " " " )

stringcenter "HARDWARE I/O LINKS [shared memory sim links]"
menuitems+=( "1 ->" "\Zb\Zr$string\Zn" )

dmCfile="/tmp/${dmC}.im.shm"
if [ -f $dmCfile ]; then
getshmimsize ${dmC}
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "dmC" "[\Z2\Zr${OKstr}\Zn] DM control channel        \Z4\Zbaol${LOOPNUMBER}_dmC\Zn -> \Z4${dmC}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmC" "[${OKstr}] DM control channel        \Z4\Zbaol${LOOPNUMBER}_dmC\Zn -> \Z1${dmC}\Zn" )
confOK=0
fi


dmZPfile="/tmp/${dmZP}.im.shm"
if [ -f $dmZPfile ]; then
getshmimsize ${dmZP}
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "dmZP" "[${OKstr}] DM control offset chan.  \Z4\Zbaol${LOOPNUMBER}_dmZP\Zn -> \Z4${dmZP}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmZP" "[${OKstr}] DM control offset chan.  \Z4\Zbaol${LOOPNUMBER}_dmZP\Zn -> \Z1${dmZP}\Zn" )
confOK=0
fi



dmdispfile="/tmp/${dmdisp}.im.shm"
if [ -f $dmdispfile ]; then
getshmimsize ${dmdisp}
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "dmdisp" "[${OKstr}] DM total displacement  \Z4\Zbaol${LOOPNUMBER}_dmdisp\Zn -> \Z4${dmdisp}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmdisp" "[${OKstr}] DM total displacement  \Z4\Zbaol${LOOPNUMBER}_dmdisp\Zn -> \Z1${dmdisp}\Zn" )
confOK=0
fi


dmRMfile="/tmp/${dmRM}.im.shm"
if [ -f $dmRMfile ]; then
getshmimsize ${dmRM}
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "dmRM" "[${OKstr}] DM RM acqu channel      \Z4\Zbaol${LOOPNUMBER}_dmdRM\Zn -> \Z4${dmRM}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmRM" "[${OKstr}] DM RM acqu channel      \Z4\Zbaol${LOOPNUMBER}_dmRM\Zn -> \Z1${dmRM}\Z1" )
confOK=0
fi


wfsimcamfile="/tmp/${wfsimcam}.im.shm"
if [ -f $wfsimcamfile ]; then
getshmimsize ${wfsimcam}
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "wfs" "[${OKstr}] WFS camera image        \Z4\Zbaol${LOOPNUMBER}_wfsim\Zn -> \Z4${wfsimcam}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "wfs" "[${OKstr}] WFS camera image        \Z4\Zbaol${LOOPNUMBER}_wfsim\Zn -> \Z1${wfsimcam}\Zn" )
confOK=0
fi




menuitems+=( " " " " )
stringcenter "I/O PRE-PROCESSING [FITS files] "
menuitems+=( "2 ->" "\Zb\Zr$string\Zn" )
 

wfsdarkfname=$( cat ./conf/conf_wfsdark_fname.txt )
if [ -f "$wfsdarkfname" ] && [ -f "./conf/conf_wfsdark_fname.txt" ]; then
#wfsdarkfnameOKstr="\Z2    OK    \Zn"
getshmimsize "wfsdark"
OKstr="\Z2\Zr$sizestring\Zn"
else
OKstr="\Z5 OPTIONAL \Zn"
confOK=0
fi
menuitems+=( "dark" "[${OKstr}] WFS dark                  {\Z4${wfsdarkfname}\Zn}" )



acqudarkstat=$( cat ./status/stat_acqudark.txt )
if [[ -f "./status/stat_acqudark.txt" && ( "$acqudarkstat" = " ON" || "$acqudarkstat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_acqudark.txt
fi

acqudarkstat=$( cat ./status/stat_acqudark.txt )
if [ "${acqudarkstat}" = "OFF" ];
then
menuitems+=( "adark_on" "             START acquire WFS dark acquisition" )
fi
if [ "${acqudarkstat}" = " ON" ];
then
menuitems+=( "adarkoff" "\Z1\Zr             STOP WFS dark acquisition                     \Zn" )
fi





menuitems+=( " " " " )
stringcenter "SYSTEM CALIBRATION (ZONAL)"
menuitems+=( "3 ->" "\Zb\Zr$string\Zn" )

menuitems+=( "Sconf" " SAVE CURRENT SYSTEM CALIBRATION" )
menuitems+=( "Lconf" " LOAD CURRENT SYSTEM CALIBRATION" )


rmamplum=0.05
if [ -f "./conf/conf_RMamplum.txt" ]; then
rmamplum=$( cat ./conf/conf_RMamplum.txt )
fi
menuitems+=( "rmamp" "            RM amplitude                    ${rmamplum} um" )

rmdelays=0.05
if [ -f "./conf/conf_RMdelays.txt" ]; then
rmdelays=$( cat ./conf/conf_RMdelays.txt )
fi
menuitems+=( "rmdelay" "            RM time delay                   ${rmdelays} sec" )

rmfrave=5
if [ -f "./conf/conf_RMfrave.txt" ]; then
rmfrave=$( cat ./conf/conf_RMfrave.txt )
fi
menuitems+=( "rmnbfr" "            RM frame averaging              ${rmfrave} frames" )


makemenuitemstringaolshm "zrespM" "Zonal Resp Mat"
menuitems+=( "zrespM" "$menustring" )




zrespMstat=$( cat ./status/stat_zrespM.txt )
if [[ -f "./status/stat_zrespM.txt" && ( "$zrespMstat" = " ON" || "$zrespMstat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_zrespM.txt
fi



zrespmatnbiter=$( cat zresptmp/zrespmat_nbiter.txt )
if [ "${zrespMstat}" = "OFF" ];
then
menuitems+=( "zresp_on" "START zonal RMs acquisition" )
if [ "${zrespmatnbiter}" -lt 4 ]; then
menuitems+=( " " "[${zrespmatnbiter} matrices available] \Z1Need > 4 matrices to CLEAN and average zonal RMs\Zn")
else
menuitems+=( "zrespc" "[${zrespmatnbiter} matrices] CLEAN and average zonal RMs")
fi

#menuitems+=( "zrespoff" "            PROCESS zrespM" )
menuitems+=( " " " ")
else
menuitems+=( "zrespoff" "\Z1\ZrSTOP zonal RM acquisition\Zn" )
if [ "${zrespmatnbiter}" -lt 4 ]; then
menuitems+=( " " "[${zrespmatnbiter} matrices available] \Z1Need > 4 matrices to CLEAN and average zonal RMs\Zn")
else
menuitems+=( "zrespc" "CLEAN currently accumulated zonal RMs (${zrespmatnbiter} matrices)")
fi

menuitems+=( "zrespmon" "             Monitor tmux session zrespM${LOOPNUMBER}" )
fi



makemenuitemstringaolshm "wfsmask" "WFS pixel mask"
menuitems+=( "wfsM" "$menustring" )

makemenuitemstringaolshm "dmmask" "DM actuator mask"
menuitems+=( "dmM" "$menustring" )

makemenuitemstringaolshm "wfsref0" "WFS reference"
menuitems+=( "wfsref0" "$menustring" )



acquwfsref0stat=$( cat ./status/stat_acquwfsref0.txt )
if [[ -f "./status/stat_acquwfsref0.txt" && ( "$acquwfsref0stat" = " ON" || "$acquwfsref0stat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_acquwfsref0.txt
fi

acquwfsref0stat=$( cat ./status/stat_acquwfsref0.txt )
if [ "${acquwfsref0stat}" = "OFF" ];
then
menuitems+=( "awfsref0_on" "             START new WFS ref acquisition" )
menuitems+=( " " " " )
fi
if [ "${acquwfsref0stat}" = " ON" ];
then
menuitems+=( "awfsref0off" "\Z1\Zr             STOP WFS ref acquisition                  \Zn" )
menuitems+=( "awfsref0mon" "             Monitor tmux session aol${LOOPNUMBER}awfsref0" )
fi









menuitems+=( " " " " )
stringcenter "SYSTEM MODAL RESPONSE AND CONTROL"
menuitems+=( "4 ->" "\Zb\Zr$string\Zn" )



mkmodesdatestr=$(stat -c %y ./conf/conf_NBmodeblocks.txt)
mkmodesdatestr=${mkmodesdatestr% *}
NBblocks=$( cat ./conf/conf_NBmodeblocks.txt )
NBmodes=$( cat ./conf/conf_NBmodes.txt )
menuitems+=( "mkModes" "<$mkmodesdatestr>  [$NBblocks blocks, $NBmodes modes] Create DM control modes file, control matrices" )



makemenuitemstringaolshm "DMmodes" "DM control modes"
menuitems+=( "DMmodes" "$menustring" )

makemenuitemstringaolshm "respM" "Modal Response Matrix"
menuitems+=( "RM" "$menustring" )

makemenuitemstringaolshm "contrM" "Modal Control Matrix"
menuitems+=( "CM" "$menustring" )





for i in `seq 0 $(( $NBblocks - 1 ))`;
do
i2=$(printf "%02d" "$i")


#menuitems+=( "gb${i2}" "[ ${gainb[10#${i2}]} ] Modal block ${i2} gain  ($string modes)" )


SVDlim[10#${i2}]=$( cat ./conf/block${i2}_SVDlim.txt)
NBblockmodes=$( cat ./conf/block${i2}_NBmodes.txt )

menuitems+=( "SetSVD${i2}" "\Zb\ZrBLOCK $i2 - ${NBblockmodes} modes - SVD = ${SVDlim[10#${i2}]}\Zn")

makemenuitemstringaolshm "DMmodes${i2}" "DM control modes"
menuitems+=( "DMm${i2}" "$menustring" )

makemenuitemstringaolshm "respM${i2}" "Modal Resp matrix"
menuitems+=( "RMm${i2}" "$menustring" )

makemenuitemstringaolshm "contrM${i2}" "Modal Contr matrix"
menuitems+=( "CMm${i2}" "$menustring" )

makemenuitemstringaolshm "contrMc${i2}" "Zonal Contr matrix"
menuitems+=( "CMmc${i2}" "$menustring" )

makemenuitemstringaolshm "contrMcact${i2}" "Zonal act Cmat"
menuitems+=( "CMmca${i2}" "$menustring" )

done






state="menutop"


dialog --colors --title "LOOP CONFIGURATION  - LOOP ${LOOPNUMBER}" \
--ok-label "Action: ${actionmode}" \
--cancel-label "Top" \
--extra-button --extra-label "Action toggle" \
--help-button --help-label "Exit" \
--default-item "${menucontrolloop_default}" \
 --menu "$menuname" \
 $nbwlines $nbwcols 100 "${menuitems[@]}"  2> $tempfile


retval=$?
choiceval=$(cat $tempfile)

menucontrolloop_default="$choiceval"
state="menuconfigureloop"

case $actionmode in
	"Select")
amode=0
;;
	"View")
amode=1
;;
esac

case $retval in
   0) # button
	case $choiceval in
	-);;
	H)
dialog --title "Help" --msgbox '
Loop configuration is stored in ./conf/ directory\n
Files specified in this configuration menu get linked/loaded to shared memory:\n



HARDWARE I/O:\n
     /tmp/aol${LOOPNUMBER}_dmC.im.shm           DM correction channel\n
     /tmp/aol${LOOPNUMBER}_dmRM.im.shm          DM resp matrix channel\n
     /tmp/aol${LOOPNUMBER}_wfsim.im.shm         WFS camera image\n
I/O PRE-PROCESSING:\n
     /tmp/aol${LOOPNUMBER}_wfsdark.im.shm       WFS dark\n
SYSTEM ZONAL RESPONSE AND CONTROL:\n
     /tmp/aol${LOOPNUMBER}_wfsmask.im.shm       WFS mask\n
     /tmp/aol${LOOPNUMBER}_dmmask.im.shm        DM mask\n
     /tmp/aol${LOOPNUMBER}_wfsref0.im.shm        WFS ref\n
SYSTEM MODAL RESPONSE AND CONTROL:\n
     /tmp/aol${LOOPNUMBER}_DMmodes.im.shm       DM modes\n
     /tmp/aol${LOOPNUMBER}_RM.im.shm            Response Matrix\n
     /tmp/aol${LOOPNUMBER}_CM.im.shm            Control Matrix\n
' $nbwlines $nbwcols
;;
	dmC)
case $amode in
	0)
exec 3>&1;
dmC=$(dialog --inputbox "dmC" 0 0 "$dmC" 2>&1 1>&3);
exec 3>&-;
echo "$dmC" > ./conf/conf_dmC_name.txt
ReaddmCname
;;
	1)shmimmon aol${LOOPNUMBER}_dmC;;
esac
;;

	
	dmZP)
case $amode in
	0)
exec 3>&1;
dmZP=$(dialog --inputbox "dmZP" 0 0 "$dmZP" 2>&1 1>&3);
#exitcode=$?;
exec 3>&-;
#echo $result $exitcode;
echo "$dmZP" > ./conf/conf_dmZP_name.txt
ReaddmZPname
;;
	1)shmimmon aol${LOOPNUMBER}_dmZP;;
esac
;;


	dmdisp)
case $amode in
	0)
exec 3>&1;
dmdisp=$(dialog --inputbox "dmdisp" 0 0 "$dmdisp" 2>&1 1>&3);
#exitcode=$?;
exec 3>&-;
#echo $result $exitcode;
echo "$dmdisp" > ./conf/conf_dmdisp_name.txt
Readdmdispname
;;
	1)
shmimmon aol${LOOPNUMBER}_dmdisp
;;
esac
;;
	dmRM)
case $amode in
	0)
exec 3>&1;
dmRM=$(dialog --inputbox "dmRM" 0 0 "$dmRM" 2>&1 1>&3);
exec 3>&-;
echo "$dmRM" > ./conf/conf_dmRM_name.txt
ReaddmRMname
;;
	1)
shmimmon aol${LOOPNUMBER}_dmRM
;;
esac
;;
	wfs)
case $amode in
	0)
exec 3>&1;
wfsimcam=$(dialog --inputbox "WFS image" 0 0 "$wfsimcam" 2>&1 1>&3);
exec 3>&-;
echo "$wfsimcam" > ./conf/conf_wfsim_name.txt
Readwfsimcamname
;;
	1)
shmimmon aol${LOOPNUMBER}_wfsim
;;
esac
;;

	dark)
exec 3>&1;
wfsdarkfname=$(dialog --title "Select WFS dark" --stdout --fselect "${wfsdarkfname}" $nbwlines $nbwcols)
echo "$wfsdarkfname" > ./conf/conf_wfsdark_fname.txt
ReadWFSdarkfname
;;
	adark_on)
acqdarkstat=" ON"
echo " ON" > ./status/stat_acqudark.txt
tmux new-session -d -s adark
#tmux send-keys -t adark "./aol" C-m
menucontrolloop_default="adarkoff"
;;
	adarkoff)
acqdarkstat="OFF"
echo "OFF" > ./status/stat_acqudark.txt
tmux kill-session -t adark
menucontrolloop_default="adark_on"
;;



	Sconf)
mkdir -p ./CONF
exec 3>&1;
confname=$(dialog --title "Select Configuration" --stdout --title "Select Configuration" --fselect "./CONF/" $nbwlines $nbwcols)
exec 3>&-;
echo "${confname}" > ./confname.txt
mkdir -p "${confname}"
cp conf/aol${LOOPNUMBER}_zrespM.fits "${confname}"
cp conf/aol${LOOPNUMBER}_dmmap.fits "${confname}"
cp conf/aol${LOOPNUMBER}_wfsmap.fits "${confname}"
cp conf/aol${LOOPNUMBER}_dmmask.fits "${confname}"
cp conf/aol${LOOPNUMBER}_wfsmask.fits "${confname}"
cp conf/aol${LOOPNUMBER}_wfsref0.fits "${confname}"


cp conf/aol${LOOPNUMBER}_contrM*.fits "${confname}"
cp conf/aol${LOOPNUMBER}_contrMc*.fits "${confname}"
cp conf/aol${LOOPNUMBER}_contrMcact*.fits "${confname}"
cp conf/aol${LOOPNUMBER}_DMmodes*.fits "${confname}"
cp conf/aol${LOOPNUMBER}_respM*.fits "${confname}"

cp conf/conf_NBmodeblocks.txt "${confname}"
cp conf/conf_NBmodes.txt "${confname}"
cp conf/block*.txt "${confname}"
cp conf/conf_gainb*.txt "${confname}"


cp conf/conf_AOsystsimsync.txt "${confname}"
cp conf/conf_AOsystsimWFSdelayus.txt "${confname}"
cp conf/conf_GPU.txt "${confname}"
cp conf/conf_GPUall.txt "${confname}"
cp conf/conf_CMmode.txt "${confname}"
cp conf/conf_cpamax.txt "${confname}"

cp conf/conf_loopgain.txt "${confname}"
cp conf/conf_loopmaxlim.txt "${confname}"
cp conf/conf_loopmultcoeff.txt "${confname}"


cp conf/conf_dmC_name.txt "${confname}"
cp conf/conf_dmdisp_name.txt "${confname}"
cp conf/conf_dmRM_name.txt "${confname}"
cp conf/conf_dmZP_name.txt "${confname}"
cp conf/conf_wfsim_name.txt "${confname}"
;;

	Lconf)
mkdir -p ./CONF
exec 3>&1;
confname=$(dialog --title "Select Configuration" --stdout --title "Select Configuration" --fselect "./CONF/" $nbwlines $nbwcols)
exec 3>&-;
echo "${confname}" > confname.txt

for name in dmC dmdisp dmRM dmZP wfsim
do
	cp "${confname}"/conf_${name}_name.txt ./conf/conf_${name}_name.txt
	lname=$( echo "./conf/conf_${name}_name.txt" )
	rm /tmp/aol${LOOPNUMBER}_${name}.im.shm
	ln -s /tmp/${lname}.im.shm /tmp/aol${LOOPNUMBER}_${name}.im.shm
done



for name in zrespM dmmap dmmask wfsmap wfsmask wfsref0
do
	cp "${confname}"/aol${LOOPNUMBER}_${name}.fits ./conf/conf_${name}.txt
	echo "${confname}/aol${LOOPNUMBER}_${name}.fits" > ./conf/conf_${name}_fname.txt
done

for namet in contrM contrMc contrMcact DMmodes respM
do
for i in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14
do
	name1="${namet}${i}"
	name="${confname}/aol${LOOPNUMBER}_${name1}.fits"
	if [ -f "$name" ]; then
	cp "${confname}"/aol${LOOPNUMBER}_${name1}.fits ./conf/conf_${name1}.txt
	echo "${confname}/aol${LOOPNUMBER}_${name1}.fits" > ./conf/conf_${name1}_fname.txt
	fi
done
done


for name in contrM DMmodes respM
do
	cp "${confname}"/aol${LOOPNUMBER}_${name}.fits ./conf/conf_${name}.txt
	echo "${confname}/aol${LOOPNUMBER}_${name}.fits" > ./conf/conf_${name}_fname.txt
done




cp "${confname}"/conf_NBmodeblocks.txt ./conf/
cp "${confname}"/conf_NBmodes.txt ./conf/
cp "${confname}"/block*.txt ./conf/
cp "${confname}"/conf_gainb*.txt ./conf/

cp "${confname}"/conf_AOsystsimsync.txt ./conf/
cp "${confname}"/conf_AOsystsimWFSdelayus.txt ./conf/
cp "${confname}"/conf_GPU.txt ./conf/
cp "${confname}"/conf_GPUall.txt ./conf/
cp "${confname}"/conf_CMmode.txt ./conf/
cp "${confname}"/conf_cpamax.txt ./conf/

cp "${confname}"/conf_loopgain.txt ./conf/
cp "${confname}"/conf_loopmaxlim.txt ./conf/
cp "${confname}"/conf_loopmultcoeff.txt ./conf/

exit

#for name in "dmC" "dmdisp" "dmRM" "dmZP" "wfsim" 
#do
#	cp "${confname}"/conf_${name}_fname.txt ./conf/
#done


;;


	rmamp)
exec 3>&1;
rmamplum=$(dialog --inputbox "RM amplitude [um]" 0 0 "$rmamplum" 2>&1 1>&3);
exec 3>&-;
echo "$rmamplum" > ./conf/conf_RMamplum.txt
;;
	rmdelay)
exec 3>&1;
rmdelays=$(dialog --inputbox "RM time delay [s]" 0 0 "$rmdelays" 2>&1 1>&3);
exec 3>&-;
echo "$rmdelays" > ./conf/conf_RMdelays.txt
;;
	rmnbfr)
exec 3>&1;
rmfrave=$(dialog --inputbox "RM frame averaging" 0 0 "$rmfrave" 2>&1 1>&3);
exec 3>&-;
echo "$rmfrave" > ./conf/conf_RMfrave.txt
;;


	zmatn)
case $amode in
	0)
zrespMfname=$(dialog --title "Select Zonal RM" --stdout --title "Select zonal RM" --fselect "${zrespMfname}" $nbwlines $nbwcols)
echo "$zrespMfname" > ./conf/conf_zrespM_fname.txt
#ReadzrespMfname
ReadConfFile "zrespM"
;;
	1)
ds9 $imname &
imname=$( cat ./conf/conf_zrespM_fname.txt )
;;
esac
;;
	zresp_on)
zrespMstat=" ON"
echo " ON" > ./status/stat_zrespM.txt
if [ -f "./conf/conf_RMpokeMode.txt" ]; then
RMpokeMode=$( echo "./conf/conf_RMpokeMode.txt" )
else
RMpoleMode="0" # default
fi
if [ "${RMpokeMode}" -eq "0" ]; then
rm RMpokeCube.fits
else
cp ./conf/Hpoke50.fits RMpokeCube.fits
fi
tmux new-session -d -s aol${LOOPNUMBER}zrespM
tmux send-keys -t aol${LOOPNUMBER}zrespM "./aolMeasureZrespmat ${rmamplum} ${rmdelays} ${rmfrave}" C-m
menucontrolloop_default="zrespoff"
;;
	zrespc) # clean zrespm
tmuxname="aol${LOOPNUMBER}zrepMc"
tmux new-session -d -s ${tmuxname}
tmux send-keys -t ${tmuxname} "./aolCleanZrespmat ${rmamplum}" C-m
mkdir -p zrespM
mkdir -p wfsref
mkdir -p wfsref0
mkdir -p wfsmap
mkdir -p dmmap
mkdir -p wfsmask
mkdir -p dmmask
datestr=`date -u +%Y-%m-%d_%H:%M:%S`
tmux send-keys -t ${tmuxname} "cp zrespmat.fits zrespM/zrespM_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp wfsref0.fits wfsref0/wfsref0_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp wfsmap.fits wfsmap/wfsmap_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp dmmap.fits dmmap/dmmap_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp wfsmask.fits wfsmask/wfsmask_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp dmmask.fits dmmask/dmmask_${datestr}.fits" C-m
echo "zrespM/zrespM_${datestr}.fits" > ./conf/conf_zrespM_fname.txt
echo "wfsref0/wfsref0_${datestr}.fits" > ./conf/conf_wfsref0_fname.txt
echo "wfsmap/wfsmap_${datestr}.fits" > ./conf/conf_wfsmap_fname.txt
echo "dmmap/dmmap_${datestr}.fits" > ./conf/conf_dmmap_fname.txt
echo "wfsmask/wfsmask_${datestr}.fits" > ./conf/conf_wfsmask_fname.txt
echo "dmmask/dmmask_${datestr}.fits" > ./conf/conf_dmmask_fname.txt
rm cleanZresp.run
tmux send-keys -t  ${tmuxname} "touch cleanZresp.run" C-m
tmux send-keys -t ${tmuxname} "exit" C-m
waitforfile cleanZresp.run
rm cleanZresp.run
ReadConfFile "zrespM"
ReadConfFile "wfsref0"
ReadConfFile "wfsmap"
ReadConfFile "dmmap"
ReadConfFile "wfsmask"
ReadConfFile "dmmask"
sleep 0.5
;;
	zrespoff)
zrespMstat="OFF"
echo "OFF" > ./status/stat_zrespM.txt
tmux new-session -d -s aol${LOOPNUMBER}zrespM
tmux send-keys -t aol${LOOPNUMBER}zrespM "./aolCleanZrespmat ${rmamplum}" C-m
pkill -USR1 aol${LOOPNUMBER}zrespM
mkdir -p zrespM
mkdir -p wfsref
mkdir -p wfsref0
mkdir -p wfsmap
mkdir -p dmmap
mkdir -p wfsmask
mkdir -p dmmask
datestr=`date -u +%Y-%m-%d_%H:%M:%S`
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp zrespmat.fits zrespM/zrespM_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp wfsref0.fits wfsref0/wfsref0_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp wfsmap.fits wfsmap/wfsmap_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp dmmap.fits dmmap/dmmap_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp wfsmask.fits wfsmask/wfsmask_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp dmmask.fits dmmask/dmmask_${datestr}.fits" C-m
echo "zrespM/zrespM_${datestr}.fits" > ./conf/conf_zrespM_fname.txt
echo "wfsref0/wfsref0_${datestr}.fits" > ./conf/conf_wfsref0_fname.txt
echo "wfsmap/wfsmap_${datestr}.fits" > ./conf/conf_wfsmap_fname.txt
echo "dmmap/dmmap_${datestr}.fits" > ./conf/conf_dmmap_fname.txt
echo "wfsmask/wfsmask_${datestr}.fits" > ./conf/conf_wfsmask_fname.txt
echo "dmmask/dmmask_${datestr}.fits" > ./conf/conf_dmmask_fname.txt
rm cleanZresp.run
tmux send-keys -t aol${LOOPNUMBER}zrespM "touch cleanZresp.run" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "exit" C-m
waitforfile cleanZresp.run
rm cleanZresp.run
ReadConfFile "zrespM"
ReadConfFile "wfsref0"
ReadConfFile "wfsmap"
ReadConfFile "dmmap"
ReadConfFile "wfsmask"
ReadConfFile "dmmask"
menucontrolloop_default="zresp_on"
state="menuconfigureloop"
;;
	zrespmon)
tmux a -t aol${LOOPNUMBER}zrespM
menucontrolloop_default="zrespmon"
state="menuconfigureloop"
;;
	wfsM)
case $amode in
	0)
exec 3>&1;
wfsmaskfname=$(dialog --title "Select WFS pixel mask file name" --stdout  --fselect "${wfsmaskfname}" $nbwlines $nbwcols)
echo "$wfsmaskfname" > ./conf/conf_wfsmask_fname.txt
ReadConfFile "wfsmask"
;;
	1)
imname=$( cat ./conf/conf_wfsmask_fname.txt )
ds9 $imname &
;;
esac
menucontrolloop_default="wfsM"
state="menuconfigureloop"
;;
	dmM)
case $amode in
	0)
exec 3>&1;
dmmaskfname=$(dialog --title "Select DM act mask file name" --stdout --fselect "${dmmaskfname}" $nbwlines $nbwcols)
echo "$dmmaskfname" > ./conf/conf_dmmask_fname.txt
ReadConfFile "dmmask"
;;
	1)
imname=$( cat ./conf/conf_dmmask_fname.txt )
ds9 $imname &
;;
esac
menucontrolloop_default="dmM"
state="menuconfigureloop"
;;
	wfsref0)
case $amode in
	0)
exec 3>&1;
wfsref0fname=$(dialog --title "Select WFS reference file name" --stdout --fselect "${wfsref0fname}" $nbwlines $nbwcols)
echo "$wfsref0fname" > ./conf/conf_wfsref0_fname.txt
ReadConfFile "wfsref0"
;;
	1)
imname=$( cat ./conf/conf_wfsref_fname.txt )
ds9 $imname &
;;
esac
menucontrolloop_default="wfsref0"
state="menuconfigureloop"
;;
	awfsref0_on)
acquwfsref0stat=" ON"
echo " ON" > ./status/stat_acquwfsref0.txt
tmuxsname="aol${LOOPNUMBER}awfsref0"
tmux new-session -d -s $tmuxsname
tmux send-keys -t $tmuxsname "$execname -n awfsref0${LOOPNUMBER}" C-m
tmux send-keys -t $tmuxsname "readshmim aol${LOOPNUMBER}_wfsim" C-m
tmux send-keys -t $tmuxsname "imgstreamave aol${LOOPNUMBER}_wfsim 100000 imave 0" C-m
menucontrolloop_default="awfsref0off"
state="menuconfigureloop"
;;
	awfsref0off)
acquwfsref0stat="OFF"
echo "OFF" > ./status/stat_acquwfsref0.txt
pkill -USR1 awfsref0${LOOPNUMBER}
rm wfsref0.fits
tmuxsname="aol${LOOPNUMBER}awfsref0"
tmux send-keys -t $tmuxsname "savefits imave wfsref0.fits" C-m
tmux send-keys -t $tmuxsname "exit" C-m
datestr=`date -u +%Y-%m-%d_%H:%M:%S`
tmux send-keys -t $tmuxsname "cp wfsref0.fits wfsref0/wfsref0_${datestr}.fits" C-m
tmux send-keys -t $tmuxsname "exit" C-m
echo "wfsref0/wfsref0_${datestr}.fits" > ./conf/conf_wfsref0_fname.txt
menucontrolloop_default="awfsref0_on"
state="menuconfigureloop"
;;
	awfsref0mon)
tmuxsname="aol${LOOPNUMBER}awfsref0"
tmux a -t $tmuxsname
menucontrolloop_default="awfsref0mon"
state="menuconfigureloop"
;;


	mkModes)

menucontrolloop_default="mkModes"
state="menu_mkFModes"
;;
	DMmodes)
fname=$( cat ./conf/conf_DMmodes_fname.txt )
fname=$(dialog --title "Select DM Control Modes" --stdout --fselect ${fname} $nbwlines $nbwcols)
echo "$fname" > ./conf/conf_DMmodes_fname.txt
ReadConfFile "DMmodes"
menucontrolloop_default="DMmodes"
state="menuconfigureloop"
;;
	RM)
fname=$( cat ./conf/conf_respM_fname.txt )
fname=$(dialog --title "Select Resp Matrix" --stdout --fselect ${fname} $nbwlines $nbwcols)
echo "$fname" > ./conf/conf_respM_fname.txt
ReadConfFile "respM"
menucontrolloop_default="RM"
state="menuconfigureloop"
;;
	CM)
fname=$( cat ./conf/conf_contrM_fname.txt )
fname=$(dialog --title "Select contr Matrix" --stdout --fselect ${fname} $nbwlines $nbwcols)
echo "$fname" > ./conf/conf_contrM_fname.txt
ReadConfFile "contrM"
menucontrolloop_default="CM"
state="menuconfigureloop"
;;

	SetSVD00) mb="00"
  	UpdateModes ;;

	SetSVD01) mb="01"
  	UpdateModes ;;

	SetSVD02) mb="02"
  	UpdateModes ;;

	SetSVD03) mb="03"
  	UpdateModes ;;

	SetSVD04) mb="04"
  	UpdateModes ;;

	SetSVD05) mb="05"
  	UpdateModes ;;

	SetSVD06) mb="06"
  	UpdateModes ;;

	SetSVD07) mb="07"
  	UpdateModes ;;

	SetSVD08) mb="08"
  	UpdateModes ;;

	SetSVD09) mb="09"
  	UpdateModes ;;

	SetSVD10) mb="10"
  	UpdateModes ;;

	SetSVD11) mb="11"
  	UpdateModes ;;

	SetSVD12) mb="12"
  	UpdateModes ;;


	DMm00)
SelectConfFile "DMmodes00"
menucontrolloop_default="DMm00"
state="menuconfigureloop"
;;
	DMm01)
SelectConfFile "DMmodes01"
menucontrolloop_default="DMm01"
state="menuconfigureloop"
;;
	DMm02)
SelectConfFile "DMmodes02"
menucontrolloop_default="DMm02"
state="menuconfigureloop"
;;
	DMm03)
SelectConfFile "DMmodes03"
menucontrolloop_default="DMm03"
state="menuconfigureloop"
;;
	DMm04)
SelectConfFile "DMmodes04"
menucontrolloop_default="DMm04"
state="menuconfigureloop"
;;
	DMm05)
SelectConfFile "DMmodes05"
menucontrolloop_default="DMm05"
state="menuconfigureloop"
;;
	DMm06)
SelectConfFile "DMmodes06"
menucontrolloop_default="DMm06"
state="menuconfigureloop"
;;
	DMm07)
SelectConfFile "DMmodes07"
menucontrolloop_default="DMm07"
state="menuconfigureloop"
;;
	DMm08)
SelectConfFile "DMmodes08"
menucontrolloop_default="DMm08"
state="menuconfigureloop"
;;
	DMm09)
SelectConfFile "DMmodes09"
menucontrolloop_default="DMm09"
state="menuconfigureloop"
;;


	RM00)
SelectConfFile "respM00"
menucontrolloop_default="RM00"
state="menuconfigureloop"
;;
	RM01)
SelectConfFile "respM01"
menucontrolloop_default="RM01"
state="menuconfigureloop"
;;
	RM02)
SelectConfFile "respM02"
menucontrolloop_default="RM02"
state="menuconfigureloop"
;;
	RM03)
SelectConfFile "respM03"
menucontrolloop_default="RM03"
state="menuconfigureloop"
;;
	RM04)
SelectConfFile "respM04"
menucontrolloop_default="RM04"
state="menuconfigureloop"
;;
	RM05)
SelectConfFile "respM05"
menucontrolloop_default="RM05"
state="menuconfigureloop"
;;
	RM06)
SelectConfFile "respM06"
menucontrolloop_default="RM06"
state="menuconfigureloop"
;;
	RM07)
SelectConfFile "respM07"
menucontrolloop_default="RM07"
state="menuconfigureloop"
;;
	RM08)
SelectConfFile "respM08"
menucontrolloop_default="RM08"
state="menuconfigureloop"
;;
	RM09)
SelectConfFile "respM09"
menucontrolloop_default="RM09"
state="menuconfigureloop"
;;



	CM00)
SelectConfFile "contrM00"
menucontrolloop_default="CM00"
state="menuconfigureloop"
;;
	CM01)
SelectConfFile "contrM01"
menucontrolloop_default="CM01"
state="menuconfigureloop"
;;
	CM02)
SelectConfFile "contrM02"
menucontrolloop_default="CM02"
state="menuconfigureloop"
;;
	CM03)
SelectConfFile "contrM03"
menucontrolloop_default="CM03"
state="menuconfigureloop"
;;
	CM04)
SelectConfFile "contrM04"
menucontrolloop_default="CM04"
state="menuconfigureloop"
;;
	CM05)
SelectConfFile "contrM05"
menucontrolloop_default="CM05"
state="menuconfigureloop"
;;
	CM06)
SelectConfFile "contrM06"
menucontrolloop_default="CM06"
state="menuconfigureloop"
;;
	CM07)
SelectConfFile "contrM07"
menucontrolloop_default="CM07"
state="menuconfigureloop"
;;
	CM08)
SelectConfFile "contrM08"
menucontrolloop_default="CM08"
state="menuconfigureloop"
;;
	CM09)
SelectConfFile "contrM09"
menucontrolloop_default="CM09"
state="menuconfigureloop"
;;




	CMc00)
SelectConfFile "contrMc00"
menucontrolloop_default="CMc00"
state="menuconfigureloop"
;;
	CMc01)
SelectConfFile "contrMc01"
menucontrolloop_default="CMc01"
state="menuconfigureloop"
;;
	CMc02)
SelectConfFile "contrMc02"
menucontrolloop_default="CMc02"
state="menuconfigureloop"
;;
	CMc03)
SelectConfFile "contrMc03"
menucontrolloop_default="CMc03"
state="menuconfigureloop"
;;
	CMc04)
SelectConfFile "contrMc04"
menucontrolloop_default="CMc04"
state="menuconfigureloop"
;;
	CMc05)
SelectConfFile "contrMc05"
menucontrolloop_default="CMc05"
state="menuconfigureloop"
;;
	CMc06)
SelectConfFile "contrMc06"
menucontrolloop_default="CMc06"
state="menuconfigureloop"
;;
	CMc07)
SelectConfFile "contrMc07"
menucontrolloop_default="CMc07"
state="menuconfigureloop"
;;
	CMc08)
SelectConfFile "contrMc08"
menucontrolloop_default="CMc08"
state="menuconfigureloop"
;;
	CMc09)
SelectConfFile "contrMc09"
menucontrolloop_default="CMc09"
state="menuconfigureloop"
;;




	CMca00)
SelectConfFile "contrMcact00"
menucontrolloop_default="CMca00"
state="menuconfigureloop"
;;
	CMca01)
SelectConfFile "contrMcact01"
menucontrolloop_default="CMca01"
state="menuconfigureloop"
;;
	CMca02)
SelectConfFile "contrMcact02"
menucontrolloop_default="CMca02"
state="menuconfigureloop"
;;
	CMca03)
SelectConfFile "contrMcact03"
menucontrolloop_default="CMca03"
state="menuconfigureloop"
;;
	CMca04)
SelectConfFile "contrMcact04"
menucontrolloop_default="CMca04"
state="menuconfigureloop"
;;
	CMca05)
SelectConfFile "contrMcact05"
menucontrolloop_default="CMca05"
state="menuconfigureloop"
;;
	CMca06)
SelectConfFile "contrMcact06"
menucontrolloop_default="CMca06"
state="menuconfigureloop"
;;
	CMca07)
SelectConfFile "contrMcact07"
menucontrolloop_default="CMca07"
state="menuconfigureloop"
;;
	CMca08)
SelectConfFile "contrMcact08"
menucontrolloop_default="CMca08"
state="menuconfigureloop"
;;
	CMca09)
SelectConfFile "contrMcact09"
menucontrolloop_default="CMca09"
state="menuconfigureloop"
;;






	esac;;
   1) state="menutop";;   
   2) state="menuexit";;
   3)
case $actionmode in
	"Select")
actionmode="View"
;;
	"View")
actionmode="Select"
;;
esac
state="menuconfigureloop"
   ;;
   255) state="menuexit";;
esac


fi













# =====================================================
# ======== Make Modal Modes  ========================
# =====================================================

if [ $state = "menu_mkFModes" ]; then
stateok=1
menuname=" CONFIGURATION - Make Fourier based Modes"
rm tmp/*.fits
menuitems=()
menuitems+=( "00.2" "0.2 CPA (Tip/Tilt only)" )
menuitems+=( "00.3" "0.3 CPA (Tip/Tilt + Focus)" )
menuitems+=( "00.5" "0.5 CPA (Tip/Tilt + Focus + AST)" )
for i in `seq 20 40 240 `;
        do
str0=$( echo $i|awk '{printf("%04.1f", $1*0.1)}')
str1=$( echo $i|awk '{printf("%4.1f CPA", $1*0.1)}')
menuitems+=( "$str0" "$str1" )
done 



dialog --title "AO loop configuration" \
--ok-label "Select" \
--cancel-label "Main" \
--help-button --help-label "Exit" \
--default-item ${cpamax} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menuconfigureloop"
mkdir -p DMmodes
mkdir -p respM
mkdir -p contrM
mkdir -p contrMc
mkdir -p contrMcact

cpamax=$(cat $tempfile)
echo "$cpamax" > ./conf/conf_cpamax.txt
rm mkmodes.run
tmuxname="aol${LOOPNUMBER}mkmodes"
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "./aolmkmodes ${cpamax} -1 0.05" C-m
tmux send-keys -t aol${LOOPNUMBER}mkmodes "touch mkmodes.run0" C-m
waitforfile mkmodes.run0
rm mkmodes.run0
datestr=`date -u +%Y-%m-%d_%H:%M:%S`


tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodesall.fits DMmodes/DMmodes_${datestr}.fits" C-m
echo "DMmodes/DMmodes_${datestr}.fits" > ./conf/conf_DMmodes_fname.txt


tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodesWFSall.fits respM/respM_${datestr}.fits" C-m
echo "respM/respM_${datestr}.fits" > ./conf/conf_respM_fname.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmat.fits contrM/contrM_${datestr}.fits" C-m
echo "contrM/contrM_${datestr}.fits" > ./conf/conf_contrM_fname.txt


for i in `seq 0 99`;
do
i2=$(printf "%02d" "$i")
fname="mkmodestmp/fmodes_${i2}.fits"
if [ -e "$fname" ]; then
tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodes_${i2}.fits DMmodes/DMmodes${i2}_${datestr}.fits" C-m
echo "DMmodes/DMmodes${i2}_${datestr}.fits" > ./conf/conf_DMmodes${i2}_fname.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodesWFS_${i2}.fits respM/respM${i2}_${datestr}.fits" C-m
echo "respM/respM${i2}_${datestr}.fits" > ./conf/conf_respM${i2}_fname.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmat_${i2}.fits contrM/contrM${i2}_${datestr}.fits" C-m
echo "contrM/contrM${i2}_${datestr}.fits" > ./conf/conf_contrM${i2}_fname.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmatc_${i2}.fits contrMc/contrMc${i2}_${datestr}.fits" C-m
echo "contrMc/contrMc${i2}_${datestr}.fits" > ./conf/conf_contrMc${i2}_fname.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmatcact_${i2}.fits contrMcact/contrMcact${i2}_${datestr}.fits" C-m
echo "contrMcact/contrMcact${i2}_${datestr}.fits" > ./conf/conf_contrMcact${i2}_fname.txt
fi
done

tmux send-keys -t aol${LOOPNUMBER}mkmodes "touch mkmodes.run" C-m
waitforfile mkmodes.run


ReadConfFile "DMmodes"
ReadConfFile "respM"
ReadConfFile "contrM"

for i in `seq 0 99`;
do
i2=$(printf "%02d" "$i")
fname="mkmodestmp/fmodes_${i2}.fits"
if [ -e "$fname" ]; then
ReadConfFile "DMmodes${i2}"
ReadConfFile "respM${i2}"
ReadConfFile "contrM${i2}"
ReadConfFile "contrMc${i2}"
ReadConfFile "contrMcact${i2}"
fi
done

rm mkmodes.run
;; # button 1:
   1) state="menutop";;  
   2) state="menuexit";; 
   255) state="menuexit";;
esac

fi








# =====================================================
# ======== CONTROL AO LOOP ============================
# =====================================================
if [ $state = "menucontrolloop" ]; then
stateok=1
menuname="CONTROL LOOP"


loopgain=$(echo "$(cat ./conf/conf_loopgain.txt)")
loopmaxlim=$(echo "$(cat ./conf/conf_loopmaxlim.txt)")
loopmultcoeff=$(echo "$(cat ./conf/conf_loopmultcoeff.txt)")





stringcenter "LOOP CONFIGURATION"
menuitems=( "1 ->" "\Zb\Zr$string\Zn" )



GPUmode=$( cat ./conf/conf_GPU.txt )
if [[ -f "./conf/conf_GPU.txt" && ( "$GPUmode" = "0" || "$GPUmode" = "1" || "$GPUmode" = "2" || "$GPUmode" = "3" || "$GPUmode" = "4" || "$GPUmode" = "5" ) ]]; then
echo "OK"
else
echo "0" > ./conf/conf_GPU.txt
fi

echo "GPU mode = $GPUmode"

if [ "${GPUmode}" = "0" ];
then
menuitems+=( "GPUsel" "[ GPU is OFF  ]    CURRENTLY USING CPU(s)                -> Turn on GPU mode" )
else
menuitems+=( "GPUsel" "\Z5\Zr[Using $GPUmode GPUs ]\Zn    CURRENTLY USING GPU(S)" )
fi



CMmode=$( cat ./conf/conf_CMmode.txt )


if [[ "${GPUmode}" -ne "0" && "${CMmode}" = "1" ]]; then
GPUallmode=$( cat ./conf/conf_GPUall.txt )

if [[ -f "./conf/conf_GPUall.txt" && ( "$GPUallmode" = "1" || "$GPUallmode" = "0" ) ]]; then
echo "OK"
else
echo "0" > ./conf/conf_GPUall.txt
fi

echo "GPUsll mode = $GPUallmode"

if [ "${GPUallmode}" = "0" ];
then
menuitems+=( "GPUaon" "[GPUall is OFF]    CURRENTLY USING CPU(s) + GPU(s)       -> Turn on GPUall mode" )
else
menuitems+=( "GPUaoff" "\Z5\Zr[GPUall is  ON]\Zn    CURRENTLY USING GPU(S) FOR ALL        -> Turn off GPUall mode" )
fi
else
menuitems+=( " " " GPUall = 0" )
echo "0" > ./conf/conf_GPUall.txt
fi




if [[ -f "./conf/conf_CMmode.txt" && ( "$CMmode" = "1" || "$CMmode" = "0" ) ]]; then
echo "OK"
else
echo "0" > ./conf/conf_CMmode.txt
fi
echo "CM mode = $CMmode"

if [ "${CMmode}" = "0" ];
then
menuitems+=( "CMm1" "[CMmode is OFF]    CURRENTLY USING SEPARATE MATRICES     -> Switch to combined control matrix" )
else
menuitems+=( "CMm0" "\Z5\Zr[CMmode is  ON]\Zn    CURRENTLY USING COMBINED MATRIX       -> Switch to separate control matrices" )
fi




menuitems+=( " " " " )
stringcenter "LOOP PROCESSES"
menuitems+=( "2 ->" "\Zb\Zr$string\Zn" )

procONstat=$( cat ./status/stat_procON.txt )
if [[ -f "./status/stat_procON.txt" && ( "$procONstat" = " ON" || "$procONstat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_procON.txt
fi

if [ "${procONstat}" = "OFF" ];
then
menuitems+=( "S" "Start loop processes" )
else
menuitems+=( "K" "\Z1\ZrSTOP loop processes\Zn" )
fi




menuitems+=( " " " " )
stringcenter "LOOP CONTROL "
menuitems+=( "3 ->" "\Zb\Zr$string\Zn" )

if [ "$procONstat" = " ON" ]; then
loopONstat=$( cat ./status/stat_loopON.txt )
if [[ -f "./status/stat_loopON.txt" && ( "$loopONstat" = " ON" || "$loopONstat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_loopON.txt
fi

if [ "${loopONstat}" = "OFF" ];
then
menuitems+=( "Nloopon" "   START control loop" )
else
menuitems+=( "Floopoff" "\Z1\ZrSTOP control loop\Zn" )
fi
else
menuitems+=( " " "Processes need to be ON to turn loop ON/OFF ")
fi


menuitems+=( "Z" "LOOP Zero" )
menuitems+=( "t1" "step 1" )
menuitems+=( "t3" "step 3" )
menuitems+=( "t10" "step 10" )
menuitems+=( "t30" "step 30" )
menuitems+=( "t100" "step 100" )
menuitems+=( "t300" "step 300" )
menuitems+=( "t1000" "step 1000" )


menuitems+=( " " " " )
stringcenter "LOOP MONITORING "
menuitems+=( "4 ->" "\Zb\Zr$string\Zn" )

menuitems+=( "ctrmon" "  Enter tmux session aol${LOOPNUMBER}-ctr" )
menuitems+=( "runmon" "  Monitor tmux session aol${LOOPNUMBER}-run" )



menuitems+=( " " " " )
stringcenter "LOOP SETTING "
menuitems+=( "5 ->" "\Zb\Zr$string\Zn" )
menuitems+=( "g" "loop gain    =   ${loopgain}" )
menuitems+=( "m" "loop max lim =   ${loopmaxlim}" )
menuitems+=( "e" "mult coeff   =   ${loopmultcoeff}" )


menuitems+=( " " " " )
stringcenter "MODAL BLOCK GAINS"
menuitems+=( "6 ->" "\Zb\Zr$string\Zn" )


menuitems+=( "gball" "Set all block to same gain")

NBblocks=$( cat ./conf/conf_NBmodeblocks.txt )

for i in `seq 0 $(( $NBblocks - 1 ))`;
do
i2=$(printf "%02d" "$i")

NBblockmodes=$( cat ./conf/block${i2}_NBmodes.txt )
#menuitems+=( " " "\Zb\ZrBLOCK $i2 - ${NBblockmodes} modes\Zn")

fname="conf/conf_gainb${i2}.txt"
if [ -f "$fname" ]; then
gainb[10#${i2}]=$( cat ${fname} )
else
gainb[10#${i2}]="1.000"
fi
string=$( printf "% 3d" "${NBblockmodes}" )
menuitems+=( "gb${i2}" "[ ${gainb[10#${i2}]} ] Modal block ${i2} gain  ($string modes)" )
done


menuitems+=( " " " " )
stringcenter "ZERO POINT OFFSET"
menuitems+=( "7 ->" "\Zb\Zr$string\Zn" )
zploopONstat=$( cat ./status/stat_zploopON.txt )
if [[ -f "./status/stat_zploopON.txt" && ( "$zploopONstat" = " ON" || "$zploopONstat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_zploopON.txt
fi

if [ "${zploopONstat}" = "OFF" ];
then
menuitems+=( "zplon" "   START zero point offset loop" )
else
menuitems+=( "zploff" "\Z1\ZrSTOP zero point offset loop\Zn" )
fi






menuitems+=( "zpinj" "Inject Fourier mode to DM zero point" )
menuitems+=( "zpz" "Zero DM zero point" )


state="menutop"


dialog --colors --title "LOOP CONTROL  - LOOP ${LOOPNUMBER}" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menucontrolloop_default}" \
 --menu "$menuname" \
 $nbwlines $nbwcols  100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)
menucontrolloop_default="$choiceval"
state="menucontrolloop"
case $retval in
   0) # button
	case $choiceval in


# LOOP CONFIGURATION




	GPUsel)
exec 3>&1;
nbGPU=$(dialog --inputbox "Number of GPU(s) (0 = CPU mode)" 0 0 "$nbGPU" 2>&1 1>&3);
exec 3>&-;
echo "$nbGPU" > ./conf/conf_GPU.txt
;;


	GPUon)
echo "1" > ./conf/conf_GPU.txt
menucontrolloop_default="GPUoff"
;;
	GPUoff)
echo "0" > ./conf/conf_GPU.txt
menucontrolloop_default="GPUon"
;;


	GPUaon)
echo "1" > ./conf/conf_GPUall.txt
menucontrolloop_default="GPUaoff"
;;
	GPUaoff)
echo "0" > ./conf/conf_GPUall.txt
menucontrolloop_default="GPUaon"
;;


	CMm1)
echo "1" > ./conf/conf_CMmode.txt
menucontrolloop_default="CMm0"
;;
	CMm0)
echo "0" > ./conf/conf_CMmode.txt
menucontrolloop_default="CMm1"
;;





# LOOP PROCESSES
   	 S)
echo " ON" > ./status/stat_procON.txt
#rm aolctr-${LOOPNUMBER}-fifo

tmux new-session -d -s aol${LOOPNUMBER}-ctr
tmux send-keys -t aol${LOOPNUMBER}-ctr "./aolctr" C-m

#$xtermopt -e numactl --cpunodebind=$NUMAnode --membind=$NUMAnode ./aolctr &
sleep 1
tmux new-session -d -s aol${LOOPNUMBER}-run
tmux send-keys -t aol${LOOPNUMBER}-run "./aolrun" C-m
#xterm $xtermopt -e numactl --cpunodebind=$NUMAnode --membind=$NUMAnode ./aolrun &
sleep 1
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolon" C-m
sleep 2
tmux send-keys -t aol${LOOPNUMBER}-ctr "aoloff" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolloadconf ${LOOPNUMBER}" C-m
#for i in `seq 0 $(( $NBblocks - 1 ))`;
#do
#i2=$( printf "%02d" "$i" )
#tmux send-keys -t aol${LOOPNUMBER}-ctr "readshmim aol${LOOPNUMBER}_contrMc${i2}" C-m
#tmux send-keys -t aol${LOOPNUMBER}-ctr "readshmim aol${LOOPNUMBER}_contrMcact${i2}" C-m
#done
#tmux send-keys -t aol${LOOPNUMBER}-ctr "readshmim aol${LOOPNUMBER}_contrMc" C-m
#tmux send-keys -t aol${LOOPNUMBER}-ctr "readshmim aol${LOOPNUMBER}_contrMcact" C-m
#tmux send-keys -t aol${LOOPNUMBER}-ctr "readshmim aol${LOOPNUMBER}_gainb" C-m
menucontrolloop_default="K"
;; 
   	 K)
echo "OFF" > ./status/stat_procON.txt
tmux send-keys -t aol${LOOPNUMBER}-ctr "aoloff" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolkill" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "exit" C-m
pkill -9 aolrun-${LOOPNUMBER}
menucontrolloop_default="S"
;;
   	 Nloopon)
echo " ON" > ./status/stat_loopON.txt
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolon" C-m
#echo "aolon" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="Floopoff"
;; 
   	 Floopoff)
echo "OFF" > ./status/stat_loopON.txt
tmux send-keys -t aol${LOOPNUMBER}-ctr "aoloff" C-m
#echo "aoloff" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="Nloopon"
;; 
  	 Z)
tmux send-keys -t aol${LOOPNUMBER}-ctr "imzero aol${LOOPNUMBER}_DMmode_cmd" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "readshmim aol${LOOPNUMBER}_dmC" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "imzero aol${LOOPNUMBER}_dmC" C-m
#echo "imzero aol${LOOPNUMBER}_DMmode_cmd" >> aolctr-${LOOPNUMBER}-fifo
#echo "readshmim aol${LOOPNUMBER}_dmC" >> aolctr-${LOOPNUMBER}-fifo
#echo "imzero aol${LOOPNUMBER}_dmC" >> aolctr-${LOOPNUMBER}-fifo

;;
   	 t1) echo "aolstep 1" >> aolctr-${LOOPNUMBER}-fifo ;;   
   	 t3) echo "aolstep 3" >> aolctr-${LOOPNUMBER}-fifo ;;   
   	 t10) echo "aolstep 10" >> aolctr-${LOOPNUMBER}-fifo ;;   
   	 t30) echo "aolstep 30" >> aolctr-${LOOPNUMBER}-fifo ;;   
   	 t100) echo "aolstep 100" >> aolctr-${LOOPNUMBER}-fifo ;;   
   	 t300) echo "aolstep 300" >> aolctr-${LOOPNUMBER}-fifo ;;   
   	 t1000) echo "aolstep 1000" >> aolctr-${LOOPNUMBER}-fifo ;;   

	ctrmon) tmux a -t aol${LOOPNUMBER}-ctr ;;
	runmon) tmux a -t aol${LOOPNUMBER}-run ;;

  	 g)
  	 value=${loopgain}
	 SelectValue01 100 1200 50
  	 loopgain=${value}
  	 echo "$loopgain" > ./conf/conf_loopgain.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetgain ${loopgain}" C-m
  	 ;; 
   	 m)
   	 value=${loopmaxlim}
   	SelectValue01 0 1200 50
 	loopmaxlim=${value}
 	echo "$loopmaxlim" > ./conf/conf_loopmaxlim.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmaxlim ${loopmaxlim}" C-m
   	 ;;  
   	 e) 
   	 value=${loopmultcoeff}
   	SelectValue01 900 1001 10
 	loopmultcoeff=${value}
 	echo "$loopmultcoeff" > ./conf/conf_loopmultcoeff.txt
	tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmult ${loopmultcoeff}" C-m
     	 ;;  

	 gball)
	 value=${gainallb}
	 SelectValue01 100 1200 50 
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	do
	 gi=$(printf "%02d" "$i")
	gainb[10#${gi}]=${value}
	echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
	tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]}" C-m
	done
	 ;;
	 
  	 gb00)
  	 gi="00"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${10#gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]}" C-m
  	 ;; 

  	 gb01)
  	 gi="01"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[${gi}]}" C-m
  	 ;; 

  	 gb02)
  	 gi="02"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[${gi}]}" C-m
  	 ;; 

  	 gb03)
  	 gi="03"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[${gi}]}" C-m
  	 ;; 

  	 gb04)
  	 gi="04"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[${gi}]}" C-m
  	 ;; 

  	 gb05)
  	 gi="05"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]}" C-m
  	 ;; 

  	 gb06)
  	 gi="06"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]}" C-m
  	 ;; 

  	 gb07)
  	 gi="07"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[10#${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]}" C-m
  	 ;; 

  	 gb08)
  	 gi="08"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[10#${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]}" C-m
  	 ;; 

  	 gb09)
  	 gi="09"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[10#${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]}" C-m
  	 ;; 

  	 gb10)
  	 gi="10"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]}" C-m
  	 ;; 

  	 gb11)
  	 gi="11"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]}" C-m
  	 ;; 

  	 gb12)
  	 gi="12"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]}" C-m
  	 ;; 

  	 gb13)
  	 gi="13"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]}" C-m
  	 ;; 

  	 gb14)
  	 gi="14"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]}" C-m
  	 ;; 





	zplon)
echo " ON" > ./status/stat_zploopON.txt
tmuxname="aol${LOOPNUMBER}zploop"
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}zploop" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfsref" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfsref0" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_zrespM" C-m
tmux send-keys -t $tmuxname "listim" C-m
tmux send-keys -t $tmuxname "aolzpwfsloop aol${LOOPNUMBER}_dmZP aol${LOOPNUMBER}_zrespM aol${LOOPNUMBER}_wfsref0 aol${LOOPNUMBER}_wfsref" C-m
menucontrolloop_default="zploff"
;; 
	zploff)
echo "OFF" > ./status/stat_zploopON.txt
tmuxname="aol${LOOPNUMBER}zploop"
tmux kill-session -t $tmuxname 
menucontrolloop_default="zplon"
	;;
	zpinj)
ampl="0.03"
modenb="00030"
tmuxname="aol${LOOPNUMBER}zpinject"
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}zpin" C-m
tmux send-keys -t $tmuxname "loadfits \"mkmodestmp/fmodes0all.fits\" modec" C-m
tmux send-keys -t $tmuxname "breakcube modec" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP" C-m
tmux send-keys -t $tmuxname "dmo=$ampl*modec_$modenb" C-m
tmux send-keys -t $tmuxname "cp dmo aol${LOOPNUMBER}_dmZP" C-m
tmux send-keys -t $tmuxname "exit" C-m
	;;


	zpz)
tmuxname="aol${LOOPNUMBER}zpzero"
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "$execname -n $tmuxname" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP" C-m
tmux send-keys -t $tmuxname "imzero aol${LOOPNUMBER}_dmZP" C-m
tmux send-keys -t $tmuxname "exit" C-m
	;;
esac
;;
   1) state="menutop";;   
   2) state="menuexit";;
   255) state="menuexit";;
esac


fi































# =====================================================
# ======== TEST MODE ==================================
# =====================================================
if [ $state = "menutestmode" ]; then
stateok=1

testloopstatus="OFF"
testdmturbstatus="OFF"

file="./status/testloopstatus.txt"
if [ -a $file ]
	then
	testloopstatus=$(echo "$(cat $file)")
	else
	testloopstatus="OFF"
fi

file="./status/testdmturbstatus.txt"
if [ -a $file ]
	then
	testdmturbstatus=$(echo "$(cat $file)")
	else
	testdmturbstatus="OFF"
fi


ReadTestDMsize

ReadDMturbampl
ReadDMturbws
ReadDMturbtint

ReadTMsync    # sync mode
ReadTMdelayus # delay [us]

menuname="TEST MODE [${testloopstatus}]"

stringcenter "HELP"
menuitems=( "H" "\Zb\Zr$string\Zn" )

menuitems+=( "-" " " )

stringcenter "SETTINGS"
menuitems+=( "1 ->" "\Zb\Zr$string\Zn" )
menuitems+=( "dms" "[${testdmsize}] test mode DM size" )
menuitems+=( "initDM" "init DM" )
menuitems+=( "-" " " )


stringcenter "TURBULENCE      (tmux aosim${LOOPNUMBER}dmturb)"
menuitems+=( "2 ->" "\Zb\Zr$string\Zn" )


if [ "${testdmturbstatus}" = "OFF" ];
then
menuitems+=( "DMton" "             START simulated turbulence" )
menuitems+=( "-" " ")
menuitems+=( "-" " ")
else
menuitems+=( "DMtoff" "\Z1\Zr             STOP simulated turbulence                      \Zn" )
menuitems+=( "tvdmt" "view tmux session aolsim${LOOPNUMBER}turb (type CTRL-B + D to exit)")
menuitems+=( "tvdmtc" "view tmux session aolsim${LOOPNUMBER}turbctrl (type CTRL-B + D to exit)")
fi


menuitems+=( "DMtamp" "DM turbulence amplitude  = ${dmturbampl} um" )
menuitems+=( "DMtws" "DM turbulence wind speed = ${dmturbws} m/s" )
menuitems+=( "DMttint" "DM turbulence interval  = ${dmturbtint} us" )

menuitems+=( "dm1v" "View DM chan 1 (turbulence) stream" )
menuitems+=( "dm1m" "Monitor DM chan 1 (turbulence) stream" )

menuitems+=( "-" " " )
stringcenter "START/STOP     (tmux ao${LOOPNUMBER}test)"
menuitems+=( "3 ->" "\Zb\Zr$string\Zn" )


#if [ "${testdmturbstatus}" = "OFF" ];
#then
#menuitems+=( "-" " Need turbulence scrren to be running to start")
#menuitems+=( "-" " ")
#else
if [ "${testloopstatus}" = "OFF" ];
then
menuitems+=( "Start" "             START simulated WFS               " )
menuitems+=( "-" " ")
else
menuitems+=( "Stop" "\Z1\Zr             STOP simulated WFS                             \Zn" )
menuitems+=( "tv" "view tmux session aol${LOOPNUMBER}test (type CTRL-B + D to exit)")
fi
#fi
menuitems+=( "TMsync" "[${AOsystsimsync}] WFS sync mode")
menuitems+=( "TMdelay" "[${AOsystsimWFSdelayus} us] WFS delay")


menuitems+=( "-" " " )
stringcenter "MONITORING"
menuitems+=( "4 ->" "\Zb\Zr$string\Zn" )
menuitems+=( "psfv" "PSF view")




dialog --colors --title "TEST MODE  - LOOP ${LOOPNUMBER}" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menutestmode_default}" \
 --menu "$menuname" \
 $nbwlines $nbwcols  100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)
state="menutestmode"
menutestmode_default="$choiceval"
case $retval in
   0) # button
	case $choiceval in
   	 H)
dialog --title "Help" --msgbox 'Simulation mode\n
\n
Creates shared memory arrays: \n
   aosimdmctrl   : DM control map\n
   WFturb        : Wavefront phase turbulence (512x512)\n
   aosimpsfout   : output PSF (intensity)\n
   aosimwfsim    : output WFS image (intensity)\n
\n
Recomputes aosimpsfout when either aosimdmctrl or WFturb changes' 40 80
;;
	dms)
exec 3>&1;testdmsize=$(dialog --inputbox "test mode DM size" 0 0 "$testdmsize" 2>&1 1>&3);
exec 3>&-;

echo "$testdmsize" > ./conf/conf_testdmsize.txt
initDM
;;
	initDM)
initDM
;;
	tv)
tmux a -t aol${LOOPNUMBER}test
;;
	DMton)
TestStartTurb
menutestmode_default="DMtoff"
;;
	DMtoff)
TestStopTurb
menutestmode_default="DMton"
;;
	tvdmt)
tmux a -t aosim${LOOPNUMBER}dmturb
;;
	tvdmtc)
tmux a -t aosim${LOOPNUMBER}dmturbctrl
;;
	DMtamp)
exec 3>&1;dmturbampl=$(dialog --inputbox "DM turbulence amplitude [um]" 0 0 "$dmturbampl" 2>&1 1>&3);
exec 3>&-;
echo "$dmturbampl" > ./conf/conf_dmturbampl.txt
;;
	DMtws)
exec 3>&1;dmturbws=$(dialog --inputbox "DM turbulence wind speed [m/s]" 0 0 "$dmturbws" 2>&1 1>&3);
exec 3>&-;
echo "$dmturbws" > ./conf/conf_dmturbws.txt
;;
	DMttint)
exec 3>&1;dmturbtint=$(dialog --inputbox "DM turbulence interval [us]" 0 0 "$dmturbtint" 2>&1 1>&3);
exec 3>&-;
echo "$dmturbtint" > ./conf/conf_dmturbtint.txt
;;


	dm1v)
$shmimviewexec /tmp/aosimdmctrl1.im.shm 4 &> /dev/null &
menutestmode_default="dm1v"
;;   
	dm1m)
$shmimmonexec aosimdmctrl1
menutestmode_default="dm1m"
;;   
   	 Start)
#if [ $testloopstatus = "OFF" ]; then
TestModeStart
#fi
menutestmode_default="Stop"
;;   
   	 Stop) 
#if [ $testloopstatus = " ON" ]; then
TestModeStop
#fi
menutestmode_default="Start"
;;  
	TMsync)
exec 3>&1;AOsystsimsync=$(dialog --inputbox "Sync mode" 0 0 "$AOsystsimsync" 2>&1 1>&3);
exec 3>&-;
echo "$AOsystsimsync" > ./conf/conf_AOsystsimsync.txt
menutestmode_default="TMsync"
;;
	TMdelay)
exec 3>&1;AOsystsimWFSdelayus=$(dialog --inputbox "WFS cam delay [us]" 0 0 "$AOsystsimWFSdelayus" 2>&1 1>&3);
exec 3>&-;
echo "$AOsystsimWFSdelayus" > ./conf/conf_AOsystsimWFSdelayus.txt
menutestmode_default="TMdelay"
;;
   	 psfv)
shmimview /tmp/aosimpsfout.im.shm > /dev/null &
#menutestmode_default="psfv"
;;
	esac;;
   1) state="menutop";;   
  2) state="menuexit";;
   255) state="menuexit";;
esac

fi










# =====================================================
# ======== VIEW STREAMS  ============================
# =====================================================

if [ $state = "menuview" ]; then
stateok=1



menuname="VIEW MODE"


stringcenter "HELP"
menuitems=( "H" "\Zb\Zr\Z4$string\Zn" )
menuitems+=( " " " " )


stringcenter "CALIBRATION"
menuitems+=( "1 ->" "\Zb\Zr$string\Zn" )
menuitems+=( "wfsref0" "WFS reference (uncorrected)" )
menuitems+=( "wfsref" "WFS reference includes zero point offset" )
menuitems+=( "DMmodes" "DM modes" )
menuitems+=( "respM" "modal response matrix" )
menuitems+=( "contrM" "modal control matrix" )
menuitems+=( " " " " )


stringcenter "WFS input -> signal"
menuitems+=( "2 ->" "\Zb\Zr$string\Zn" )
menuitems+=( "wfsim" "Wavefront sensor image stream  " )
menuitems+=( "imWFS0" "WFS image, dark subtracted" )
menuitems+=( "imWFS1" "WFS image, dark subtracted, normalized" )
menuitems+=( "imWFS2" "WFS signal (WFS1-reference)" )
menuitems+=( " " " " )

stringcenter "DM"
menuitems+=( "3 ->" "\Zb\Zr$string\Zn" )
menuitems+=( "dmC" "DM control channel" )
menuitems+=( "dmdisp" "DM total displacement" )



dialog --colors --title "VIEW MODE  - LOOP ${LOOPNUMBER}" \
--ok-label " Monitor " \
--extra-button --extra-label "view" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menutestmode_default}" \
 --menu "$menuname" \
 $nbwlines $nbwcols 100 "${menuitems[@]}"  2> $tempfile


retval=$?
choiceval=$(cat $tempfile)
menutestmode_default="$choiceval"
state="menuview"
case $retval in
   0) # Monitor
	case $choiceval in
   	 H)
dialog --colors --title "Help" --msgbox 'View shared memory streams / monitor loop\n
\n
\Z4\Zbaol#_dmC\Zn : DM control channel\n
             sem0post : ANY input\n
             sem0wait : DM comb\n
' $nbwlines $nbwcols 
menutestmode_default="H"
;;
  	 wfsref0)shmimmon aol${LOOPNUMBER}_wfsref0;;
  	 wfsref)shmimmon aol${LOOPNUMBER}_wfsref;;
	DMmodes)shmimmon aol${LOOPNUMBER}_DMmodes;;
	respM)shmimmon aol${LOOPNUMBER}_respM;;
	contrM)shmimmon aol${LOOPNUMBER}_contrM;;
   	 wfsim)shmimmon aol${LOOPNUMBER}_wfsim;;   
   	 imWFS0)shmimmon aol${LOOPNUMBER}_imWFS0;;   
   	 imWFS1)shmimmon aol${LOOPNUMBER}_imWFS1;;   
   	 imWFS2)shmimmon aol${LOOPNUMBER}_imWFS2;;   
   	 dmC)shmimmon aol${LOOPNUMBER}_dmC;;   
   	 dmdisp)shmimmon aol${LOOPNUMBER}_dmdisp;;   
	esac
;;
  3) # View
	case $choiceval in
     	 wfsref0)shmimview /tmp/aol${LOOPNUMBER}_wfsref0.im.shm > /dev/null &;;
     	 wfsref)shmimview /tmp/aol${LOOPNUMBER}_wfsref.im.shm > /dev/null &;;
	DMmodes)shmimview /tmp/aol${LOOPNUMBER}_DMmodes.im.shm > /dev/null &;;	
     	 respM)shmimview /tmp/aol${LOOPNUMBER}_respM.im.shm > /dev/null &;;
     	 contrM)shmimview /tmp/aol${LOOPNUMBER}_contrMM.im.shm > /dev/null &;;
   	 wfsim)shmimview /tmp/aol${LOOPNUMBER}_wfsim.im.shm > /dev/null &;;
   	 imWFS0)shmimview /tmp/aol${LOOPNUMBER}_imWFS0.im.shm > /dev/null &;;
   	 imWFS1)shmimview /tmp/aol${LOOPNUMBER}_imWFS1.im.shm > /dev/null &;;
   	 imWFS2)shmimview /tmp/aol${LOOPNUMBER}_imWFS2.im.shm > /dev/null &;;
   	 dmC)shmimview /tmp/aol${LOOPNUMBER}_dmC.im.shm 8 > /dev/null &;;
   	 dmdisp)shmimview /tmp/aol${LOOPNUMBER}_dmdisp.im.shm 8 > /dev/null &;;

esac
;; 
   1) state="menutop";;   
  2) state="menuexit";;
   255) state="menuexit";;
esac

fi
























# =====================================================
# ======== RECORD/ANALYZE  ============================
# =====================================================

if [ $state = "menurecord" ]; then
stateok=1



menuname="RECORD / ANALYZE"


stringcenter "HELP"
menuitems=( "H" "\Zb\Zr\Z4$string\Zn" )
menuitems+=( " " " " )


stringcenter "RECORD"
menuitems+=( "1 ->" "\Zb\Zr$string\Zn" )
menuitems+=( "rec3" "Record / analyze   1000 WFS frames" )
menuitems+=( "rec4" "Record / analyze  10000 WFS frames" )


dialog --colors --title "RECORD and ANALYZE  - LOOP ${LOOPNUMBER}" --ok-label " Select " --cancel-label "Top" --help-button --help-label "Exit" --default-item "${menurecord_default}" --menu "$menuname"  $nbwlines $nbwcols 100 "${menuitems[@]}"  2> $tempfile



retval=$?
choiceval=$(cat $tempfile)
menurecord_default="$choiceval"
state="menurecord"
case $retval in
   0) # Monitor
	case $choiceval in
   	rec3)
   	mkdir -p ./rec
  	tmuxname="aol${LOOPNUMBER}-ctr"
	rm ./rec/imWFS0rec.fits
  	tmux send-keys -t $tmuxname "rm imWFS0rec" C-m
	tmux send-keys -t $tmuxname "imgstreamrec aol${LOOPNUMBER}_imWFS0 1000 imWFS0rec " C-m	
	tmux send-keys -t $tmuxname "savefits imWFS0rec \"rec/imWFS0rec.fits\"" C-m
;;
  	rec4)
	mkdir -p ./rec
  	tmuxname="aol${LOOPNUMBER}-ctr"
	rm ./rec/imWFS0rec.fits
  	tmux send-keys -t $tmuxname "rm imWFS0rec" C-m
	tmux send-keys -t $tmuxname "imgstreamrec aol${LOOPNUMBER}_imWFS0 10000 imWFS0rec " C-m
	tmux send-keys -t $tmuxname "savefits imWFS0rec \"rec/imWFS0rec.fits\"" C-m
;;
esac
;; 
   1) state="menutop";;   
  2) state="menuexit";;
   255) state="menuexit";;
esac

fi







































if [ $state = "menuexit" ]; then
stateok=1
echo "exit"
exit
fi



if [ $stateok = 0 ]; then
echo "state \"$state\" not recognized ... exit"
exit
fi

done

















