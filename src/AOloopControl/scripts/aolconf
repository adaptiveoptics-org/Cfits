#!/bin/bash

# ensures that subscripts are called from the main script
aolconfFLAG="1"

NBARGS=0

if [ -f LOOPNAME ]; then
LOOPNAME=$( cat LOOPNAME )
else
LOOPNAME="null"
fi

if [ -f LOOPNUMBER ]; then
LOOPNUMBER=$( cat LOOPNUMBER )
else
LOOPNUMBER="7"
fi




# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`
#echo "pname = $pname"




printHELP_confFILES ()
{
echo "------------------------------------------------------------------------"
echo -e "\033[1m               CONFIGURATION FILES \033[0m"
echo "------------------------------------------------------------------------"
echo "	CONFNUMBER                    loop number (long)"
echo "	CONFNAME                      loop name"
echo "  conf/conf_dmC_name.txt        DM control"
echo "------------------------------------------------------------------------"
}





printHELP ()
{
echo
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname :  AO loop CONTROL - main script $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo " "
echo " $(tput bold)LOOPNUMBER:$(tput sgr0)  $LOOPNUMBER"
echo " $(tput bold)LOOPNAME:$(tput sgr0)    $LOOPNAME"
echo " "
echo " "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [options]"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "  Performs task and exit: "
echo "   --help -h             print (h)elp and exit"
echo "   --help1               print 1 line summary"
echo "   -H  <string>         (H)elp category"
echo "                 cf     list configuration files (incomplete)"    
echo "   -l <exec>            log executable"  
echo "   -C                   run (C)PU config: execute ./aocscripts/cpuconfig_${LOOPNAME}"
echo "   -c                   (c)lear all settings"
echo "  Runs top level script:"
echo "   -L <long>            (L)oop number"
echo "   -N <string>          loop (N)ame. Run ./aosetup/aosetup_<string> if available"
echo "   -x                   load/initalize and e(x)it"
echo "   -e <exec>            specify executable name (default: $execname)"
echo "   -n                   do (n)ot load configuration on startup"
echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
	printf "%20s       AO loop CONTROL - main script\n" "$0" 
}


EXITSTATUS=0


function cmdexists()
{
  command -v "$1" >/dev/null 2>&1
}


function checkCommand {
if cmdexists $1; then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."; EXITSTATUS=1;
fi

}





# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done



LOADMEM=1
LOOPNAME_file="LOOPNAME"
LOOPNUMBER_file="LOOPNUMBER"
CPUconfRT="1"  # use CPU sets
LOADexit="0"

execname="./AOloopControl"

mkdir -p logdir

# runproc files indicating which processes are running
mkdir -p runproc

### Start getopts code ###
while getopts :hH:l:CcL:N:xe:n FLAG; do
  case $FLAG in
    h)  #show help
	if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    H) # detailed help
    if [ "$OPTARG" == "cf" ]; then
    printHELP_confFILES
    exit
    fi
    echo "ERROR: choice $OPTARG not recognized"
    exit
    ;;
    l)
    echo "Option not yet supported"
    exit
    ;;
    C) # configure CPU
    echo "Configure CPU"
    ./aocscripts/cpuconfig_${LOOPNAME}
    exit
    ;;    
    c) # clear
    echo "Clearing all settings"
    rm LOOPNUMBER 2> /dev/null
    rm LOOPNAME 2> /dev/null
    rm conf/* 2> /dev/null
    rmdir conf 2> /dev/null
    rm status/* 2> /dev/null
    rmdir status 2> /dev/null
    rm tmp/* 2> /dev/null
    rmdir tmp 2> /dev/null
    rm aolconf.log 2> /dev/null
    exit
    ;;    
    L)  #  set loop number
      LOOPNUMBER=$OPTARG
      echo "LOOP NUMBER = $LOOPNUMBER"
      echo "$LOOPNUMBER" > $LOOPNUMBER_file
      aoconflog "setting LOOPNUMBER to $LOOPNUMBER"
      ;;
    N) # set loop name
    LOOPNAME=$OPTARG
    echo "LOOP NAME = $LOOPNAME"
    echo "$LOOPNAME" > $LOOPNAME_file
    aoconflog "setting LOOPNAME to $LOOPNAME"
	./aosetup/aosetup_${LOOPNAME}
    ;;
	x)
	LOADexit="1"
	;;
    e) # set executable
    execnameFile=$OPTARG
    ln -s $execnameFile ./AOloopControl
    ;;
    n) # do not load configuration upon startup
    LOADMEM=0
    ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1)) 

### End getopts code ###







if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo -e \\n"Illegal number of parameters ($NBARGS params required, $# entered)"\\n
fi
printHELP
        exit
fi









if [ $EXITSTATUS -eq 1 ]; then
echo ""
echo "$(tput setaf 1)$(tput bold) REQUIRED FILES, COMMANDS NOT FOUND: EXITING $(tput sgr0)"
echo ""
exit
else
echo ""
fi








# help, warning, error
. ./aolconfscripts/aolconf_funcs


# ======================= LOGGING =================================
# NOTE: logdir can be symbolic link set by user

# internal log - logs EVERYTHING
function aoconflog {
./aolconfscripts/aollog "$LOOPNAME" "$@"
}

# external log, use for less verbose log
function aoconflogext {
./aolconfscripts/aollog -e "$LOOPNAME" "$@"
}





aoconflog "STARTING NEW aolconf SESSION"




# ====================== USER EDITS THIS SECTION =======================


# default parameters
CPUconfRT="1" # no CPU real-time configuration

DMindex=0




# CUSTOM USER-PROVIDED SCRIPTS:
if [ -f "AOloopsetup.bash" ]; then
. ./AOloopsetup.bash # executed here
else
printWARNING "File AOloopsetup.bash does not exist"
fi






# execute CPU configuration script if it exists
if [ -f "./aocscripts/cpuconfig_${LOOPNAME}" ]; then
if [ ! -f "cpuconfigOK" ]; then
. ./aocscripts/cpuconfig_${LOOPNAME}
fi
fi




shmimviewexec="shmimview"
shmimmonexec="shmimmon"


# ======================== END OF USER EDIT SECTION =====================



. ./aolconfscripts/aolconf_readconf






















# ===================== TEST MODE ========================
dmxsize=32
dmysize=32





# =================== some initial setup =======================


LINES=$( tput lines )
COLUMNS=$( tput cols )
let " nbwlines = $LINES - 10 "
let " nbwcols = $COLUMNS - 10 "
#echo "$COLUMNS -> $nbwcols"
actionmode="Select"

#confnbfile="./conf/conf_CONFNUMBER.txt"
mkdir -p conf
mkdir -p status
mkdir -p tmp

cp LOOPNAME ./conf/conf_LOOPNAME.txt



# CONFSELECTED (conf numnber)
#if [ ! -f $confnbfile ]
#then
#	echo "creating configuration number"
#	echo "$CONFSELECTED_default" > ./conf/conf_CONFNUMBER.txt
#else
#	CONFSELECTED=$(cat $confnbfile)
#	echo "selected configuration = $CONFSELECTED"
#fi




tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15










# ================ FREQUENTLY USED FUNCTIONS ===================

echo "FUNCTIONS..."

. ./aolconfscripts/aolconf_logfuncs

. ./aolconfscripts/aolconf_DMfuncs

. ./aolconfscripts/aolconf_configureloop_funcs
function_configureloop_readparams

. ./aolconfscripts/aolconf_controlmatrix_funcs
function_controlmatrix_readparams

. ./aolconfscripts/aolconf_controlloop_funcs
function_controlloop_readparams







function TestModeStart {

aoconflog "TEST MODE START"


mkdir -p testconf
echo "# THIS SCRIPT IS GENERATED BY aolconf" >  script_aol${LOOPNUMBER}test 
echo "$execname -n aol${LOOPNUMBER}test << EOF" >> script_aol${LOOPNUMBER}test 
if [ "$CPUconfRT" -eq "1" ]; then
echo "csetpmove aol0RT" >> script_aol${LOOPNUMBER}test 
fi
echo "AOsystsim ${AOsystsimsync} ${DMindex} ${AOsystsimWFSdelayus}" >> script_aol${LOOPNUMBER}test 
chmod +x script_aol${LOOPNUMBER}test 
sleep 0.2
tmux new-session -d -s aol${LOOPNUMBER}test
sleep 0.2
echo " ON" > ./status/testloopstatus.txt
tmux send-keys -t aol${LOOPNUMBER}test "./script_aol${LOOPNUMBER}test" C-m

echo "aosimwfsim" > ./conf/conf_wfsim_name.txt
#echo "dhfield" > ./conf/conf_wfsim_name.txt
Readwfsimcamname

echo "0.1" > ./conf/conf_loopgain.txt
ReadLoopGain

echo "1.0" > ./conf/conf_loopmaxlim.txt
ReadLoopMaxLim 

echo "0.99" > ./conf/conf_loopmultcoeff.txt
ReadLoopMultCoeff
}


function TestModeStop {
aoconflog "TEST MODE STOP"
pkill aol${LOOPNUMBER}test
echo "OFF" > ./status/testloopstatus.txt
}




. ./aolconfscripts/aolconf_DMturb





# =================== READ CONFIGURATION====================================


function AOloadMem {

# Custom hardware I/O functions [shared memory]

echo "dm${DMindex}disp03" > ./conf/streamlink_dmC.name.txt # DM control channel
./aolfuncs/aolfunc_StreamLink dmC

echo "dm${DMindex}disp00" > ./conf/streamlink_dmO.name.txt # DM offset channel (flat) 
./aolfuncs/aolfunc_StreamLink dmO

echo "dm${DMindex}disp04" > ./conf/streamlink_dmZP0_name.txt
./aolfuncs/aolfunc_StreamLink dmZP0

echo "dm${DMindex}disp05" > ./conf/streamlink_dmZP1.name.txt
./aolfuncs/aolfunc_StreamLink dmZP1

echo "dm${DMindex}disp06" > ./conf/streamlink_dmZP2.name.txt
./aolfuncs/aolfunc_StreamLink dmZP2

echo "dm${DMindex}disp07" > ./conf/streamlink_dmZP3.name.txt
./aolfuncs/aolfunc_StreamLink dmZP3

echo "dm${DMindex}disp08" > ./conf/streamlink_dmZP4.name.txt
./aolfuncs/aolfunc_StreamLink dmZP4

echo "dm${DMindex}disp09" > ./conf/streamlink_dmZP5.name.txt
./aolfuncs/aolfunc_StreamLink dmZP5

echo "dm${DMindex}disp10" > ./conf/streamlink_dmZP6.name.txt
./aolfuncs/aolfunc_StreamLink dmZP6

echo "dm${DMindex}disp11" > ./conf/streamlink_dmZP7.name.txt
./aolfuncs/aolfunc_StreamLink dmZP7

echo "dm${DMindex}disp" > ./conf/streamlink_dmdisp.name.txt # total DM displacement channel
./aolfuncs/aolfunc_StreamLink dmdisp

echo "dm${DMindex}disp02" > ./conf/streamlink_dmRM.name.txt # DM actuation channel for RM matrix
./aolfuncs/aolfunc_StreamLink dmRM

./aolfuncs/aolfunc_StreamLink wfsim  # WFS image




# LOAD SYSTEM CALIBRATION (./conf/ -> shared mem)

# ReadConfFile in aolconf_readconf


ReadConfFile "wfsdark"
getshmimsize aol${LOOPNUMBER}_wfsdark

ReadConfFile "wfsmap"
getshmimsize aol${LOOPNUMBER}_wfsmask


ReadConfFile "wfsmask"
getshmimsize aol${LOOPNUMBER}_wfsmask

ReadConfFile "dmmap"
getshmimsize aol${LOOPNUMBER}_dmmap

ReadConfFile "dmmaskRM"
getshmimsize aol${LOOPNUMBER}_dmmaskRM

ReadConfFile "dmslaved"
getshmimsize aol${LOOPNUMBER}_dmslaved

ReadConfFile "dmmask"
getshmimsize aol${LOOPNUMBER}_dmmask

ReadConfFile "wfsref0"
getshmimsize aol${LOOPNUMBER}_wfsref0



ReadConfFile "zrespM"
getshmimsize aol${LOOPNUMBER}_zrespM


ReadConfFile "LODMmodes"
getshmimsize aol${LOOPNUMBER}_LODMmodes

ReadConfFile "LOrespM"
getshmimsize aol${LOOPNUMBER}_LOrespM




# System response and control
ReadCPAmax

ReadConfFile "DMmodes"
getshmimsize aol${LOOPNUMBER}_DMmodes

ReadConfFile "respM"
getshmimsize aol${LOOPNUMBER}_respM

ReadConfFile "contrM"
getshmimsize aol${LOOPNUMBER}_contrM


if [ "$1" -eq 1 ];then
NBblocks=$( cat ./conf/conf_NBmodeblocks.txt )
NBmodes=$( cat ./conf/conf_NBmodes.txt )
for i in `seq 0 $(( $NBblocks - 1 ))`;
do
i2=$(printf "%02d" "$i")

ReadConfFile "DMmodes${i2}"
getshmimsize aol${LOOPNUMBER}_DMmodes${i2}

ReadConfFile "respM${i2}"
getshmimsize aol${LOOPNUMBER}_respM${i2}

ReadConfFile "contrM${i2}"
getshmimsize aol${LOOPNUMBER}_contrM${i2}

ReadConfFile "contrMc${i2}"
getshmimsize aol${LOOPNUMBER}_contrMc${i2}

ReadConfFile "contrMcact${i2}_00"
getshmimsize aol${LOOPNUMBER}_contrMcact${i2}_00

done
fi

ReadLoopGain
ReadLoopMaxLim
ReadLoopMultCoeff

echo "memory loaded"
}



if [ "$LOADMEM" -eq "1" ]
then
AOloadMem 1
fi


if [ "$LOADexit" -eq "1" ]
then
exit
fi


# =================== STATE MACHINE ====================================
state="menutop"

confselected=1
menuconfmanage_default=0
echo "START STATE MACHINE"


while true; do
stateok=0
. ./aolconfscripts/aolconf_menutop
. ./aolconfscripts/aolconf_menuconfigureloop
. ./aolconfscripts/aolconf_menu_mkFModes
. ./aolconfscripts/aolconf_menucontrolmatrix
. ./aolconfscripts/aolconf_menucontrolloop
. ./aolconfscripts/aolconf_menupredictivecontrol
. ./aolconfscripts/aolconf_menudmCfiltering
. ./aolconfscripts/aolconf_menutestmode
. ./aolconfscripts/aolconf_menuview
. ./aolconfscripts/aolconf_menurecord

if [ $state = "menuexit" ]; then
stateok=1
echo "exit"
exit
fi


if [ $stateok = 0 ]; then
echo "state \"$state\" not recognized ... exit"
aoconflog "state \"$state\" not recognized ... exit"
exit
fi

done

