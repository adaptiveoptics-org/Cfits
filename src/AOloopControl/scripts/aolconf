#!/bin/bash


# ====================== USER EDITS THIS SECTION =======================

execname="Cfits"

# default parameters

LOOPNAME="pyramid" # name of the control loop
LOOPNUMBER_default=2  # loop number

dmC="dmdisp3" # DM control channel
dmRM="dmdisp7" # DM actuation channel for RM matrix
wfsimcam="imcam" # WFS camera image




# ======================== END OF USER EDIT SECTION =====================













# =================== some initial setup =======================

LOOPNUMBER_file="LOOPNUMBER"
confnbfile="./conf/conf_CONFNUMBER.txt"

mkdir -p conf
mkdir -p status


# LOOPNUMBER (loop number)
if [ ! -f $LOOPNUMBER_file ]
then
	echo "creating loop number"
	echo "$LOOPNUMBER_default" > $LOOPNUMBER_file
else
	LOOPNUMBER=$(cat $LOOPNUMBER_file)
	echo "LOOPNUMBER = $LOOPNUMBER"
fi


outmesg="/tmp/aol${LOOPNUMBER}confout"
rm $outmesg
touch $outmesg


# CONFSELECTED (conf numnber)
if [ ! -f $confnbfile ]
then
	echo "creating configuration number"
	echo "$CONFSELECTED_default" > ./conf/conf_CONFNUMBER.txt
else
	CONFSELECTED=$(cat $confnbfile)
	echo "selected configuration = $CONFSELECTED"
fi



# connect to WFS camera
echo "connecting to camera"
ln -sf /tmp/${wfsimcam}.im.shm /tmp/aol${LOOPNUMBER}_wfs.im.shm

# connect to WFS camera serial link
echo "connect to camera serial link"
ln -sf /dev/ttyS4 /tmp/ocamtty 



# loop name
echo "$LOOPNAME" > ./conf/conf_LOOPNAME.txt
echo "loop name : $LOOPNAME"


# WFS raw image
echo "linking to WFS camera"
rm /tmp/aol${LOOPNUMBER}_wfs.im.shm
ln -s /tmp/${wfsimcam}.im.shm /tmp/aol${LOOPNUMBER}_wfs.im.shm



tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15










# ================ FREQUENTLY USED FUNCTIONS ===================

echo "FUNCTIONS..."






function TestModeStart {
mkdir -p testconf
echo "$execname -n aol${LOOPNUMBER}test << EOF" > script_aol${LOOPNUMBER}test 
echo "AOsystsim" >> script_aol${LOOPNUMBER}test 
chmod +x script_aol${LOOPNUMBER}test 

tmux new-session -d -s aol${LOOPNUMBER}test
echo "ON" > ./status/testloopstatus.txt
tmux send-keys -t aol${LOOPNUMBER}test "./script_aol${LOOPNUMBER}test" C-m
}

function TestModeStop {
pkill aol${LOOPNUMBER}test
echo "OFF" > ./status/testloopstatus.txt
}






function Fits2shm {
$execname << EOF # move file to shared memory
loadfits "$1" im
imcp2shm im $2
quit
EOF
}




# SetDark <confnb> <camgain>
function SetDark {
file="./conf$1/conf_pyrloopfrequ.txt"
ok=1

if [ -f $file ]
	then
	pyfreq=$(echo "$(cat $file)")
	else
	echo "CANNOT READ FILE ${file}"
	ok=0
fi

file="$PWD/darks/dark_${pyfreq}_$2.fits"
if [ ! -f $file ]
	then
	echo "CANNOT READ FILE ${file}"
	ok=0
fi

if [ ${ok} -eq 1 ]
then
ln -snf ${file} "$PWD/conf/dark.fits" &> ${outmesg}
Fits2shm "./conf/dark.fits" aol${LOOPNUMBER}_wfsdark &> ${outmesg}
fi

}


# SetDMmodes <confnb>
function SetDMmodes {
file="./conf$1/fmodes.fits"
ok=1
if [ -f $file ]
then
ln -snf $PWD/conf$1/fmodes.fits $PWD/conf/fmodes.fits
ln -snf $PWD/conf$1/modesfreqcpa.fits $PWD/conf/modesfreqcpa.fits
Fits2shm "./conf/fmodes.fits" "aol${LOOPNUMBER}_DMmodes"
else
echo "CANNOT READ FILE ${file}"
fi
}








function ReaddmCname {
file="./conf/conf_dmC_name.txt"
if [ -a $file ]
	then
	dmC=$(echo "$(cat $file)")
	else
	dmC="dmC" #default
fi
# DM correction channel
echo "linking to dm correction channel"
rm /tmp/aol${LOOPNUMBER}_dmC.im.shm 
ln -s /tmp/${dmC}.im.shm /tmp/aol${LOOPNUMBER}_dmC.im.shm
}


function ReaddmRMname {
file="./conf/conf_dmRM_name.txt"
if [ -a $file ]
	then
	dmRM=$(echo "$(cat $file)")
	else
	dmRM="dmRM" #default
fi
# DM response matrix channel
echo "linking to dm resp mat channel"
rm /tmp/aol${LOOPNUMBER}_dmRM.im.shm 
ln -s /tmp/${dmRM}.im.shm /tmp/aol${LOOPNUMBER}_dmRM.im.shm
}


function Readwfsimcamname {
file="./conf/conf_wfsim_name.txt"
if [ -a $file ]
	then
	wfsimcam=$(echo "$(cat $file)")
	else
	wfsimcam="wfsimcam" #default
fi
# WFS raw image
echo "linking to WFS camera"
rm /tmp/aol${LOOPNUMBER}_wfs.im.shm
ln -s /tmp/${wfsimcam}.im.shm /tmp/aol${LOOPNUMBER}_wfs.im.shm
}





function ReadLoopGain {
file="./conf/conf_loopgain.txt"
if [ -a $file ]
	then
	loopgain=$(echo "$(cat $file)")
	else
	loopgain="0.000" #default
fi
}


function ReadLoopMaxLim {
file="./conf/conf_loopmaxlim.txt"
if [ -a $file ]
	then
	loopmaxlim=$(echo "$(cat $file)")
	else
	loopmaxlim="0.100"
fi
}


function ReadLoopMultCoeff {
file="./conf/conf_loopmultcoeff.txt"
if [ -a $file ]
	then
	loopmultcoeff=$(echo "$(cat $file)")
	else
	loopmultcoeff="0.999"
fi
}




function CheckLoopConfiguration {
confOK=1
echo "" > confOK_errmsg.txt

file="./conf/conf_loopgain.txt"
if [ ! -f $file ]; then
	echo "FILE $file is missing" >> confOK_errmsg.txt
	confOK=0
	fi

file="./conf/conf_loopmaxlim.txt"
if [ ! -f $file ]; then
	echo "FILE $file is missing" >> confOK_errmsg.txt
	confOK=0
	fi
	
file="./conf/conf_loopmultcoeff.txt"
if [ ! -f $file ]; then
	echo "FILE $file is missing" >> confOK_errmsg.txt
	confOK=0
	fi

clear
if [ $confOK -eq 0 ]; then
	echo "CONFIGURATION IS NOT COMPLETE"
	cat confOK_errmsg.txt
else
	echo "CONFIGURATION IS COMPLETE"
fi
sleep 2
}



# =================== READ CONFIGURATION====================================
ReaddmCname
ReaddmRMname
Readwfsimcamname

ReadLoopGain
ReadLoopMaxLim
ReadLoopMultCoeff




# =================== STATE MACHINE ====================================
state="menutop"


confnb=0
confselected=1

menuconfmanage_default=0








echo "START STATE MACHINE"

while true; do

stateok=0




# ===================== TOP MENU ======================
if [ $state = "menutop" ]; then
stateok=1
confselected=$(cat "./conf/conf_CONFNUMBER.txt")
menuname="TOP MENU \n [Active conf = ${confselected}]"


menuitems=( "C" "Configure AO loop" )
menuitems+=( "L" "Control AO loop" )
menuitems+=( "T" "Test mode: simulated AO system" )



dialog --title "AO loop top menu" \
--ok-label "Select" \
--cancel-label "Exit" \
--default-item "${menutop_default}" \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)

case $retval in
   0) # button
	case $choiceval in
   	 C) 
menutop_default="C"
state="menuconfigureloop"
;;   
   	 L) 
menutop_default="L"
state="menucontrolloop"
;;
   	 T) 
menutop_default="T"
state="menutestmode"   
;;
	esac;;
   1) state="menuexit";;   
   255) state="menuexit";;
esac
fi












# CONFIGURE AO LOOP
if [ $state = "menuconfigureloop" ]; then
stateok=1
menuname="REVIEW LOOP CONFIGURATION"

confOK=1


dmCfile="/tmp/${dmC}.im.shm"
if [ -f $dmCfile ]; then
dmCOKstr="    OK   "
else
dmCOKstr=" MISSING "
confOK=0
fi
menuitems=( "dmC" "[${dmCOKstr}] DM control channel = ${dmC}" )


dmRMfile="/tmp/${dmRM}.im.shm"
if [ -f $dmRMfile ]; then
dmRMOKstr="    OK   "
else
dmRMOKstr=" MISSING "
confOK=0
fi
menuitems+=( "dmRM" "[${dmRMOKstr}] DM RM acqu channel = ${dmRM}" )


wfsimcamfile="/tmp/${wfsimcam}.im.shm"
if [ -f $wfsimcamfile ]; then
wfsimcamOKstr="    OK   "
else
wfsimcamOKstr=" MISSING "
confOK=0
fi
menuitems+=( "wfs" "[${wfsimcamOKstr}] WFS camera image   = ${wfsimcam}" )





menuitems+=( "-" " " )

menuitems+=( "g" "loop gain    =   ${loopgain}" )
menuitems+=( "m" "loop max lim =   ${loopmaxlim}" )
menuitems+=( "e" "mult coeff   =   ${loopmultcoeff}" )
menuitems+=( "c" "check configuration" )

state="menutop"


dialog --title "LOOP CONFIGURATION" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menucontrolloop_default}" \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile


retval=$?
choiceval=$(cat $tempfile)


case $retval in
   0) # button
	case $choiceval in
	-)
state="menuconfigureloop"
;;
	dmC)
exec 3>&1;
dmC=$(dialog --inputbox test 0 0 2>&1 1>&3);
#exitcode=$?;
exec 3>&-;
#echo $result $exitcode;
echo "$dmC" > ./conf/conf_dmC_name.txt
ReaddmCname
state="menuconfigureloop"
;;
	dmRM)
exec 3>&1;
dmRM=$(dialog --inputbox test 0 0 2>&1 1>&3);
exec 3>&-;
echo "$dmRM" > ./conf/conf_dmRM_name.txt
ReaddmRMname
state="menuconfigureloop"
;;
	wfs)
exec 3>&1;
wfsimcam=$(dialog --inputbox test 0 0 2>&1 1>&3);
exec 3>&-;
echo "$wfsimcam" > ./conf/conf_wfsim_name.txt
Readwfsimcamname
state="menuconfigureloop"
;;
  	 g) 
menucontrolloop_default="g"
state="menucontrolloop_setgain"
;; 
   	 m)   	
menucontrolloop_default="m"
state="menucontrolloop_setmaxlim"
;;  
   	 e) 
menucontrolloop_default="e"
state="menucontrolloop_setmult"
;;   

   	 c) 
menucontrolloop_default="c"
CheckLoopConfiguration
;;   
	esac;;
   1) state="menutop";;   
   2) state="menuexit";;
   255) state="menuexit";;
esac


fi









# CONTROL AO LOOP
if [ $state = "menucontrolloop" ]; then
stateok=1
menuname="CONTROL LOOP"


loopgain=$(echo "$(cat ./conf/conf_loopgain.txt)")
loopmaxlim=$(echo "$(cat ./conf/conf_loopmaxlim.txt)")
loopmultcoeff=$(echo "$(cat ./conf/conf_loopmultcoeff.txt)")


menuitems=( "g" "loop gain    =   ${loopgain}" )
menuitems+=( "m" "loop max lim =   ${loopmaxlim}" )
menuitems+=( "e" "mult coeff   =   ${loopmultcoeff}" )
menuitems+=( "" "" )
menuitems+=( "S" "Start loop processes" )
menuitems+=( "t1" "step 1" )
menuitems+=( "t3" "step 3" )
menuitems+=( "t10" "step 10" )
menuitems+=( "t30" "step 30" )
menuitems+=( "t100" "step 100" )
menuitems+=( "t300" "step 300" )
menuitems+=( "t1000" "step 1000" )
menuitems+=( "N" "LOOP ON" )
menuitems+=( "F" "LOOP OFF" )
menuitems+=( "Z" "LOOP Zero" )
menuitems+=( "K" "Kill LOOP" )
menuitems+=( "" "" )
menuitems+=( "L" "Control Loop" )



state="menutop"


dialog --title "LOOP CONTROL" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menucontrolloop_default}" \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)

case $retval in
   0) # button
	case $choiceval in
  	 g) 
menucontrolloop_default="g"
state="menucontrolloop_setgain"
;; 
   	 m)   	
menucontrolloop_default="m"
state="menucontrolloop_setmaxlim"
;;  
   	 e) 
menucontrolloop_default="e"
state="menucontrolloop_setmult"
;;   
   	 S)
rm aolctr-${LOOPNUMBER}-fifo
sleep 1
xterm $xtermopt -e numactl --cpunodebind=$NUMAnode --membind=$NUMAnode ./aolctr &
sleep 1
xterm $xtermopt -e numactl --cpunodebind=$NUMAnode --membind=$NUMAnode ./aolrun &
ocamstopacq
sleep 1
echo "aolon" >> aolctr-${LOOPNUMBER}-fifo
sleep 5
echo "aoloff" >> aolctr-${LOOPNUMBER}-fifo
sleep 1
ocamstartacq
menucontrolloop_default="S"
state="menucontrolloop"
;; 
   	 t1)
echo "aolstep 1" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t1"
state="menucontrolloop"
;;   
   	 t3)
echo "aolstep 3" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t3"
state="menucontrolloop"
;;   
   	 t10)
echo "aolstep 10" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t10"
state="menucontrolloop"
;;   
   	 t30)
echo "aolstep 30" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t30"
state="menucontrolloop"
;;   
   	 t100)
echo "aolstep 100" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t100"
state="menucontrolloop"
;;   
   	 t300)
echo "aolstep 300" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t300"
state="menucontrolloop"
;;   
   	 t1000)
echo "aolstep 1000" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t1000"
state="menucontrolloop"
;;   
   	 N)
echo "aolon" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="N"
state="menucontrolloop"
;; 
   	 F)
echo "aoloff" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="F"
state="menucontrolloop"
;; 
   	 Z)
echo "imzero aol${LOOPNUMBER}_DMmode_cmd" >> aolctr-${LOOPNUMBER}-fifo
echo "readshmim aol${LOOPNUMBER}_dmC" >> aolctr-${LOOPNUMBER}-fifo
echo "imzero aol${LOOPNUMBER}_dmC" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="Z"
state="menucontrolloop"
;;
   	 K)
ocamstopacq
sleep 1
echo "aoloff" >> aolctr-${LOOPNUMBER}-fifo
echo "aolkill" >> aolctr-${LOOPNUMBER}-fifo
echo "exit" >> aolctr-${LOOPNUMBER}-fifo
sleep 1
ocamstartacq
menucontrolloop_default="K"
state="menucontrolloop"
;;
  	 C) state="menuconfmain";; 
   	 W) state="menucamera";;  
   	 L) state="menucontrolloop";;   
   	 A) state="menualign";;  
	esac;;
   1) state="menutop";;   
   2) state="menuexit";;
   255) state="menuexit";;
esac


fi











#  TEST MODE
if [ $state = "menutestmode" ]; then
stateok=1

testloopstatus="OFF"

file="./status/testloopstatus.txt"
if [ -a $file ]
	then
	testloopstatus=$(echo "$(cat $file)")
	else
	testloopstatus="OFF"
fi



menuname="TEST MODE [${testloopstatus}] - LOOP ${LOOPNUMBER}"



menuitems=( "H" "help" )
menuitems+=( "-" " " )
menuitems+=( "Start" "Start test mode" )
menuitems+=( "Stop" "Stop test mode" )



dialog --title "TEST MODE" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menutestmode_default}" \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)

case $retval in
   0) # button
	case $choiceval in
   	 H)
dialog --title "Help" --msgbox 'Simulation mode\n
\n
Creates shared memory arrays: \n
   aosimdmctrl   : DM control map (50x50)\n
   WFturb        : Wavefront phase turbulence (512x512)\n
   aosimpsfout   : output PSF (intensity)\n
   aosimwfsim    : output WFS image (intensity)\n
\n
Recomputes aosimpsfout when either aosimdmctrl or WFturb changes' 40 80
menutestmode_default="H"
;;
   	 Start)
if [ $testloopstatus = "OFF" ]; then
TestModeStart
menutestmode_default="Start"
fi
state="menutestmode"
;;   
   	 Stop) 
if [ $testloopstatus = "ON" ]; then
TestModeStop
menutestmode_default="Stop"
fi
state="menutestmode"
;;  
	esac;;
   1) state="menutop";;   
  2) state="menuexit";;
   255) state="menuexit";;
esac

fi
















#  SET CONTROL LOOP GAIN
if [ $state = "menucontrolloop_setgain" ]; then
stateok=1
menuname="SET LOOP GAIN - LOOP ${LOOPNUMBER}"

ReadLoopGain


loopgain3=$(echo "scale=0; $loopgain*1000/1" | bc -q 2>/dev/null |awk '{printf("%03d", $1)}')

menuitems=()
menuitems+=( "000" "0.000" )
menuitems+=( "001" "0.001" )
menuitems+=( "005" "0.005" )
menuitems+=( "010" "0.010" )
for i in `seq 50 50 950 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 


dialog --title "Control loop gain" \
--ok-label "Select" \
--cancel-label "Cancel" \
--help-button --help-label "Exit" \
--default-item ${loopgain3} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile


retval=$?

case $retval in
   0) state="menucontrolloop"
loopgain=$(cat $tempfile|awk '{printf("%5.3f", $1*0.001)}')
echo "$loopgain" > ./conf/conf_loopgain.txt
echo "aolsetgain ${loopgain}" >> aolctr-${LOOPNUMBER}-fifo
;; # button 1:
   1) state="menucontrolloop";; 
   2) state="menuexit";; 
   255) state="menuexit";;
esac


fi










#  SET CONTROL LOOP MAX LIM
if [ $state = "menucontrolloop_setmaxlim" ]; then
stateok=1
menuname="SET LOOP MAX LIMIT - LOOP ${LOOPNUMBER}"

ReadLoopMaxLim

loopmaxlim3=$(echo "scale=0; $loopmaxlim*1000/1" | bc -q 2>/dev/null |awk '{printf("%03d", $1)}')

menuitems=()
menuitems+=( "000" "0.000" )
menuitems+=( "001" "0.001" )
menuitems+=( "005" "0.005" )
menuitems+=( "010" "0.010" )
for i in `seq 50 50 950 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 



dialog --title "Control loop max limit" \
--ok-label "Select" \
--cancel-label "Cancel" \
--help-button --help-label "Exit" \
--default-item ${loopmaxlim3} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menucontrolloop"
loopmaxlim=$(cat $tempfile|awk '{printf("%5.3f", $1*0.001)}')
echo "$loopmaxlim" > ./conf/conf_loopmaxlim.txt
echo "aolsetmaxlim ${loopmaxlim}" >> aolctr-${LOOPNUMBER}-fifo
;; # button 1:
   1) state="menucontrolloop";; 
   2) state="menuexit";; 
   255) state="menuexit";;
esac

fi





#  SET MULT COEFF
if [ $state = "menucontrolloop_setmult" ]; then
stateok=1
menuname="SET LOOP MULT COEFF - LOOP ${LOOPNUMBER}"

ReadLoopMultCoeff

loopmultcoeff3=$(echo "scale=0; $loopmultcoeff*1000/1" | bc -q 2>/dev/null |awk '{printf("%03d", $1)}')

menuitems=()
for i in `seq 000 100 800 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 
menuitems+=( "" "" )
for i in `seq 900 10 980 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 
menuitems+=( "" "" )
for i in `seq 990 1 999 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 
menuitems+=( "" "" )
menuitems+=( "1000" "1.000" )


dialog --title "Control loop mult coeff" \
--ok-label "Select" \
--cancel-label "Cancel" \
--help-button --help-label "Exit" \
--default-item ${loopmultcoeff3} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menucontrolloop"
loopmultcoeff=$(cat $tempfile|awk '{printf("%5.3f", $1*0.001)}')
echo "$loopmultcoeff" > ./conf/conf_loopmultcoeff.txt
echo "aolsetmult ${loopmultcoeff}" >> aolctr-${LOOPNUMBER}-fifo
;; # button 1:
   1) state="menucontrolloop";; 
   2) state="menuexit";; 
   255) state="menuexit";;
esac

fi














if [ $state = "menuexit" ]; then
stateok=1
echo "exit"
exit
fi



if [ $stateok = 0 ]; then
echo "state \"$state\" not recognized ... exit"
exit
fi


done
















