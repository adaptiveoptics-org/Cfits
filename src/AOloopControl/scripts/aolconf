#!/bin/bash


aolconfFLAG="1"
NBARGS=0

if [ -f LOOPNAME ]; then
LOOPNAME=$( cat LOOPNAME )
else
LOOPNAME="null"
fi

# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`
echo "pname = $pname"




printHELP_confFILES ()
{
echo "------------------------------------------------------------------------"
echo -e "\033[1m               CONFIGURATION FILES \033[0m"
echo "------------------------------------------------------------------------"
echo "	CONFNUMBER                    loop number (long)"
echo "	CONFNAME                      loop name"
echo "  conf/conf_dmC_name.txt        DM control"
echo "------------------------------------------------------------------------"
}





printHELP ()
{
	
echo
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname :  AO loop CONTROL - main script $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo " "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [options]"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "   --help -h             print (h)elp and exit"
echo "   --help1               print 1 line summary"
echo "          -H  <string>   (H)elp category"
echo "                    cf     configuration files"     
echo "          -L <long>      (L)oop number"
echo "          -N <string>    loop (N)ame"
echo "          -C             run (C)PU config"
echo "          -c             (c)lear all settings"
echo "          -n             do (n)ot load configuration on startup"
echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
	printf "%20s       AO loop CONTROL - main script\n" "$0" 
}


# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done



LOADMEM=1


### Start getopts code ###
while getopts :hH:L:N:Ccn FLAG; do
  case $FLAG in
    H) # detailed help
    if [ "$OPTARG" == "cf" ]; then
    printHELP_confFILES
    exit
    fi
    echo "ERROR: choice $OPTARG not recognized"
    exit
    ;;
    L)  #  set loop number
      LOOPNUMBER=$OPTARG
      echo "LOOP NUMBER = $LOOPNUMBER"
      echo "$LOOPNUMBER" > $LOOPNUMBER_file
      aoconflog "setting LOOPNUMBER to $LOOPNUMBER"
      ;;
    N) # set loop name
    LOOPNAME=$OPTARG
    echo "LOOP NAME = $LOOPNAME"
    echo "$LOOPNAME" > $LOOPNAME_file
    aoconflog "setting LOOPNAME to $LOOPNAME"
    ;;
    C) # configure CPU
    echo "Configure CPU"
    CPUconfRT=1
    ;;
    h)  #show help
	if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    c) # clear
    echo "Clearing all settings"
    rm $LOOPNUMBER_file
    rm $LOOPNAME_file
    rm conf/*
    rmdir conf
    rm status/*
    rmdir status
    rm tmp/*
    rmdir tmp
    exit
    ;;
    n) # do not load configuration upon startup
    LOADMEM=0
    ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1)) 

### End getopts code ###









if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo -e \\n"Illegal number of parameters ($NBARGS params required, $# entered)"\\n
fi
printHELP
        exit
fi












# help, warning, error
. ./aolconfscripts/aolconf_funcs


# ======================= LOGGING =================================
# NOTE: copy logging functions to external scripts
# NOTE: dolog and dologext should be provided by user

# internal log - logs EVERYTHING
function aoconflog {
echo "$@" >> aolconf.log
dolog "$LOOPNAME" "$@"
}

# external log, less verbose
function aoconflogext {
echo "$@" >> aolconf.log
dolog "$LOOPNAME" "$@"
dologext "$LOOPNAME $@"
}





aoconflog " STARTING NEW aolconf SESSION"




# ====================== USER EDITS THIS SECTION =======================
execname="Cfits"  

# default parameters
LOOPNUMBER_default=7  # default loop number
CPUconfRT=0 # no CPU real-time configuration

DMindex=0




# CUSTOM USER-PROVIDED SCRIPTS:
if [ -f "AOloopsetup.bash" ]; then
. ./AOloopsetup.bash # executed here
else
printWARNING "File AOloopsetup.bash does not exist"
fi


shmimviewexec="shmimview"
shmimmonexec="shmimmon"


# ======================== END OF USER EDIT SECTION =====================



. ./aolconfscripts/aolconf_readconf






















# ===================== TEST MODE ========================
dmxsize=32
dmysize=32





# =================== some initial setup =======================


LINES=$( tput lines )
COLUMNS=$( tput cols )
let " nbwlines = $LINES - 10 "
let " nbwcols = $COLUMNS - 10 "
#echo "$COLUMNS -> $nbwcols"
actionmode="Select"

#confnbfile="./conf/conf_CONFNUMBER.txt"
mkdir -p conf
mkdir -p status
mkdir -p tmp

cp LOOPNAME ./conf/conf_LOOPNAME.txt



# CONFSELECTED (conf numnber)
#if [ ! -f $confnbfile ]
#then
#	echo "creating configuration number"
#	echo "$CONFSELECTED_default" > ./conf/conf_CONFNUMBER.txt
#else
#	CONFSELECTED=$(cat $confnbfile)
#	echo "selected configuration = $CONFSELECTED"
#fi




tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15










# ================ FREQUENTLY USED FUNCTIONS ===================

echo "FUNCTIONS..."

. ./aolconfscripts/aolconf_logfuncs
. ./aolconfscripts/aolconf_DMfuncs








function TestModeStart {

aoconflog "TEST MODE START"


mkdir -p testconf
echo "# THIS SCRIPT IS GENERATED BY aolconf" >  script_aol${LOOPNUMBER}test 
echo "$execname -n aol${LOOPNUMBER}test << EOF" >> script_aol${LOOPNUMBER}test 
if [ "$CPUconfRT" -eq "1" ]; then
echo "csetpmove aolRT" >> script_aol${LOOPNUMBER}test 
fi
echo "AOsystsim ${AOsystsimsync} ${DMindex} ${AOsystsimWFSdelayus}" >> script_aol${LOOPNUMBER}test 
chmod +x script_aol${LOOPNUMBER}test 

tmux new-session -d -s aol${LOOPNUMBER}test
echo " ON" > ./status/testloopstatus.txt
tmux send-keys -t aol${LOOPNUMBER}test "./script_aol${LOOPNUMBER}test" C-m

echo "aosimwfsim" > ./conf/conf_wfsim_name.txt
#echo "dhfield" > ./conf/conf_wfsim_name.txt
Readwfsimcamname

echo "0.1" > ./conf/conf_loopgain.txt
ReadLoopGain

echo "1.0" > ./conf/conf_loopmaxlim.txt
ReadLoopMaxLim 

echo "0.99" > ./conf/conf_loopmultcoeff.txt
ReadLoopMultCoeff
}


function TestModeStop {
aoconflog "TEST MODE STOP"
pkill aol${LOOPNUMBER}test
echo "OFF" > ./status/testloopstatus.txt
}




. ./aolconfscripts/aolconf_DMturb






# =================== READ CONFIGURATION====================================

# =================== READ CONFIGURATION====================================


function AOloadMem {
# hardware I/O [shared memory]
ReaddmCname
getshmimsize aol${LOOPNUMBER}_dmC

ReaddmOname
getshmimsize aol${LOOPNUMBER}_dmO

ReaddmZP0name
getshmimsize aol${LOOPNUMBER}_dmZP0

ReaddmZP1name
getshmimsize aol${LOOPNUMBER}_dmZP1

ReaddmZP2name
getshmimsize aol${LOOPNUMBER}_dmZP2

ReaddmZP3name
getshmimsize aol${LOOPNUMBER}_dmZP3

ReaddmZP4name
getshmimsize aol${LOOPNUMBER}_dmZP4

ReaddmZP5name
getshmimsize aol${LOOPNUMBER}_dmZP5

ReaddmZP6name
getshmimsize aol${LOOPNUMBER}_dmZP6

ReaddmZP7name
getshmimsize aol${LOOPNUMBER}_dmZP7



Readdmdispname
getshmimsize aol${LOOPNUMBER}_dmdisp

ReaddmRMname
getshmimsize aol${LOOPNUMBER}_dmRM

Readwfsimcamname
getshmimsize aol${LOOPNUMBER}_wfsim

ReadWFSdarkfname
getshmimsize aol${LOOPNUMBER}_wfsdark




# SYSTEM CALIBRATION



ReadConfFile "wfsmap"
getshmimsize aol${LOOPNUMBER}_wfsmask


ReadConfFile "wfsmask"
getshmimsize aol${LOOPNUMBER}_wfsmask

ReadConfFile "dmmap"
getshmimsize aol${LOOPNUMBER}_dmmap

ReadConfFile "dmmaskRM"
getshmimsize aol${LOOPNUMBER}_dmmaskRM

ReadConfFile "dmslaved"
getshmimsize aol${LOOPNUMBER}_dmslaved

ReadConfFile "dmmask"
getshmimsize aol${LOOPNUMBER}_dmmask

ReadConfFile "wfsref0"
getshmimsize aol${LOOPNUMBER}_wfsref0



ReadConfFile "zrespM"
getshmimsize aol${LOOPNUMBER}_zrespM


ReadConfFile "LODMmodes"
getshmimsize aol${LOOPNUMBER}_LODMmodes

ReadConfFile "LOrespM"
getshmimsize aol${LOOPNUMBER}_LOrespM




# System response and control
ReadCPAmax

ReadConfFile "DMmodes"
getshmimsize aol${LOOPNUMBER}_DMmodes

ReadConfFile "respM"
getshmimsize aol${LOOPNUMBER}_respM

ReadConfFile "contrM"
getshmimsize aol${LOOPNUMBER}_contrM


if [ "$1" -eq 1 ];then
NBblocks=$( cat ./conf/conf_NBmodeblocks.txt )
NBmodes=$( cat ./conf/conf_NBmodes.txt )
for i in `seq 0 $(( $NBblocks - 1 ))`;
do
i2=$(printf "%02d" "$i")

ReadConfFile "DMmodes${i2}"
getshmimsize aol${LOOPNUMBER}_DMmodes${i2}

ReadConfFile "respM${i2}"
getshmimsize aol${LOOPNUMBER}_respM${i2}

ReadConfFile "contrM${i2}"
getshmimsize aol${LOOPNUMBER}_contrM${i2}

ReadConfFile "contrMc${i2}"
getshmimsize aol${LOOPNUMBER}_contrMc${i2}

ReadConfFile "contrMcact${i2}_00"
getshmimsize aol${LOOPNUMBER}_contrMcact${i2}_00

done
fi

ReadLoopGain
ReadLoopMaxLim
ReadLoopMultCoeff

echo "memory loaded"
}



if [ "$LOADMEM" -eq "1" ]
then
AOloadMem 1
fi





# =================== STATE MACHINE ====================================
state="menutop"

confselected=1
menuconfmanage_default=0
echo "START STATE MACHINE"


while true; do
stateok=0
. ./aolconfscripts/aolconf_menutop
. ./aolconfscripts/aolconf_menuconfigureloop
. ./aolconfscripts/aolconf_menu_mkFModes
. ./aolconfscripts/aolconf_menucontrolmatrix
. ./aolconfscripts/aolconf_menucontrolloop
. ./aolconfscripts/aolconf_menupredictivecontrol
. ./aolconfscripts/aolconf_menudmCfiltering
. ./aolconfscripts/aolconf_menutestmode
. ./aolconfscripts/aolconf_menuview
. ./aolconfscripts/aolconf_menurecord

if [ $state = "menuexit" ]; then
stateok=1
echo "exit"
exit
fi


if [ $stateok = 0 ]; then
echo "state \"$state\" not recognized ... exit"
aoconflog "state \"$state\" not recognized ... exit"
exit
fi

done

