#!/bin/bash


# ====================== USER EDITS THIS SECTION =======================

execname="Cfits"

# default parameters

LOOPNAME="pyramid" # name of the control loop
LOOPNUMBER_default=2  # loop number

dmC="dmdisp3" # DM control channel
dmdisp="dmdisp" # total DM displacement channel
dmRM="dmdisp7" # DM actuation channel for RM matrix
wfsimcam="imcam" # WFS camera image

shmimviewexec="shmimview"
shmimmonexec="shmimmon"


# ======================== END OF USER EDIT SECTION =====================





# ===================== TEST MODE ========================
testdmsize=20






# =================== some initial setup =======================

LINES=$( tput lines )
COLUMNS=$( tput cols )
let " nbwlines = $LINES - 10 "
let " nbwcols = $COLUMNS - 10 "
echo "$COLUMNS -> $nbwcols"


LOOPNUMBER_file="LOOPNUMBER"
confnbfile="./conf/conf_CONFNUMBER.txt"

mkdir -p conf
mkdir -p status
mkdir -p tmp


# LOOPNUMBER (loop number)
if [ ! -f $LOOPNUMBER_file ]
then
	echo "creating loop number"
	echo "$LOOPNUMBER_default" > $LOOPNUMBER_file
else
	LOOPNUMBER=$(cat $LOOPNUMBER_file)
	echo "LOOPNUMBER = $LOOPNUMBER"
fi


outmesg="/tmp/aol${LOOPNUMBER}confout"
rm $outmesg
touch $outmesg


# CONFSELECTED (conf numnber)
if [ ! -f $confnbfile ]
then
	echo "creating configuration number"
	echo "$CONFSELECTED_default" > ./conf/conf_CONFNUMBER.txt
else
	CONFSELECTED=$(cat $confnbfile)
	echo "selected configuration = $CONFSELECTED"
fi



# connect to WFS camera
echo "connecting to camera"
ln -sf /tmp/${wfsimcam}.im.shm /tmp/aol${LOOPNUMBER}_wfsim.im.shm




# loop name
echo "$LOOPNAME" > ./conf/conf_LOOPNAME.txt
echo "loop name : $LOOPNAME"




tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15










# ================ FREQUENTLY USED FUNCTIONS ===================

echo "FUNCTIONS..."


function stringcenter {
line=$1
    let " col1 = $nbwcols-35"
    columns="$col1"
    string=$(printf "%*s%*s\n" $(( (${#line} + columns) / 2)) "$line" $(( (columns - ${#line}) / 2)) " ")
}



function Fits2shm {
$execname << EOF # move file to shared memory
loadfits "$1" im
imcp2shm im $2
quit
EOF
}




# SetDark <confnb> <camgain>
function SetDark {
file="./conf$1/conf_pyrloopfrequ.txt"
ok=1

if [ -f $file ]
	then
	pyfreq=$(echo "$(cat $file)")
	else
	echo "CANNOT READ FILE ${file}"
	ok=0
fi

file="$PWD/darks/dark_${pyfreq}_$2.fits"
if [ ! -f $file ]
	then
	echo "CANNOT READ FILE ${file}"
	ok=0
fi

if [ ${ok} -eq 1 ]
then
ln -snf ${file} "$PWD/conf/dark.fits" &> ${outmesg}
Fits2shm "./conf/dark.fits" aol${LOOPNUMBER}_wfsdark &> ${outmesg}
fi

}


# SetDMmodes <confnb>
function SetDMmodes {
file="./conf$1/fmodes.fits"
ok=1
if [ -f $file ]
then
ln -snf $PWD/conf$1/fmodes.fits $PWD/conf/fmodes.fits
ln -snf $PWD/conf$1/modesfreqcpa.fits $PWD/conf/modesfreqcpa.fits
Fits2shm "./conf/fmodes.fits" "aol${LOOPNUMBER}_DMmodes"
else
echo "CANNOT READ FILE ${file}"
fi
}








function ReaddmCname {
file="./conf/conf_dmC_name.txt"
if [ -a $file ]
	then
	dmC=$(echo "$(cat $file)")
	else
	dmC="dmC" #default
fi
# DM correction channel
echo "linking to dm correction channel"
rm /tmp/aol${LOOPNUMBER}_dmC.im.shm 
ln -s /tmp/${dmC}.im.shm /tmp/aol${LOOPNUMBER}_dmC.im.shm
}


function Readdmdispname {
file="./conf/conf_dmdisp_name.txt"
if [ -a $file ]
	then
	dmdisp=$(echo "$(cat $file)")
	else
	dmdisp="dmdisp" #default
fi
# DM correction channel
echo "linking to dm correction channel"
rm /tmp/aol${LOOPNUMBER}_dmdisp.im.shm 
ln -s /tmp/${dmdisp}.im.shm /tmp/aol${LOOPNUMBER}_dmdisp.im.shm
}

function ReaddmRMname {
file="./conf/conf_dmRM_name.txt"
if [ -a $file ]
	then
	dmRM=$(echo "$(cat $file)")
	else
	dmRM="dmRM" #default
fi
# DM response matrix channel
echo "linking to dm resp mat channel"
rm /tmp/aol${LOOPNUMBER}_dmRM.im.shm 
ln -s /tmp/${dmRM}.im.shm /tmp/aol${LOOPNUMBER}_dmRM.im.shm
}


function Readwfsimcamname {
file="./conf/conf_wfsim_name.txt"
if [ -a $file ]
	then
	wfsimcam=$(echo "$(cat $file)")
	else
	wfsimcam="wfsimcam" #default
fi
# WFS raw image
echo "linking to WFS camera"
ln -sf /tmp/${wfsimcam}.im.shm /tmp/aol${LOOPNUMBER}_wfsim.im.shm
}


function ReadLoopDelay {
file="./conf/conf_loopdelayms.txt"
if [ -a $file ]
	then
	loopdelayms=$(echo "$(cat $file)")
	else
	loopdelayms=10.0 #default
fi
}









function ReadWFSdarkfname {
file="./conf/conf_wfsdark_fname.txt"
if [ -a $file ]
	then
	wfsdarkfname=$(echo "$(cat $file)")
	else
	wfsdarkfname="wfsdark.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_wfsdark.im.shm
Fits2shm ${wfsdarkfname} aol${LOOPNUMBER}_wfsdark
ln -s $PWD/${wfsdarkfname} conf/aol${LOOPNUMBER}_wfsdark.fits
}



function ReadzrespMfname {
file="./conf/conf_zrespM_fname.txt"
if [ -a $file ]
	then
	zrespMfname=$(echo "$(cat $file)")
	else
	zrespMfname="zrespM.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_zrespM.im.shm
Fits2shm ${zrespMfname} aol${LOOPNUMBER}_zrespM
ln -s $PWD/${zrespMfname} conf/aol${LOOPNUMBER}_zrespM.fits
}

function ReadWFSmaskfname {
file="./conf/conf_wfsmask_fname.txt"
if [ -a $file ]
	then
	wfsmaskfname=$(echo "$(cat $file)")
	else
	wfsmaskfname="wfsmask.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_wfsmask.im.shm
Fits2shm ${wfsmaskfname} aol${LOOPNUMBER}_wfsmask
ln -s $PWD/${wfsmaskfname} conf/aol${LOOPNUMBER}_wfsmask.fits
}



function ReadDMmaskfname {
file="./conf/conf_dmmask_fname.txt"
if [ -a $file ]
	then
	dmmaskfname=$(echo "$(cat $file)")
	else
	dmmaskfname="dmmask.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_dmmask.im.shm
Fits2shm ${dmmaskfname} aol${LOOPNUMBER}_dmmask
ln -s $PWD/${dmmaskfname} conf/aol${LOOPNUMBER}_dmmask.fits
}


function ReadWFSreffname {
file="./conf/conf_wfsref_fname.txt"
if [ -a $file ]
	then
	wfsreffname=$(echo "$(cat $file)")
	else
	wfsreffname="wfsref.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_wfsref.im.shm
Fits2shm ${wfsreffname} aol${LOOPNUMBER}_wfsref
ln -s $PWD/${wfsreffname} conf/aol${LOOPNUMBER}_wfsref.fits
}









#  System response and control

function ReadCPAmax {
file="./conf/conf_cpamax.txt"
if [ -a $file ]
	then
	cpamax=$(echo "$(cat $file)")
	else
	cpamax="10.0" #default
fi
}



function ReadDMmodesfname {
file="/conf_DMmodes_fname.txt"
if [ -a $file ]
	then
	DMmodesfname=$(echo "$(cat $file)")
	else
	DMmodesfname="DMmodes.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_DMmodes.im.shm
Fits2shm ${DMmodesfname} aol${LOOPNUMBER}_DMmodes
ln -s $PWD/${DMmodesfname} conf/aol${LOOPNUMBER}_DMmodes.fits
}


function ReadrespMname {
file="./conf/conf_respM_fname.txt"
if [ -a $file ]
	then
	respMfname=$(echo "$(cat $file)")
	else
	respMfname="respM.fits" #default
fi
rm /tmp/aol${LOOPNUMBER}_respM.im.shm
Fits2shm ${respMfname} aol${LOOPNUMBER}_respM
ln -s $PWD/${respMfname} conf/aol${LOOPNUMBER}_respM.fits
}












function ReadLoopGain {
file="./conf/conf_loopgain.txt"
if [ -a $file ]
	then
	loopgain=$(echo "$(cat $file)")
	else
	loopgain="0.000" #default
fi
}


function ReadLoopMaxLim {
file="./conf/conf_loopmaxlim.txt"
if [ -a $file ]
	then
	loopmaxlim=$(echo "$(cat $file)")
	else
	loopmaxlim="0.100"
fi
}


function ReadLoopMultCoeff {
file="./conf/conf_loopmultcoeff.txt"
if [ -a $file ]
	then
	loopmultcoeff=$(echo "$(cat $file)")
	else
	loopmultcoeff="0.999"
fi
}



function ReadDMturbampl {
file="./conf/conf_dmturbampl.txt"
if [ -a $file ]
	then
	dmturbampl=$(echo "$(cat $file)")
	else
	dmturbampl=0.1 #default
fi
tmux new-session -d -s DMturbamp
tmux send-keys -t DMturbamp "$execname " C-m
tmux send-keys -t DMturbamp "aoloopcontroldmturampl $dmturbampl" C-m
tmux send-keys -t DMturbamp "exit" C-m
tmux send-keys -t DMturbamp "exit" C-m
}


function ReadDMturbws {
file="./conf/conf_dmturbws.txt"
if [ -a $file ]
	then
	dmturbws=$(echo "$(cat $file)")
	else
	dmturbws=1.0 #default
fi
tmux new-session -d -s DMturbws
tmux send-keys -t DMturbws "$execname " C-m
tmux send-keys -t DMturbws "aoloopcontroldmturws $dmturbws" C-m
tmux send-keys -t DMturbws "exit" C-m
tmux send-keys -t DMturbws "exit" C-m
}


function ReadDMturbtint {
file="./conf/conf_dmturbtint.txt"
if [ -a $file ]
	then
	dmturbtint=$(echo "$(cat $file)")
	else
	dmturbtint=0.1 #default
fi
tmux new-session -d -s DMturbtint
tmux send-keys -t DMturbtint "$execname " C-m
tmux send-keys -t DMturbtint "aoloopcontroldmturtint ${dmturbtint}" C-m
tmux send-keys -t DMturbtint "exit" C-m
tmux send-keys -t DMturbtint "exit" C-m
}


function ReadTMsync {
file="./conf/conf_AOsystsimsync.txt"
if [ -a $file ]
	then
	AOsystsimsync=$(echo "$(cat $file)")
	else
	AOsystsimsync=2 #default
fi
}


function ReadTMdelayus {
file="./conf/conf_AOsystsimWFSdelayus.txt"
if [ -a $file ]
	then
	AOsystsimWFSdelayus=$(echo "$(cat $file)")
	else
	AOsystsimWFSdelayus=100000 #default
fi
}









function ReadTestDMsize {
file="./conf/conf_testdmsize.txt"
if [ -a $file ]
	then
	testdmsize=$(echo "$(cat $file)")
	else
	testdmsize=20 #default
fi
}

function initDM {
file="./conf/conf_testdmsize.txt"
if [ -a $file ]
	then
	testdmsize=$(echo "$(cat $file)")
	else
	testdmsize=20 #default
fi
# start DM channels
tmux kill-session -t aosim${LOOPNUMBER}dmcomb
tmux new-session -d -s aosim${LOOPNUMBER}dmcomb 
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "$execname" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "aolcontroldmsetsize ${testdmsize}" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "aolcontroldmsetname aosimdmctrl" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "aolcontrolDMcomb" C-m
}





function CheckLoopConfiguration {
confOK=1
echo "" > confOK_errmsg.txt

file="./conf/conf_loopgain.txt"
if [ ! -f $file ]; then
	echo "FILE $file is missing" >> confOK_errmsg.txt
	confOK=0
	fi

file="./conf/conf_loopmaxlim.txt"
if [ ! -f $file ]; then
	echo "FILE $file is missing" >> confOK_errmsg.txt
	confOK=0
	fi
	
file="./conf/conf_loopmultcoeff.txt"
if [ ! -f $file ]; then
	echo "FILE $file is missing" >> confOK_errmsg.txt
	confOK=0
	fi

clear
if [ $confOK -eq 0 ]; then
	echo "CONFIGURATION IS NOT COMPLETE"
	cat confOK_errmsg.txt
else
	echo "CONFIGURATION IS COMPLETE"
fi
sleep 2
}












function TestModeStart {

echo "TEST MODE START"

# start DM channels
tmux kill-session -t aosim${LOOPNUMBER}dmcomb
tmux new-session -d -s aosim${LOOPNUMBER}dmcomb 
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "$execname" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "aolcontroldmsetsize ${testdmsize}" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "aolcontroldmsetname aosimdmctrl" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmcomb "aolcontrolDMcomb" C-m


mkdir -p testconf
echo "$execname -n aol${LOOPNUMBER}test << EOF" > script_aol${LOOPNUMBER}test 
echo "AOsystsim ${AOsystsimsync} ${AOsystsimWFSdelayus}" >> script_aol${LOOPNUMBER}test 
chmod +x script_aol${LOOPNUMBER}test 

tmux new-session -d -s aol${LOOPNUMBER}test
echo " ON" > ./status/testloopstatus.txt
tmux send-keys -t aol${LOOPNUMBER}test "./script_aol${LOOPNUMBER}test" C-m

echo "aosimdmctrl2" > ./conf/conf_dmC_name.txt
ReaddmCname
echo "aosimdmctrl" > ./conf/conf_dmdisp_name.txt
Readdmdispname
echo "aosimdmctrl3" > ./conf/conf_dmRM_name.txt
ReaddmRMname
echo "aosimwfsim" > ./conf/conf_wfsim_name.txt
Readwfsimcamname

echo "0.1" > ./conf/conf_loopgain.txt
ReadLoopGain

echo "1.0" > ./conf/conf_loopmaxlim.txt
ReadLoopMaxLim 

echo "0.99" > ./conf/conf_loopmultcoeff.txt
ReadLoopMultCoeff
}

function TestModeStop {
pkill aol${LOOPNUMBER}test
echo "OFF" > ./status/testloopstatus.txt
}


function TestStartTurb {
echo " ON" > ./status/testdmturbstatus.txt
mkdir -p ./conf/turb
tmux kill-session -t aosim${LOOPNUMBER}dmturb
tmux new-session -d -s aosim${LOOPNUMBER}dmturb 
tmux send-keys -t aosim${LOOPNUMBER}dmturb "$execname" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturb "aolcontroldmsetsize ${testdmsize}" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturb "aolcontroldmsetname aosimdmctrl" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturb "aoloopcontrolDMturb" C-m

tmux kill-session -t aosim${LOOPNUMBER}dmturbctrl
tmux new-session -d -s aosim${LOOPNUMBER}dmturbctrl
tmux send-keys -t aosim${LOOPNUMBER}dmturbctrl "$execname" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturbctrl "aoloopcontroldmturampl 0.1" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturbctrl "aoloopcontroldmturtint 10000" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturbctrl "aoloopcontroldmturws 1.0" C-m
tmux send-keys -t aosim${LOOPNUMBER}dmturbctrl "aoloopcontroldmturlo 0.0" C-m

}

function TestStopTurb {
tmux kill-session -t aosim${LOOPNUMBER}dmturb
echo "OFF" > ./status/testdmturbstatus.txt
}




# =================== READ CONFIGURATION====================================

# hardware I/O [shared memory]
ReaddmCname
Readdmdispname
ReaddmRMname
Readwfsimcamname
ReadLoopDelay


# I/O pre-processing [FITS files]
ReadWFSdarkfname

# SYSTEM CALIBRATION
ReadzrespMfname
ReadWFSmaskfname
ReadDMmaskfname
ReadWFSreffname

# System response and control
ReadCPAmax
ReadDMmodesfname
ReadrespMfname

ReadLoopGain
ReadLoopMaxLim
ReadLoopMultCoeff









# =================== STATE MACHINE ====================================
state="menutop"


confnb=0
confselected=1

menuconfmanage_default=0








echo "START STATE MACHINE"

while true; do

stateok=0



# =====================================================
# ===================== TOP MENU ======================
# =====================================================

if [ $state = "menutop" ]; then
stateok=1
confselected=$(cat "./conf/conf_CONFNUMBER.txt")
menuname="TOP MENU\n [Active conf = ${confselected}]"


menuitems=( "C" "Configure/link AO loop" )
menuitems+=( "L" "Control AO loop" )
menuitems+=( "T" "Test mode: simulated AO system" )
menuitems+=( "V" "View / monitor" )



dialog --title "AO loop top menu  - LOOP ${LOOPNUMBER}" \
--ok-label "Select" \
--cancel-label "Exit" \
--default-item "${menutop_default}" \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)

case $retval in
   0) # button
	case $choiceval in
   	 C) 
menutop_default="C"
state="menuconfigureloop"
;;   
   	 L) 
menutop_default="L"
state="menucontrolloop"
;;
   	 T) 
menutop_default="T"
state="menutestmode"   
;;
   	 V) 
menutop_default="V"
state="menuview"   
;;
	esac;;
   1) state="menuexit";;   
   255) state="menuexit";;
esac
fi

















# =====================================================
# =============== CONFIGURE AO LOOP ===================
# =====================================================

if [ $state = "menuconfigureloop" ]; then
stateok=1
menuname="\Zb\Zu LOOP CONFIGURATION\Zn\n 
Notations: \n      
  \Z4shared memory stream\Zn\n
  \Zufile system FITS file\Zn\n   
  \Z1missing file or stream\Zn\n
\n
For all configurations files (not including Hardware I/O links) :\n
  File \Zbconf/conf_<name>_fname.txt\Zn contains the original .fits file path and name\n
  A symbolic link to the FITS file is written as \Zuconf/<name>.fits\Zn\n
  File is loaded in shared memory as /tmp/\Z4aol${LOOPNUMBER}_<name>\Zn.im.shm\n
"

confOK=1
stringcenter "HELP"
menuitems=( "H" "\Zb\Zr\Z4$string\Zn" )
menuitems+=( " " " " )

stringcenter "HARDWARE I/O LINKS [shared memory sim links]"
menuitems+=( "1 ->" "\Zb\Zr$string\Zn" )

dmCfile="/tmp/${dmC}.im.shm"
if [ -f $dmCfile ]; then
dmCOKstr="\Z2    OK    \Zn"
menuitems+=( "dmC" "[${dmCOKstr}] DM control channel        \Z4\Zbaol${LOOPNUMBER}_dmC\Zn -> \Z4${dmC}\Zn" )
else
dmCOKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmC" "[${dmCOKstr}] DM control channel        \Z4\Zbaol${LOOPNUMBER}_dmC\Zn -> \Z1${dmC}\Zn" )
confOK=0
fi


dmdispfile="/tmp/${dmdisp}.im.shm"
if [ -f $dmdispfile ]; then
dmdispOKstr="\Z2    OK    \Zn"
menuitems+=( "dmdisp" "[${dmdispOKstr}] DM total displacement  \Z4\Zbaol${LOOPNUMBER}_dmdisp\Zn -> \Z4${dmdisp}\Zn" )
else
dmdispOKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmdisp" "[${dmdispOKstr}] DM total displacement  \Z4\Zbaol${LOOPNUMBER}_dmdisp\Zn -> \Z1${dmdisp}\Zn" )
confOK=0
fi


dmRMfile="/tmp/${dmRM}.im.shm"
if [ -f $dmRMfile ]; then
dmRMOKstr="\Z2    OK    \Zn"
menuitems+=( "dmRM" "[${dmRMOKstr}] DM RM acqu channel      \Z4\Zbaol${LOOPNUMBER}_dmdRM\Zn -> \Z4${dmRM}\Zn" )
else
dmRMOKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmRM" "[${dmRMOKstr}] DM RM acqu channel      \Z4\Zbaol${LOOPNUMBER}_dmRM\Zn -> \Z1${dmRM}\Z1" )
confOK=0
fi


wfsimcamfile="/tmp/${wfsimcam}.im.shm"
if [ -f $wfsimcamfile ]; then
wfsimcamOKstr="\Z2    OK    \Zn"
menuitems+=( "wfs" "[${wfsimcamOKstr}] WFS camera image        \Z4\Zbaol${LOOPNUMBER}_wfsim\Zn -> \Z4${wfsimcam}\Zn" )
else
wfsimcamOKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "wfs" "[${wfsimcamOKstr}] WFS camera image        \Z4\Zbaol${LOOPNUMBER}_wfsim\Zn -> \Z1${wfsimcam}\Zn" )
confOK=0
fi


menuitems+=( "delay" "             LOOP delay                      ${loopdelayms} ms" )





menuitems+=( " " " " )
stringcenter "I/O PRE-PROCESSING [FITS files] "
menuitems+=( "2 ->" "\Zb\Zr$string\Zn" )
 

wfsdarkfname=$( cat ./conf/conf_wfsdark_fname.txt )
if [ -f "$wfsdarkfname" ] && [ -f "./conf/conf_wfsdark_fname.txt" ]; then
wfsdarkfnameOKstr="\Z2    OK    \Zn"
else
wfsdarkfnameOKstr="\Z5 OPTIONAL \Zn"
confOK=0
fi
menuitems+=( "dark" "[${wfsdarkfnameOKstr}] WFS dark                  {\Z4${wfsdarkfname}\Zn}" )



acqudarkstat=$( cat ./status/stat_acqudark.txt )
if [[ -f "./status/stat_acqudark.txt" && ( "$acqudarkstat" = " ON" || "$acqudarkstat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_acqudark.txt
fi

acqudarkstat=$( cat ./status/stat_acqudark.txt )
if [ "${acqudarkstat}" = "OFF" ];
then
menuitems+=( "adark_on" "             START acquire WFS dark acquisition" )
fi
if [ "${acqudarkstat}" = " ON" ];
then
menuitems+=( "adarkoff" "\Z1\Zr             STOP WFS dark acquisition                     \Zn" )
fi





menuitems+=( " " " " )
stringcenter "SYSTEM CALIBRATION (ZONAL)"
menuitems+=( "3 ->" "\Zb\Zr$string\Zn" )

rmamplum=0.05
if [ -f "./conf/conf_RMamplum.txt" ]; then
rmamplum=$( cat ./conf/conf_RMamplum.txt )
fi
menuitems+=( "rmamp" "            RM amplitude                    ${rmamplum} um" )

rmdelays=0.05
if [ -f "./conf/conf_RMdelays.txt" ]; then
rmdelays=$( cat ./conf/conf_RMdelays.txt )
fi
menuitems+=( "rmdelay" "            RM time delay                   ${rmdelays} sec" )

rmfrave=5
if [ -f "./conf/conf_RMfrave.txt" ]; then
rmfrave=$( cat ./conf/conf_RMfrave.txt )
fi
menuitems+=( "rmnbfr" "            RM frame averaging              ${rmfrave} frames" )



zrespMfname=$( cat ./conf/conf_zrespM_fname.txt )
if [ -f "$zrespMfname" ] && [ -f "./conf/conf_zrespM_fname.txt" ]; then
zrespMfnameOKstr="\Z2    OK    \Zn"
menuitems+=( "zmatn" "[${zrespMfnameOKstr}] Zonal RM name          \Z4\Zbaol${LOOPNUMBER}_zrespM\Zn -> \Zu${zrespMfname}\Zn" ) 
else
zrespMfnameOKstr="\Z5 OPTIONAL \Zn"
menuitems+=( "zmatn" "[${zrespMfnameOKstr}] Zonal RM name          \Z4\Zbaol${LOOPNUMBER}_zrespM\Zn -> \Zu\Z1${zrespMfname}\Zn" ) 
confOK=0
fi


zrespMstat=$( cat ./status/stat_zrespM.txt )
if [[ -f "./status/stat_zrespM.txt" && ( "$zrespMstat" = " ON" || "$zrespMstat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_zrespM.txt
fi


if [ "${zrespMstat}" = "OFF" ];
then
menuitems+=( "zresp_on" "             START zonal RM acquisition" )
menuitems+=( " " " " )
else
menuitems+=( "zrespoff" "\Z1\ZrSTOP zonal RM acquisition\Zn" )
menuitems+=( "zrespmon" "             Monitor tmux session zrespM${LOOPNUMBER}" )
fi




  
wfsmaskfname=$( cat ./conf/conf_wfsmask_fname.txt )
if [ -f "$wfsmaskfname" ] && [ -f "./conf/conf_wfsmask_fname.txt" ]; then
wfsmaskfnameOKstr="\Z2    OK    \Zn"
menuitems+=( "wfsM" "[${wfsmaskfnameOKstr}] WFS pixel mask        \Z4\Zbaol${LOOPNUMBER}_wfsmask\Zn -> \Zu${wfsmaskfname}\Zn" )
else
wfsmaskfnameOKstr="\Z5 OPTIONAL \Zn"
menuitems+=( "wfsM" "[${wfsmaskfnameOKstr}] WFS pixel mask        \Z4\Zbaol${LOOPNUMBER}_wfsmask\Zn -> \Zu\Z1${wfsmaskfname}\Zn" )
confOK=0
fi


dmmaskfname=$( cat ./conf/conf_dmmask_fname.txt )
if [ -f "$dmmaskfname" ] && [ -f "./conf/conf_dmmask_fname.txt" ]; then
dmmaskfnameOKstr="\Z2    OK    \Zn"
menuitems+=( "dmM" "[${dmmaskfnameOKstr}] DM pixel mask          \Z4\Zbaol${LOOPNUMBER}_dmmask\Zn -> \Zu${dmmaskfname}\Zn" )
else
dmmaskfnameOKstr="\Z5 OPTIONAL \Zn"
menuitems+=( "dmM" "[${dmmaskfnameOKstr}] DM pixel mask          \Z4\Zbaol${LOOPNUMBER}_dmmask\Zn -> \Zu\Z1${dmmaskfname}\Zn" )
confOK=0
fi




wfsreffname=$( cat ./conf/conf_wfsref_fname.txt )
if [ -f $wfsreffname ] && [ -f "./conf/conf_wfsref_fname.txt" ]; then
wfsreffnameOKstr="\Z2    OK    \Zn"
menuitems+=( "wfsref" "[${wfsreffnameOKstr}] WFS reference          \Z4\Zbaol${LOOPNUMBER}_wfsref\Zn -> \Zu${wfsreffname}\Zn" )
else
wfsreffnameOKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "wfsref" "[${wfsreffnameOKstr}] WFS reference          \Z4\Zbaol${LOOPNUMBER}_wfsref\Zn -> \Zu\Z1${wfsreffname}\Zn" )
confOK=0
fi


acquwfsrefstat=$( cat ./status/stat_acquwfsref.txt )
if [[ -f "./status/stat_acquwfsref.txt" && ( "$acquwfsrefstat" = " ON" || "$acquwfsrefstat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_acquwfsref.txt
fi

acquwfsrefstat=$( cat ./status/stat_acquwfsref.txt )
if [ "${acquwfsrefstat}" = "OFF" ];
then
menuitems+=( "awfsref_on" "             START new WFS ref acquisition" )
menuitems+=( " " " " )
fi
if [ "${acquwfsrefstat}" = " ON" ];
then
menuitems+=( "awfsrefoff" "\Z1\Zr             STOP WFS ref acquisition                  \Zn" )
menuitems+=( "awfsrefmon" "             Monitor tmux session aol${LOOPNUMBER}awfsref" )
fi









menuitems+=( " " " " )
stringcenter "SYSTEM MODAL RESPONSE AND CONTROL"
menuitems+=( "4 ->" "\Zb\Zr$string\Zn" )


menuitems+=( "mkModes" "   Make new DM control modes file" )

DMmodes=$( cat ./conf/conf_DMmodes_name.txt )
if [ -f "$DMmodes" ] && [ -f "./conf/conf_DMmodes_name.txt" ]; then
DMmodesOKstr="\Z2    OK    \Zn"
menuitems+=( "DMmodes" "[${DMmodesOKstr}] DM control modes     \Z4\Zbaol${LOOPNUMBER}_DMmodes\Zn ->  \Zu${DMmodes}\Zn" )
else
DMmodesOKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "DMmodes" "[${DMmodesOKstr}] DM control modes     \Z4\Zbaol${LOOPNUMBER}_DMmodes\Zn ->  \Zu\Z1${DMmodes}\Zn" )
confOK=0
fi


respMfile="/tmp/${respM}.im.shm"
if [ -f $respMfile ]; then
respMOKstr="\Z2    OK    \Zn"
menuitems+=( "RM" "[${respMOKstr}] Build response Matrix  \Z4\Zbaol${LOOPNUMBER}_respM\Zn ->  \Zu${respM}\Zn" )
else
respMOKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "RM" "[${respMOKstr}] Build response Matrix  \Z4\Zbaol${LOOPNUMBER}_respM\Zn ->  \Zu\Z1${respM}\Zn" )
confOK=0
fi







menuitems+=( " " " " )


menuitems+=( "c" "check configuration" )

state="menutop"


dialog --colors --title "LOOP CONFIGURATION  - LOOP ${LOOPNUMBER}" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menucontrolloop_default}" \
 --menu "$menuname" \
 $nbwlines $nbwcols 100 "${menuitems[@]}"  2> $tempfile


retval=$?
choiceval=$(cat $tempfile)


case $retval in
   0) # button
	case $choiceval in
	-)
state="menuconfigureloop"
;;
	H)
dialog --title "Help" --msgbox '
Loop configuration is stored in ./conf/ directory\n
Files specified in this configuration menu get linked/loaded to shared memory:\n



HARDWARE I/O:\n
     /tmp/aol${LOOPNUMBER}_dmC.im.shm           DM correction channel\n
     /tmp/aol${LOOPNUMBER}_dmRM.im.shm          DM resp matrix channel\n
     /tmp/aol${LOOPNUMBER}_wfsim.im.shm         WFS camera image\n
I/O PRE-PROCESSING:\n
     /tmp/aol${LOOPNUMBER}_wfsdark.im.shm       WFS dark\n
SYSTEM ZONAL RESPONSE AND CONTROL:\n
     /tmp/aol${LOOPNUMBER}_wfsmask.im.shm       WFS mask\n
     /tmp/aol${LOOPNUMBER}_dmmask.im.shm        DM mask\n
     /tmp/aol${LOOPNUMBER}_wfsref.im.shm        WFS ref\n
SYSTEM MODAL RESPONSE AND CONTROL:\n
     /tmp/aol${LOOPNUMBER}_DMmodes.im.shm       DM modes\n
     /tmp/aol${LOOPNUMBER}_RM.im.shm            Response Matrix\n
     /tmp/aol${LOOPNUMBER}_CM.im.shm            Control Matrix\n
' $nbwlines $nbwcols
menutestmode_default="H"
state="menuconfigureloop"
;;
	dmC)
exec 3>&1;
dmC=$(dialog --inputbox "dmC" 0 0 "$dmC" 2>&1 1>&3);
#exitcode=$?;
exec 3>&-;
#echo $result $exitcode;
echo "$dmC" > ./conf/conf_dmC_name.txt
ReaddmCname
menucontrolloop_default="dmC"
state="menuconfigureloop"
;;
	dmdisp)
exec 3>&1;
dmdisp=$(dialog --inputbox "dmdisp" 0 0 "$dmdisp" 2>&1 1>&3);
#exitcode=$?;
exec 3>&-;
#echo $result $exitcode;
echo "$dmdisp" > ./conf/conf_dmdisp_name.txt
Readdmdispname
menucontrolloop_default="dmdisp"
state="menuconfigureloop"
;;
	dmRM)
exec 3>&1;
dmRM=$(dialog --inputbox "dmRM" 0 0 "$dmRM" 2>&1 1>&3);
exec 3>&-;
echo "$dmRM" > ./conf/conf_dmRM_name.txt
ReaddmRMname
menucontrolloop_default="dmRM"
state="menuconfigureloop"
;;
	wfs)
exec 3>&1;
wfsimcam=$(dialog --inputbox "WFS image" 0 0 "$wfsimcam" 2>&1 1>&3);
exec 3>&-;
echo "$wfsimcam" > ./conf/conf_wfsim_name.txt
Readwfsimcamname
menucontrolloop_default="wfs"
state="menuconfigureloop"
;;

	delay)
exec 3>&1;
loopdelayms=$(dialog --inputbox "Loop Delay [ms]" 0 0 "$loopdelayms" 2>&1 1>&3);
exec 3>&-;
echo "$loopdelayms" > ./conf/conf_loopdelayms.txt
ReadLoopDelay
menucontrolloop_default="delay"
state="menuconfigureloop"
;;



	dark)
exec 3>&1;
wfsdarkfname=$(dialog --title "Select WFS dark" --stdout --fselect "${wfsdarkfname}" $nbwlines $nbwcols)
echo "$wfsdarkfname" > ./conf/conf_wfsdark_fname.txt
ReadWFSdarkfname
menucontrolloop_default="dark"
state="menuconfigureloop"
;;
	adark_on)
acqdarkstat=" ON"
echo " ON" > ./status/stat_acqudark.txt
tmux new-session -d -s adark
#tmux send-keys -t adark "./aol" C-m
menucontrolloop_default="adarkoff"
state="menuconfigureloop"
;;
	adarkoff)
acqdarkstat="OFF"
echo "OFF" > ./status/stat_acqudark.txt
tmux kill-session -t adark
menucontrolloop_default="adark_on"
state="menuconfigureloop"
;;






	rmamp)
exec 3>&1;
rmamplum=$(dialog --inputbox "RM amplitude [um]" 0 0 "$rmamplum" 2>&1 1>&3);
exec 3>&-;
echo "$rmamplum" > ./conf/conf_RMamplum.txt
menucontrolloop_default="rmamp"
state="menuconfigureloop"
;;
	rmdelay)
exec 3>&1;
rmdelays=$(dialog --inputbox "RM time delay [s]" 0 0 "$rmdelays" 2>&1 1>&3);
exec 3>&-;
echo "$rmdelays" > ./conf/conf_RMdelays.txt
menucontrolloop_default="rmdelay"
state="menuconfigureloop"
;;
	rmnbfr)
exec 3>&1;
rmfrave=$(dialog --inputbox "RM frame averaging" 0 0 "$rmfrave" 2>&1 1>&3);
exec 3>&-;
echo "$rmfrave" > ./conf/conf_RMfrave.txt
menucontrolloop_default="rmnbfr"
state="menuconfigureloop"
;;


	zmatn)
zrespMfname=$(dialog --title "Select Zonal RM" --stdout --title "Select zonal RM" --fselect "${zrespMfname}" $nbwlines $nbwcols)
echo "$zrespMfname" > ./conf/conf_zrespM_fname.txt
ReadzrespMfname
menucontrolloop_default="zmatn"
state="menuconfigureloop"
;;
	zresp_on)
zrespMstat=" ON"
echo " ON" > ./status/stat_zrespM.txt
tmux new-session -d -s aol${LOOPNUMBER}zrespM
tmux send-keys -t aol${LOOPNUMBER}zrespM "./aolMeasureZrespmat ${rmamplum} ${rmdelays} ${rmfrave}" C-m
menucontrolloop_default="zrespoff"
state="menuconfigureloop"
;;
	zrespoff)
zrespMstat="OFF"
echo "OFF" > ./status/stat_zrespM.txt
#rm wfsmask.fits
#rm dmmask.fits
pkill -USR1 aol${LOOPNUMBER}zrespM
#tmux send-keys -t zrespM${LOOPNUMBER} "listim" C-m
#tmux send-keys -t zrespM${LOOPNUMBER} "savefits wfsmask wfsmask.fits" C-m
#tmux send-keys -t zrespM${LOOPNUMBER} "savefits dmmask dmmask.fits" C-m
mkdir -p zrespM
mkdir -p wfsref
mkdir -p wfsmap
mkdir -p dmmap
mkdir -p wfsmask
mkdir -p dmmask
datestr=`date +%Y-%m-%d_%H:%M:%S`
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp zrespmat.fits zrespM/zrespM_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp wfsref.fits wfsref/wfsref_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp wfsmap.fits wfsmap/wfsmap_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp dmmap.fits dmmap/dmmap_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp wfsmask.fits wfsmask/wfsmask_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp dmmask.fits dmmask/dmmask_${datestr}.fits" C-m
echo "zrespM/zrespM_${datestr}.fits" > ./conf/conf_zrespM_fname.txt
echo "wfsref/wfsref_${datestr}.fits" > ./conf/conf_wfsref_fname.txt
echo "wfsmap/wfsmap_${datestr}.fits" > ./conf/conf_wfsmap_fname.txt
echo "dmmap/dmmap_${datestr}.fits" > ./conf/conf_dmmap_fname.txt
echo "wfsmask/wfsmask_${datestr}.fits" > ./conf/conf_wfsmask_fname.txt
echo "dmmask/dmmask_${datestr}.fits" > ./conf/conf_dmmask_fname.txt
tmux send-keys -t aol${LOOPNUMBER}zrespM "./fits2shmim zrespM/zrespM_${datestr}.fits aol${LOOPNUMBER}_zrespm" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "./fits2shmim wfsref/wfsref_${datestr}.fits aol${LOOPNUMBER}_wfsref" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "./fits2shmim wfsmap/wfsmap_${datestr}.fits aol${LOOPNUMBER}_wfsmap" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "./fits2shmim dmmap/dmmap_${datestr}.fits aol${LOOPNUMBER}_dmmap" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "./fits2shmim wfsmask/wfsmask_${datestr}.fits aol${LOOPNUMBER}_wfsmask" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "./fits2shmim dmmask/dmmask_${datestr}.fits aol${LOOPNUMBER}_dmmask" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "exit" C-m
echo "Processing....\n"
sleep 1.0
menucontrolloop_default="zresp_on"
state="menuconfigureloop"
;;
	zrespmon)
tmux a -t aol${LOOPNUMBER}zrespM
menucontrolloop_default="zrespmon"
state="menuconfigureloop"
;;
	wfsM)
exec 3>&1;
wfsmaskfname=$(dialog --title "Select WFS pixel mask file name" --stdout  --fselect "${wfsmaskfname}" $nbwlines $nbwcols)
echo "$wfsmaskfname" > ./conf/conf_wfsmask_fname.txt
ReadWFSmaskfname
menucontrolloop_default="wfsM"
state="menuconfigureloop"
;;
	dmM)
exec 3>&1;
dmmaskfname=$(dialog --title "Select DM act mask file name" --stdout --fselect "${dmmaskfname}" $nbwlines $nbwcols)
echo "$dmmaskfname" > ./conf/conf_dmmask_fname.txt
ReadDMmaskfname
menucontrolloop_default="dmM"
state="menuconfigureloop"
;;
	wfsref)
exec 3>&1;
wfsreffname=$(dialog --title "Select WFS reference file name" --stdout --fselect "${wfsreffname}" $nbwlines $nbwcols)
echo "$wfsreffname" > ./conf/conf_wfsref_fname.txt
ReadWFSreffname
menucontrolloop_default="wfsref"
state="menuconfigureloop"
;;
	awfsref_on)
acquwfsrefstat=" ON"
echo " ON" > ./status/stat_acquwfsref.txt
tmuxsname="aol${LOOPNUMBER}awfsref"
tmux new-session -d -s $tmuxsname
tmux send-keys -t $tmuxsname "$execname -n awfsref${LOOPNUMBER}" C-m
tmux send-keys -t $tmuxsname "readshmim aol${LOOPNUMBER}_wfsim" C-m
tmux send-keys -t $tmuxsname "imgstreamave aol${LOOPNUMBER}_wfsim 100000 imave 0" C-m
menucontrolloop_default="awfsrefoff"
state="menuconfigureloop"
;;
	awfsrefoff)
acquwfsrefstat="OFF"
echo "OFF" > ./status/stat_acquwfsref.txt
pkill -USR1 awfsref${LOOPNUMBER}
rm wfsref.fits
tmuxsname="aol${LOOPNUMBER}awfsref"
tmux send-keys -t $tmuxsname "savefits imave wfsref.fits" C-m
tmux send-keys -t $tmuxsname "exit" C-m
datestr=`date +%Y-%m-%d_%H:%M:%S`
tmux send-keys -t $tmuxsname "cp wfsref.fits wfsref/wfsref_${datestr}.fits" C-m
tmux send-keys -t $tmuxsname "exit" C-m
echo "wfsref/wfsref_${datestr}.fits" > ./conf/conf_wfsref_fname.txt
menucontrolloop_default="awfsref_on"
state="menuconfigureloop"
;;
	awfsrefmon)
tmuxsname="aol${LOOPNUMBER}awfsref"
tmux a -t $tmuxsname
menucontrolloop_default="awfsrefmon"
state="menuconfigureloop"
;;


	mkModes)

menucontrolloop_default="mkModes"
state="menu_mkFModes"
;;
	DMmodes)
DMmodes=$(dialog --title "Select DM Control Modes" --stdout --title "Select DM Control Modes" --fselect ./Cmodes/ $nbwlines $nbwcols)
echo "$DMmodes" > ./conf/conf_DMmodes_name.txt
ReadDMmodesfname
menucontrolloop_default="DMmodes"
state="menuconfigureloop"
;;
	RM)
exec 3>&1;
respM=$(dialog --inputbox "Response Matrix" 0 0 "$respM" 2>&1 1>&3);
exec 3>&-;
echo "$respM" > ./conf/conf_respM_name.txt
ReadrespMfname
menucontrolloop_default="RM"
state="menuconfigureloop"
;;

   	 c) 
menucontrolloop_default="c"
CheckLoopConfiguration
state="menuconfigureloop"
;;   


	esac;;
   1) state="menutop";;   
   2) state="menuexit";;
   255) state="menuexit";;
esac


fi








# =====================================================
# ======== Make Fourier Modes  ========================
# =====================================================

if [ $state = "menu_mkFModes" ]; then
stateok=1
menuname=" CONFIGURATION - Make Fourier based Modes"

menuitems=()
menuitems+=( "00.2" "0.2 CPA (Tip/Tilt only)" )
menuitems+=( "00.3" "0.3 CPA (Tip/Tilt + Focus)" )
menuitems+=( "00.5" "0.5 CPA (Tip/Tilt + Focus + AST)" )
for i in `seq 20 40 240 `;
        do
str0=$( echo $i|awk '{printf("%04.1f", $1*0.1)}')
str1=$( echo $i|awk '{printf("%4.1f CPA", $1*0.1)}')
menuitems+=( "$str0" "$str1" )
done 



dialog --title "AO loop configuration" \
--ok-label "Select" \
--cancel-label "Main" \
--help-button --help-label "Exit" \
--default-item ${cpamax} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menuconfigureloop"
cpamax=$(cat $tempfile)

echo "$cpamax" > ./conf/conf_cpamax.txt
tmux new-session -d -s aol${LOOPNUMBER}mkmodes
tmux send-keys -t aol${LOOPNUMBER}mkmodes "./aolmkmodes ${cpamax}" C-m
#tmux send-keys -t aol${LOOPNUMBER}mkmodes "exit" C-m

;; # button 1:
   1) state="menutop";;  
   2) state="menuexit";; 
   255) state="menuexit";;
esac

fi







# =====================================================
# ======== CONTROL AO LOOP ============================
# =====================================================
if [ $state = "menucontrolloop" ]; then
stateok=1
menuname="CONTROL LOOP"


loopgain=$(echo "$(cat ./conf/conf_loopgain.txt)")
loopmaxlim=$(echo "$(cat ./conf/conf_loopmaxlim.txt)")
loopmultcoeff=$(echo "$(cat ./conf/conf_loopmultcoeff.txt)")


menuitems=( "g" "loop gain    =   ${loopgain}" )
menuitems+=( "m" "loop max lim =   ${loopmaxlim}" )
menuitems+=( "e" "mult coeff   =   ${loopmultcoeff}" )
menuitems+=( "" "" )
menuitems+=( "S" "Start loop processes" )
menuitems+=( "t1" "step 1" )
menuitems+=( "t3" "step 3" )
menuitems+=( "t10" "step 10" )
menuitems+=( "t30" "step 30" )
menuitems+=( "t100" "step 100" )
menuitems+=( "t300" "step 300" )
menuitems+=( "t1000" "step 1000" )
menuitems+=( "N" "LOOP ON" )
menuitems+=( "F" "LOOP OFF" )
menuitems+=( "Z" "LOOP Zero" )
menuitems+=( "K" "Kill LOOP" )
menuitems+=( "" "" )
menuitems+=( "L" "Control Loop" )



state="menutop"


dialog --title "LOOP CONTROL  - LOOP ${LOOPNUMBER}" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menucontrolloop_default}" \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)

case $retval in
   0) # button
	case $choiceval in
  	 g) 
menucontrolloop_default="g"
state="menucontrolloop_setgain"
;; 
   	 m)   	
menucontrolloop_default="m"
state="menucontrolloop_setmaxlim"
;;  
   	 e) 
menucontrolloop_default="e"
state="menucontrolloop_setmult"
;;   
   	 S)
rm aolctr-${LOOPNUMBER}-fifo

tmux new-session -d -s aol${LOOPNUMBER}-ctr
tmux send-keys -t aol${LOOPNUMBER}-ctr "ls" C-m
#$xtermopt -e numactl --cpunodebind=$NUMAnode --membind=$NUMAnode ./aolctr &
sleep 1
#xterm $xtermopt -e numactl --cpunodebind=$NUMAnode --membind=$NUMAnode ./aolrun &
#sleep 1
#echo "aolon" >> aolctr-${LOOPNUMBER}-fifo
#sleep 5
#echo "aoloff" >> aolctr-${LOOPNUMBER}-fifo
#sleep 1
menucontrolloop_default="S"
state="menucontrolloop"
;; 
   	 t1)
echo "aolstep 1" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t1"
state="menucontrolloop"
;;   
   	 t3)
echo "aolstep 3" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t3"
state="menucontrolloop"
;;   
   	 t10)
echo "aolstep 10" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t10"
state="menucontrolloop"
;;   
   	 t30)
echo "aolstep 30" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t30"
state="menucontrolloop"
;;   
   	 t100)
echo "aolstep 100" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t100"
state="menucontrolloop"
;;   
   	 t300)
echo "aolstep 300" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t300"
state="menucontrolloop"
;;   
   	 t1000)
echo "aolstep 1000" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t1000"
state="menucontrolloop"
;;   
   	 N)
echo "aolon" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="N"
state="menucontrolloop"
;; 
   	 F)
echo "aoloff" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="F"
state="menucontrolloop"
;; 
   	 Z)
echo "imzero aol${LOOPNUMBER}_DMmode_cmd" >> aolctr-${LOOPNUMBER}-fifo
echo "readshmim aol${LOOPNUMBER}_dmC" >> aolctr-${LOOPNUMBER}-fifo
echo "imzero aol${LOOPNUMBER}_dmC" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="Z"
state="menucontrolloop"
;;
   	 K)
ocamstopacq
sleep 1
echo "aoloff" >> aolctr-${LOOPNUMBER}-fifo
echo "aolkill" >> aolctr-${LOOPNUMBER}-fifo
echo "exit" >> aolctr-${LOOPNUMBER}-fifo
sleep 1
ocamstartacq
menucontrolloop_default="K"
state="menucontrolloop"
;;
  	 C) state="menuconfmain";; 
   	 W) state="menucamera";;  
   	 L) state="menucontrolloop";;   
   	 A) state="menualign";;  
	esac;;
   1) state="menutop";;   
   2) state="menuexit";;
   255) state="menuexit";;
esac


fi













# =====================================================
# ======== TEST MODE ==================================
# =====================================================
if [ $state = "menutestmode" ]; then
stateok=1

testloopstatus="OFF"
testdmturbstatus="OFF"

file="./status/testloopstatus.txt"
if [ -a $file ]
	then
	testloopstatus=$(echo "$(cat $file)")
	else
	testloopstatus="OFF"
fi

file="./status/testdmturbstatus.txt"
if [ -a $file ]
	then
	testdmturbstatus=$(echo "$(cat $file)")
	else
	testdmturbstatus="OFF"
fi


ReadTestDMsize

ReadDMturbampl
ReadDMturbws
ReadDMturbtint

ReadTMsync    # sync mode
ReadTMdelayus # delay [us]

menuname="TEST MODE [${testloopstatus}]"


menuitems=( "H" "\Zb\Zr\Z4         HELP                                               \Zn" )
menuitems+=( "-" " " )
menuitems+=( "1 ->" "\Zb\Zr         SETTINGS                                           \Zn" )
menuitems+=( "dms" "[${testdmsize}] test mode DM size" )
menuitems+=( "initDM" "init DM" )
menuitems+=( "-" " " )


menuitems+=( "2 ->" "\Zb\Zr        TURBULENCE      (tmux aosim${LOOPNUMBER}dmturb)                 \Zn" )

if [ "${testdmturbstatus}" = "OFF" ];
then
menuitems+=( "DMton" "             START simulated turbulence" )
menuitems+=( "-" " ")
menuitems+=( "-" " ")
else
menuitems+=( "DMtoff" "\Z1\Zr             STOP simulated turbulence                      \Zn" )
menuitems+=( "tvdmt" "view tmux session aolsim${LOOPNUMBER}turb (type CTRL-B + D to exit)")
menuitems+=( "tvdmtc" "view tmux session aolsim${LOOPNUMBER}turbctrl (type CTRL-B + D to exit)")
fi


menuitems+=( "DMtamp" "DM turbulence amplitude  = ${dmturbampl} um" )
menuitems+=( "DMtws" "DM turbulence wind speed = ${dmturbws} m/s" )
menuitems+=( "DMttint" "DM turbulence interval  = ${dmturbtint} us" )

menuitems+=( "dm1v" "View DM chan 1 (turbulence) stream" )
menuitems+=( "dm1m" "Monitor DM chan 1 (turbulence) stream" )



menuitems+=( "-" " " )

menuitems+=( "3 ->" "\Zb\Zr         START/STOP     (tmux ao${LOOPNUMBER}test)                      \Zn" )


#if [ "${testdmturbstatus}" = "OFF" ];
#then
#menuitems+=( "-" " Need turbulence scrren to be running to start")
#menuitems+=( "-" " ")
#else
if [ "${testloopstatus}" = "OFF" ];
then
menuitems+=( "Start" "             START simulated WFS               " )
menuitems+=( "-" " ")
else
menuitems+=( "Stop" "\Z1\Zr             STOP simulated WFS                             \Zn" )
menuitems+=( "tv" "view tmux session aol${LOOPNUMBER}test (type CTRL-B + D to exit)")
fi
#fi
menuitems+=( "TMsync" "[${AOsystsimsync}] WFS sync mode")
menuitems+=( "TMdelay" "[${AOsystsimWFSdelayus}] WFS delay")



dialog --colors --title "TEST MODE  - LOOP ${LOOPNUMBER}" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menutestmode_default}" \
 --menu "$menuname" \
 $nbwlines $nbwcols  100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)

case $retval in
   0) # button
	case $choiceval in
   	 H)
dialog --title "Help" --msgbox 'Simulation mode\n
\n
Creates shared memory arrays: \n
   aosimdmctrl   : DM control map\n
   WFturb        : Wavefront phase turbulence (512x512)\n
   aosimpsfout   : output PSF (intensity)\n
   aosimwfsim    : output WFS image (intensity)\n
\n
Recomputes aosimpsfout when either aosimdmctrl or WFturb changes' 40 80
menutestmode_default="H"
;;
	dms)
exec 3>&1;testdmsize=$(dialog --inputbox "test mode DM size" 0 0 "$testdmsize" 2>&1 1>&3);
exec 3>&-;

echo "$testdmsize" > ./conf/conf_testdmsize.txt
initDM
menutestmode_default="dms"
state="menutestmode"
;;
	initDM)
initDM
menutestmode_default="initDM"
state="menutestmode"
;;
	tv)
tmux a -t aol${LOOPNUMBER}test
menutestmode_default="tv"
state="menutestmode"
;;
	DMton)
TestStartTurb
menutestmode_default="DMtoff"
state="menutestmode"
;;
	DMtoff)
TestStopTurb
menutestmode_default="DMton"
state="menutestmode"
;;
	tvdmt)
tmux a -t aosim${LOOPNUMBER}dmturb
menutestmode_default="tvdmt"
state="menutestmode"
;;
	tvdmtc)
tmux a -t aosim${LOOPNUMBER}dmturbctrl
menutestmode_default="tvdmtc"
state="menutestmode"
;;
	DMtamp)
exec 3>&1;dmturbampl=$(dialog --inputbox "DM turbulence amplitude [um]" 0 0 "$dmturbampl" 2>&1 1>&3);
exec 3>&-;
echo "$dmturbampl" > ./conf/conf_dmturbampl.txt
menutestmode_default="DMtamp"
state="menutestmode"
;;
	DMtws)
exec 3>&1;dmturbws=$(dialog --inputbox "DM turbulence wind speed [m/s]" 0 0 "$dmturbws" 2>&1 1>&3);
exec 3>&-;
echo "$dmturbws" > ./conf/conf_dmturbws.txt
menutestmode_default="DMtws"
state="menutestmode"
;;
	DMttint)
exec 3>&1;dmturbtint=$(dialog --inputbox "DM turbulence interval [us]" 0 0 "$dmturbtint" 2>&1 1>&3);
exec 3>&-;
echo "$dmturbtint" > ./conf/conf_dmturbtint.txt
menutestmode_default="DMttint"
state="menutestmode"
;;


	dm1v)
$shmimviewexec /tmp/aosimdmctrl1.im.shm 4 &> /dev/null &
menutestmode_default="dm1v"
state="menutestmode"
;;   
	dm1m)
$shmimmonexec aosimdmctrl1
menutestmode_default="dm1m"
state="menutestmode"
;;   
   	 Start)
#if [ $testloopstatus = "OFF" ]; then
TestModeStart
#fi
menutestmode_default="Stop"
state="menutestmode"
;;   
   	 Stop) 
#if [ $testloopstatus = " ON" ]; then
TestModeStop
#fi
menutestmode_default="Start"
state="menutestmode"
;;  
	TMsync)
exec 3>&1;AOsystsimsync=$(dialog --inputbox "Sync mode" 0 0 "$AOsystsimsync" 2>&1 1>&3);
exec 3>&-;
echo "$AOsystsimsync" > ./conf/conf_AOsystsimsync.txt
menutestmode_default="TMsync"
state="menutestmode"
;;
	TMdelay)
exec 3>&1;AOsystsimWFSdelayus=$(dialog --inputbox "WFS cam delay [us]" 0 0 "$AOsystsimWFSdelayus" 2>&1 1>&3);
exec 3>&-;
echo "$AOsystsimWFSdelayus" > ./conf/conf_AOsystsimWFSdelayus.txt
menutestmode_default="TMdelay"
state="menutestmode"
;;
	esac;;
   1) state="menutop";;   
  2) state="menuexit";;
   255) state="menuexit";;
esac

fi











#  VIEW MODE
if [ $state = "menuview" ]; then
stateok=1



menuname="VIEW MODE"



menuitems=( "H" "help" )
menuitems+=( "-" " " )
menuitems+=( "wfsv" "View wavefront sensor image stream      (aol${LOOPNUMBER}_wfsim)" )
menuitems+=( "wfsm" "monitor wavefront sensor image stream   (aol${LOOPNUMBER}_wfsim)" )
menuitems+=( "-" " " )
menuitems+=( "dmcv" "View DM control stream" )
menuitems+=( "dmcm" "Monitor DM control stream" )
menuitems+=( "-" " " )



dialog --title "VIEW MODE  - LOOP ${LOOPNUMBER}" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menutestmode_default}" \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)

case $retval in
   0) # button
	case $choiceval in
   	 H)
dialog --title "Help" --msgbox 'View shared memory streams / monitor loop\n
\n
executable to view shared memory streams: $shmimviewexec\n
' 40 80
menutestmode_default="H"
;;

   	 wfsv)
$shmimviewexec /tmp/aol${LOOPNUMBER}_wfsim.im.shm &> /dev/null &
menutestmode_default="wfsv"
state="menuview"
;;   
   	 wfsm)
$shmimmonexec aol${LOOPNUMBER}_wfsim
menutestmode_default="wfsm"
state="menuview"
;;
   
	dmcv)
$shmimviewexec /tmp/aol${LOOPNUMBER}_dmC.im.shm 4 &> /dev/null &
menutestmode_default="dmcm"
state="menuview"
;;   
	dmcm)
$shmimmonexec aol${LOOPNUMBER}_dmC
menutestmode_default="dmcm"
state="menuview"
;;   

   	 Stop) 
if [ $testloopstatus = "ON" ]; then
TestModeStop
menutestmode_default="Stop"
fi
state="menutestmode"
;;  
	esac;;
   1) state="menutop";;   
  2) state="menuexit";;
   255) state="menuexit";;
esac

fi






















#  SET CONTROL LOOP GAIN
if [ $state = "menucontrolloop_setgain" ]; then
stateok=1
menuname="SET LOOP GAIN - LOOP ${LOOPNUMBER}"

ReadLoopGain


loopgain3=$(echo "scale=0; $loopgain*1000/1" | bc -q 2>/dev/null |awk '{printf("%03d", $1)}')

menuitems=()
menuitems+=( "000" "0.000" )
menuitems+=( "001" "0.001" )
menuitems+=( "005" "0.005" )
menuitems+=( "010" "0.010" )
for i in `seq 50 50 950 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 


dialog --title "Control loop gain" \
--ok-label "Select" \
--cancel-label "Cancel" \
--help-button --help-label "Exit" \
--default-item ${loopgain3} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile


retval=$?

case $retval in
   0) state="menucontrolloop"
loopgain=$(cat $tempfile|awk '{printf("%5.3f", $1*0.001)}')
echo "$loopgain" > ./conf/conf_loopgain.txt
echo "aolsetgain ${loopgain}" >> aolctr-${LOOPNUMBER}-fifo
;; # button 1:
   1) state="menucontrolloop";; 
   2) state="menuexit";; 
   255) state="menuexit";;
esac


fi










#  SET CONTROL LOOP MAX LIM
if [ $state = "menucontrolloop_setmaxlim" ]; then
stateok=1
menuname="SET LOOP MAX LIMIT - LOOP ${LOOPNUMBER}"

ReadLoopMaxLim

loopmaxlim3=$(echo "scale=0; $loopmaxlim*1000/1" | bc -q 2>/dev/null |awk '{printf("%03d", $1)}')

menuitems=()
menuitems+=( "000" "0.000" )
menuitems+=( "001" "0.001" )
menuitems+=( "005" "0.005" )
menuitems+=( "010" "0.010" )
for i in `seq 50 50 950 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 



dialog --title "Control loop max limit" \
--ok-label "Select" \
--cancel-label "Cancel" \
--help-button --help-label "Exit" \
--default-item ${loopmaxlim3} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menucontrolloop"
loopmaxlim=$(cat $tempfile|awk '{printf("%5.3f", $1*0.001)}')
echo "$loopmaxlim" > ./conf/conf_loopmaxlim.txt
echo "aolsetmaxlim ${loopmaxlim}" >> aolctr-${LOOPNUMBER}-fifo
;; # button 1:
   1) state="menucontrolloop";; 
   2) state="menuexit";; 
   255) state="menuexit";;
esac

fi





#  SET MULT COEFF
if [ $state = "menucontrolloop_setmult" ]; then
stateok=1
menuname="SET LOOP MULT COEFF - LOOP ${LOOPNUMBER}"

ReadLoopMultCoeff

loopmultcoeff3=$(echo "scale=0; $loopmultcoeff*1000/1" | bc -q 2>/dev/null |awk '{printf("%03d", $1)}')

menuitems=()
for i in `seq 000 100 800 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 
menuitems+=( "" "" )
for i in `seq 900 10 980 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 
menuitems+=( "" "" )
for i in `seq 990 1 999 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 
menuitems+=( "" "" )
menuitems+=( "1000" "1.000" )


dialog --title "Control loop mult coeff" \
--ok-label "Select" \
--cancel-label "Cancel" \
--help-button --help-label "Exit" \
--default-item ${loopmultcoeff3} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menucontrolloop"
loopmultcoeff=$(cat $tempfile|awk '{printf("%5.3f", $1*0.001)}')
echo "$loopmultcoeff" > ./conf/conf_loopmultcoeff.txt
echo "aolsetmult ${loopmultcoeff}" >> aolctr-${LOOPNUMBER}-fifo
;; # button 1:
   1) state="menucontrolloop";; 
   2) state="menuexit";; 
   255) state="menuexit";;
esac

fi














if [ $state = "menuexit" ]; then
stateok=1
echo "exit"
exit
fi



if [ $stateok = 0 ]; then
echo "state \"$state\" not recognized ... exit"
exit
fi


done
















