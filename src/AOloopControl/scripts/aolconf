#!/bin/bash


# ====================== USER EDITS THIS SECTION =======================


LOOPNAME="pyramid" # name of the control loop
LOOPNUMBER_default=2  # loop number
CONFSELECTED_default="001" # default configuration number to be selected
dmC="dmdisp3" # DM control channel
dmRM="dmdisp7" # DM actuation channel for RM matrix
wfsimcam="ocam2k" # WFS camera image
NUMAnode=1 # for numactl
scexao2IP="133.40.160.229"
xtermopt="-fa 'Monospace' -fs 6"

# disable hyperthreading
sudo -s << EOF
echo 0 > /sys/devices/system/cpu/cpu16/online
echo 0 > /sys/devices/system/cpu/cpu17/online
echo 0 > /sys/devices/system/cpu/cpu18/online
echo 0 > /sys/devices/system/cpu/cpu19/online
echo 0 > /sys/devices/system/cpu/cpu20/online
echo 0 > /sys/devices/system/cpu/cpu21/online
echo 0 > /sys/devices/system/cpu/cpu22/online
echo 0 > /sys/devices/system/cpu/cpu23/online
echo 0 > /sys/devices/system/cpu/cpu24/online
echo 0 > /sys/devices/system/cpu/cpu25/online
echo 0 > /sys/devices/system/cpu/cpu26/online
echo 0 > /sys/devices/system/cpu/cpu27/online
echo 0 > /sys/devices/system/cpu/cpu28/online
echo 0 > /sys/devices/system/cpu/cpu29/online
echo 0 > /sys/devices/system/cpu/cpu30/online
echo 0 > /sys/devices/system/cpu/cpu31/online
exit
EOF

dm_update_channel 5 dmpyoffset.fits



# set priority on ocam soft
ocampid=$(ps aux | grep '[o]cam' | awk '{print $2}')
echo $ocampid
chrt -f -p 50 $ocampid


# ======================== END OF USER EDIT SECTION =====================




















# =============== LIST OF VARIABLES ==============================

# LOOPNUMBER


# ============== AUX FILES ==========================================


# STDOUT and STDERR 
# outmesg="/tmp/aol${LOOPNUMBER}confout"
# to view: tail -f <outmesg>

#
#
#


# =================== some initial setup =======================

LOOPNUMBER_file="LOOPNUMBER"
confnbfile="./conf/conf_CONFNUMBER.txt"

sudo adduser scexao dialout
mkdir -p conf
mkdir -p status
mkdir -p RespMat # response matrixes

# LOOPNUMBER (loop number)
if [ ! -f $LOOPNUMBER_file ]
then
	echo "creating loop number"
	echo "$LOOPNUMBER_default" > $LOOPNUMBER_file
else
	LOOPNUMBER=$(cat $LOOPNUMBER_file)
	echo "LOOPNUMBER = $LOOPNUMBER"
fi


outmesg="/tmp/aol${LOOPNUMBER}confout"
rm $outmesg
touch $outmesg


# CONFSELECTED (conf numnber)
if [ ! -f $confnbfile ]
then
	echo "creating configuration number"
	echo "$CONFSELECTED_default" > ./conf/conf_CONFNUMBER.txt
else
	CONFSELECTED=$(cat $confnbfile)
	echo "selected configuration = $CONFSELECTED"
fi



# connect to WFS camera
echo "connecting to camera"
ln -sf /tmp/${wfsimcam}.im.shm /tmp/aol${LOOPNUMBER}_wfs.im.shm

# connect to WFS camera serial link
echo "connect to camera serial link"
ln -sf /dev/ttyS4 /tmp/ocamtty 



# loop name
echo "$LOOPNAME" > ./conf/conf_LOOPNAME.txt
echo "loop name : $LOOPNAME"




# set IO files

# DM correction channel
echo "linking to dm correction channel"
rm /tmp/aol${LOOPNUMBER}_dmC.im.shm 
ln -s /tmp/${dmC}.im.shm /tmp/aol${LOOPNUMBER}_dmC.im.shm

# DM response matrix channel
echo "linking to dm resp mat channel"
rm /tmp/aol${LOOPNUMBER}_dmRM.im.shm 
ln -s /tmp/${dmRM}.im.shm /tmp/aol${LOOPNUMBER}_dmRM.im.shm

# WFS raw image
echo "linking to WFS camera"
rm /tmp/aol${LOOPNUMBER}_wfs.im.shm
ln -s /tmp/${wfsimcam}.im.shm /tmp/aol${LOOPNUMBER}_wfs.im.shm

# copy configuration variables
cp ./conf$1/conf_*.txt ./conf/
cp ./conf$1/AOloop.conf ./conf/


tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15



# Filter wheels
echo "declaring filter wheels"
pyfwlist=("0" "          ")
pyfwlist+=( "1" "  OPEN    " )
pyfwlist+=( "2" "700nm 50nm" )
pyfwlist+=( "3" "  BLOCK   " )
pyfwlist+=( "4" "750nm 50nm" )
pyfwlist+=( "5" "850nm 25nm" )
pyfwlist+=( "6" "850nm 40nm" )








# ================ FREQUENTLY USED FUNCTIONS ===================
echo "FUNCTIONS..."

# arg 1: conf#


function Fits2shm {
Cfits << EOF # move file to shared memory
loadfits "$1" im
imcp2shm im $2
quit
EOF
}




function ApplyPyramidFM {
file="./conf$1/conf_pyrloopfrequ.txt"
ok=1

if [ -f $file ]
	then
	pyfreq=$(echo "$(cat $file)")
	else
	echo "CANNOT READ FILE ${file}"
	ok=0
fi

file="./conf$1/conf_pyrmodamp.txt"
if [ -f $file ]
	then
	pymod=$(echo "$(cat $file)")
	else
	echo "CANNOT READ FILE ${file}"
	ok=0
fi


if [ $ok -eq 1 ]
then
ssh scexao@${scexao2IP} "/home/scexao/bin/devices/pywfs_mod_setup ${pyfreq} ${pymod}"
echo -e "fps ${pyfreq}\r" > /tmp/ocamtty
else
echo "Could not apply setting"
fi
}



# Set FW <wheelNB>
function SetFW {
file="./status/status_fw.txt"
currentfw=$(echo "$(cat $file)")
if [ ! "${currentfw}" == "$1" ]
then
echo "MOVING TO FW $1" &> ${outmesg}
pywfs wheel $1  &> ${outmesg}
else
echo "WHEEL ALREADY IN POSITION" > ${outmesg}
fi
currentfw=$1
echo "${currentfw}" > $file
sleep 4
}



# SetDark <confnb> <camgain>
function SetDark {
file="./conf$1/conf_pyrloopfrequ.txt"
ok=1

if [ -f $file ]
	then
	pyfreq=$(echo "$(cat $file)")
	else
	echo "CANNOT READ FILE ${file}"
	ok=0
fi

file="$PWD/darks/dark_${pyfreq}_$2.fits"
if [ ! -f $file ]
	then
	echo "CANNOT READ FILE ${file}"
	ok=0
fi

if [ ${ok} -eq 1 ]
then
ln -snf ${file} "$PWD/conf/dark.fits" &> ${outmesg}
Fits2shm "./conf/dark.fits" aol${LOOPNUMBER}_wfsdark &> ${outmesg}
fi

}


# SetDMmodes <confnb>
function SetDMmodes {
file="./conf$1/fmodes.fits"
ok=1
if [ -f $file ]
then
ln -snf $PWD/conf$1/fmodes.fits $PWD/conf/fmodes.fits
ln -snf $PWD/conf$1/modesfreqcpa.fits $PWD/conf/modesfreqcpa.fits
Fits2shm "./conf/fmodes.fits" "aol${LOOPNUMBER}_DMmodes"
else
echo "CANNOT READ FILE ${file}"
fi
}















# =================== STATE MACHINE ====================================
state="menutop"


confnbmax=25
confnb=0
confselected=1

menuconfmanage_default=0








echo "START STATE MACHINE"

while true; do

stateok=0




# ===================== TOP MENU ======================
if [ $state = "menutop" ]; then
stateok=1
confselected=$(cat "./conf/conf_CONFNUMBER.txt")
menuname="TOP MENU \n [Active conf = ${confselected}]"

menuitems=( "C" "Configurations" )
menuitems+=( "W" "WFS Camera" )
menuitems+=( "L" "Control Loop" )
menuitems+=( "A" "Alignment" )




dialog --title "AO loop top menu" \
--ok-label "Select" \
--cancel-label "Exit" \
--default-item '${confnb}' \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)

case $retval in
   0) # button
	case $choiceval in
  	 C) state="menuconfmain";; 
   	 W) state="menucamera";;  
   	 L) state="menucontrolloop";;   
   	 A) state="menualign";;   
	esac;;
   1) state="menuexit";;   
   255) state="menuexit";;
esac
fi








# ============== CHOOSE CONFIGURATION INDEX ===========================
if [ $state = "menuconfmain" ]; then
stateok=1

confselected=$(cat "./conf/conf_CONFNUMBER.txt")

menuname="CONFIGURATION MENU\n [Active conf = ${confselected}]"
menuitems=()
for i in `seq 1 ${confnbmax}`;
        do
confnb=$( echo $i| awk '{printf("%03d",$1)}')

file="./conf${confnb}/conf_pyrloopfrequ.txt"
if [ -a $file ]
	then
	pyfreq=$(echo "$(cat $file)")
	else
	pyfreq="----"
fi

file="./conf${confnb}/conf_pyrmodamp.txt"
if [ -a $file ]
	then
	pymod=$(echo "$(cat $file)")
	else
	pymod="--- "
fi


file="./conf${confnb}/conf_pyrmamp.txt"
if [ -a $file ]
	then
	pyrmamp=$(echo "$(cat $file)")
	else
	pyrmamp="---"
fi


file="./conf${confnb}/conf_GPU.txt"
if [ -a $file ]
	then
	pygpu=$(echo "$(cat $file)")
	else
	pygpu="-"
fi


file="./conf${confnb}/conf_PYRWHEEL.txt"
if [ -a $file ]
	then
	pyfw=$(echo "$(cat $file)")
	else
	pyfw=" -------- "
fi

file="./conf${confnb}/conf_CPA.txt"
if [ -a $file ]
	then
	pycpa=$(echo "$(cat $file)")
	else
	pycpa=" --"
fi




str0=$( echo $i|awk '{printf("%03d",$1)}')

x=$(echo $pyfw| awk '{printf("%d",$1)}')
word="$x"
case $word in
    1|2|4|5|6) fwname="${pyfwlist[$(($x * 2 + 1))]}";;
    *)          fwname=" -------";;
esac


str1=$( echo "./conf${confnb}   ${pyfreq} Hz  ${pymod} V  ${pyrmamp} nm  ${pygpu} GPUs  ${fwname}  ${pycpa}")
#str1=$( echo $i|awk '{printf("./conf/%03d",$1)}')
menuitems+=( "$str0" "$str1" )
done 
menuitems+=( "" "" )
menuitems+=( "C" "Configurations" )
menuitems+=( "W" "WFS Camera" )
menuitems+=( "L" "Control Loop" )
menuitems+=( "A" "Alignment" )


dialog --title "AO loop configuration" \
--ok-label "Select/Configure" \
--extra-button --extra-label "Apply" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item ${confselected} \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?
confnb=$(cat $tempfile)

case $retval in
   0) state="menuconfmanage";; # button 1: select/configure
   3) state="menuconfapply";;  # button 2: Apply
   1) state="menutop";;  # button 3: Top
   2) state="menuexit";; # button 4: Exit
   255) state="menuexit";;
esac
if [ $state = "menuconfmanage" ]; then
case $confnb in
	 C) state="menuconfmain";; 
   	 W) state="menucamera";;  
   	 L) state="menucontrolloop";;   
   	 A) state="menualign";;
esac
fi
if [ $state = "menuconfmanage" ]; then
mkdir -p ./conf${confnb}
fi
fi










# APPLY CONFIGURATION
if [ $state = "menuconfapply" ]; then
stateok=1

echo "applying configuration ${confnb}"
ApplyPyramidFM ${confnb} &> ${outmesg}
confselected=${confnb}
echo $confselected > "./conf/conf_CONFNUMBER.txt"
cp ./conf${confnb}/cmat.fits ./conf/
cp ./conf${confnb}/AOloop.conf ./conf/
cp ./conf${confnb}/conf*.txt ./conf/

#rm ./conf/fmodes.fits
#ln -snf $PWD/conf${confnb}/fmodes.fits $PWD/conf/fmodes.fits
#rm ./conf/modesfreqcpa.fits
#ln -snf $PWD/conf${confnb}/modesfreqcpa.fits $PWD/conf/modesfreqcpa.fits
rm ./conf/respm.fits
ln -snf $PWD/conf${confnb}/respm.fits $PWD/conf/respm.fits
rm ./conf/refwfs.fits
ln -snf $PWD/conf${confnb}/refwfs.fits $PWD/conf/refwfs.fits
SetFW $(cat ./conf/conf_PYRWHEEL.txt)
SetDMmodes ${confnb}
SetDark ${confnb} 001 &> ${outmesg}

#filerm="./RespMat/respm_${pycpa[$confnb]}_${pyfw[$confnb]}_${pymod[$confnb]}_${pyfreq[$confnb]}.fits"
#filermref="./RespMat/refwfs_${pycpa[$confnb]}_${pyfw[$confnb]}_${pymod[$confnb]}_${pyfreq[$confnb]}.fits"
#cp $filerm ./conf/respm.fits
#cp $filermref ./conf/refwfs.fits

sleep 1
state="menuconfmain"
fi













#  CONFIGURATION SETUP MENU
if [ $state = "menuconfmanage" ]; then
stateok=1
confnb1=`echo $confnb|sed 's/^0*//'`  # remove leading zeros

menuname="MANAGE CONFIGURATION ${confnb} ${confnb1}"

file="./conf${confnb}/conf_pyrloopfrequ.txt"

if [ -a $file ]
	then
	pyfreq[$confnb1]=$(echo "$(cat $file)")
	else
	pyfreq[$confnb1]="----   "
fi

file="./conf${confnb}/conf_pyrmodamp.txt"
if [ -a $file ]
	then
	pymod[$confnb1]=$(echo "$(cat $file)")
	else
	pymod[$confnb1]="----  "
fi

file="./conf${confnb}/conf_pyrmamp.txt"
if [ -a $file ]
	then
	pyrmamp[$confnb1]=$(echo "$(cat $file)")
	else
	pyrmamp[$confnb1]="----  "
fi


file="./conf${confnb}/conf_GPU.txt"
if [ -a $file ]
	then
	pygpu[$confnb1]=$(echo "$(cat $file)")
	else
	pygpu[$confnb1]=" CPU  "
fi


file="./conf${confnb}/conf_PYRWHEEL.txt"
if [ -a $file ]
	then
	pyfw[$confnb1]=$(echo "$(cat $file)")
	else
	pyfw[$confnb1]=" -------- "
fi

file="./conf${confnb}/conf_PYRWHEEL.txt"
if [ -a $file ]
	then
	pyfw=$(echo "$(cat $file)")
	else
	pyfw="?"
fi



file="./conf${confnb}/conf_CPA.txt"
if [ -a $file ]
	then
	pycpa[$confnb1]=$(echo "$(cat $file)")
	else
	pycpa[$confnb1]=" ------ "
fi

x=$(echo $pyfw[$confnb1]| awk '{printf("%d",$1)}')
pyfwnb=$x
word="$x"
case $word in
    1|2|4|5|6) fwname[$confnb1]="${pyfwlist[$(($x * 2 + 1))]}";;
    *)          fwname[$confnb1]=" ---------";;
esac


file="./conf${confnb}/fmodes.fits"
if [ -a $file ]
	then
	fmodesOK[$confnb1]=1
	else
	fmodesOK[$confnb1]=0
fi

file="./darks/dark_${pyfreq[$confnb1]}_001.fits"
if [ -a $file ]
	then
	wfsdarkOK[$confnb1]=1
	else
	wfsdarkOK[$confnb1]=0
fi

file="./conf${confnb}/refwfs0.fits"
if [ -a $file ]
	then
	wfsref0OK[$confnb1]=1
	else
	wfsref0OK[$confnb1]=0
fi


filerm="RespMat/respm_${pycpa[$confnb1]}_${pyfw[$confnb1]}_${pymod[$confnb1]}_${pyrmamp[$confnb1]}_${pyfreq[$confnb1]}.fits"
filermref="RespMat/refwfs_${pycpa[$confnb1]}_${pyfw[$confnb1]}_${pymod[$confnb1]}_${pyfreq[$confnb1]}.fits"
filermampl="RespMat/rmampl_${pycpa[$confnb1]}_${pyfw[$confnb1]}_${pymod[$confnb1]}_${pyfreq[$confnb1]}.txt"
if [ -a $filerm ]
	then
	respmatOK[$confnb1]=1
	ln -snf $PWD/$filerm $PWD/conf${confnb}/respm.fits
	ln -snf $PWD/$filermref $PWD/conf${confnb}/refwfs.fits
	else
	respmatOK[$confnb1]=0
fi


file="./conf${confnb}/cmatcomp.txt"
if [ -a $file ]
	then
	cmatcompOK[$confnb1]=1
	else
	cmatcompOK[$confnb1]=0
fi

file="./conf${confnb}/cmat.fits"
if [ -a $file ]
	then
	cmatOK[$confnb1]=1
	else
	cmatOK[$confnb1]=0
fi





menuitems=(  "0" "GPU        :  ${pygpu[$confnb1]} GPU(s)")
menuitems+=( "1" "loop Frequ :  ${pyfreq[$confnb1]} Hz")
menuitems+=( "2" "mod ampl   :  ${pymod[$confnb1]} V")
menuitems+=( "3" "Respmat amp:  ${pyrmamp[$confnb1]} nm")
menuitems+=( "4" "Filter     :  $pyfw (${pyfwnb})   ${fwname[$confnb1]}")
menuitems+=( "5" "CPA        :  ${pycpa[$confnb1]}")
menuitems+=( "" "")
menuitems+=( "6" "[${fmodesOK[$confnb1]}] Make modes")
menuitems+=( "7" "[${wfsdarkOK[$confnb1]}] Take dark (./takedark) -> ./darks/dark_${pyfreq[$confnb1]}")
menuitems+=( "8" "[${wfsref0OK[$confnb1]}] Take Alignment Reference (./takepref) -> ./conf$confnb1/refwfs0.fits")
menuitems+=( "" "" )
menuitems+=( "9" "[${respmatOK[$confnb1]}] Start Resp Mat [${filerm}]")
menuitems+=( "10" "[${respmatOK[$confnb1]}] Stop Resp Mat at next cycle")
menuitems+=( "" "")
menuitems+=( "11" "Compute Control Matrices beta = 0.0")
menuitems+=( "12" "Compute Control Matrices beta = 0.1")
menuitems+=( "13" "Compute Control Matrices beta = 0.2")
menuitems+=( "14" "Compute Control Matrices beta = 0.4")
menuitems+=( "15" "Compute Control Matrices beta = 0.8")
menuitems+=( "16" "Clear control matrices")
menuitems+=( "" "")
menuitems+=( "17" "[${cmatOK[$confnb1]}] Choose a RM mask")
menuitems+=( "18" "[${cmatOK[$confnb1]}] Choose a Contr Matrix")
menuitems+=( "" "" )
menuitems+=( "C" "Configurations" )
menuitems+=( "W" "WFS Camera" )
menuitems+=( "L" "Control Loop" )
menuitems+=( "A" "Alignment" )



dialog --title "AO loop configuration" \
--ok-label "Select" \
--cancel-label "Main" \
--extra-button --extra-label "Top" \
--help-button --help-label "Exit" \
--default-item $menuconfmanage_default \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)
case $retval in
   0)  # button 1:
	menuconfmanage_default=$choiceval
	case $choiceval in
  	 0) state="menuconfconf_gpu";; 
   	1) state="menuconfconf_freq";;  
   	2) state="menuconfconf_modamp";;   
   	3) state="menuconfconf_pyrmamp";;   
   	4) state="menuconfconf_pyfw";;
   	5) state="menuconfconf_cpa";;
	6) 
echo "Creating modes, Please wait ... "
./mkModes ${confnb} ${pycpa[$confnb1]} &> ${outmesg}
;;
	7) 
echo "Taking dark frames, frequ = ${pyfreq[$confnb1]} Hz ..."
./takedark 1000 ${pyfreq[$confnb1]} &> ${outmesg}
echo "Done"
;;
	8)
ApplyPyramidFM ${confnb} &> ${outmesg}
sleep 1
SetDark ${confnb} 001 &> ${outmesg}
./takepref 10000 ${confnb} &> ${outmesg}
;; 
	9)
ApplyPyramidFM ${confnb} &> ${outmesg}
sleep 1
SetDark ${confnb} 001 &> ${outmesg}
SetDMmodes ${confnb} &> ${outmesg}
{ ./acquRespM ${pyrmamp[${confnb1}]} ${filerm} ${filermref} ${filermampl} & } &> ${outmesg}
;;
	10)
touch "stopRM.txt"
;;
	11)
if [ ! -f "${filerm}" ]  # start new
then
dialog --title "Message" --msgbox "NO RESPONSE MATRIX AVAILABLE\n ${filerm}\n" 8 60
echo "NO RESPONSE MATRIX AVAILABLE\n ${filerm}"
else
cp ./conf${confnb}/fmodes.fits ./tmp/
cp "${filerm}" ./tmp/
cp "${filermref}" ./tmp/
cp ./conf${confnb}/modesfreqcpa.fits .
#(
dialog --title "step" --inputbox "Enter number of modes removed increment step [1, 2...]" 8 40 ${cmstep} 2> $tempfile
cmstep=$(cat $tempfile)
./cmmake1 0.0 5 ${cmstep} ${confnb}
# & ) &> ${outmesg}  # end new
fi ;;
	12)
if [ ! -f "${filerm}" ]  # start new
then
dialog --title "Message" --msgbox "NO RESPONSE MATRIX AVAILABLE\n ${filerm}\n" 8 60
echo "NO RESPONSE MATRIX AVAILABLE\n ${filerm}"
else
cp ./conf${confnb}/fmodes.fits ./tmp/
cp "${filerm}" ./tmp/
cp "${filermref}" ./tmp/
cp ./conf${confnb}/modesfreqcpa.fits .
#(
dialog --title "step" --inputbox "Enter step [1, 2...]" 8 40 ${cmstep} 2> $tempfile
cmstep=$(cat $tempfile)
./cmmake1 0.1 5 ${cmstep} ${confnb}
# & ) &> ${outmesg}  # end new
fi ;;
	13)
if [ ! -f "${filerm}" ]  # start new
then
dialog --title "Message" --msgbox "NO RESPONSE MATRIX AVAILABLE\n ${filerm}\n" 8 60
echo "NO RESPONSE MATRIX AVAILABLE\n ${filerm}"
else
cp ./conf${confnb}/fmodes.fits ./tmp/
cp "${filerm}" ./tmp/
cp "${filermref}" ./tmp/
cp ./conf${confnb}/modesfreqcpa.fits .
#(
dialog --title "step" --inputbox "Enter step [1, 2...]" 8 40 ${cmstep} 2> $tempfile
cmstep=$(cat $tempfile)
./cmmake1 0.2 5 ${cmstep} ${confnb}
# & ) &> ${outmesg}  # end new
fi ;;
	14)
if [ ! -f "${filerm}" ]  # start new
then
dialog --title "Message" --msgbox "NO RESPONSE MATRIX AVAILABLE\n ${filerm}\n" 8 60
echo "NO RESPONSE MATRIX AVAILABLE\n ${filerm}"
else
cp ./conf${confnb}/fmodes.fits ./tmp/
cp "${filerm}" ./tmp/
cp "${filermref}" ./tmp/
cp ./conf${confnb}/modesfreqcpa.fits .
#(
dialog --title "step" --inputbox "Enter step [1, 2...]" 8 40 ${cmstep} 2> $tempfile
cmstep=$(cat $tempfile)
./cmmake1 0.4 5 ${cmstep} ${confnb}
# & ) &> ${outmesg}  # end new
fi ;;
	15)
if [ ! -f "${filerm}" ]  # start new
then
dialog --title "Message" --msgbox "NO RESPONSE MATRIX AVAILABLE\n ${filerm}\n" 8 60
echo "NO RESPONSE MATRIX AVAILABLE\n ${filerm}"
else
cp ./conf${confnb}/fmodes.fits ./tmp/
cp "${filerm}" ./tmp/
cp "${filermref}" ./tmp/
cp ./conf${confnb}/modesfreqcpa.fits .
dialog --title "step" --inputbox "Enter step [1, 2...]" 8 40 ${cmstep} 2> $tempfile
cmstep=$(cat $tempfile)
./cmmake1 0.8 5 ${cmstep} ${confnb}
fi ;;
  16)
rm ./conf${confnb}/cmat/cmat_*.fits
rm ./conf${confnb}/cmat/eigen*
rm ./conf${confnb}/cmat/evec*
;;
  17) 
rmmaskfile=$(dialog --stdout --title "Choose Resp Matrix mask" --fselect ./RMmasks/ 22 58)
echo "${rmmaskfile} file chosen."
sleep 1
ln -snf $PWD/${rmmaskfile} $PWD/conf${confnb}/RMmask.fits
state="menuconfmanage"
;;
  18) 
cmatfile=$(dialog --stdout --title "Choose control Matrix" --fselect $PWD/conf${confnb}/cmat/ 22 58)
echo "${cmatfile} file chosen."
echo "cp ${cmatfile} ./conf${confnb}/cmat.fits"
ln -snf ${cmatfile} $PWD/conf${confnb}/cmat.fits
state="menuconfmanage"
;;
  	 C) state="menuconfmain";; 
   	 W) state="menucamera";;  
   	 L) state="menucontrolloop";;   
   	 A) state="menualign";;  
	esac;;

   2) state="menuexit";;
   3) state="menutop";;
   1) state="menuconfmain";;
  255) state="menuexit";;
esac
fi











#  CONFIGURATION SETUP INDEX - GPU
if [ $state = "menuconfconf_gpu" ]; then
stateok=1
menuname="CONFIGURE CONFIGURATION ${confnb} - GPU"

file="./conf${confnb}/conf_GPU.txt"
if [ -a $file ]
	then
	pygpu=$(echo "$(cat $file)")
	else
	pygpu="?"
fi


menuitems=( "0" "No GPU (CPU only)")
for i in `seq 1 6 `;
        do
str1=$( echo $i|awk '{printf("%3d GPUs",$1)}')
menuitems+=( "$i" "$str1" )
done 



dialog --title "AO loop configuration" \
--ok-label "Select" \
--cancel-label "Main" \
--help-button --help-label "Exit" \
--default-item ${pygpu} \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

echo "$retval"
case $retval in
   0) state="menuconfmanage"
nbGPU=$(cat $tempfile)
echo "$nbGPU" > ./conf${confnb}/conf_GPU.txt
;; # button 1:
   1) state="menuconfmanage";;  
   2) state="menuexit";;
   255) state="menuexit";;
esac

fi






#  CONFIGURATION SETUP INDEX - FREQU
if [ $state = "menuconfconf_freq" ]; then
stateok=1
menuname="CONFIGURE CONFIGURATION ${confnb} - FREQU"

file="./conf${confnb}/conf_pyrloopfrequ.txt"
if [ -a $file ]
	then
	pyfreq=$(echo "$(cat $file)")
	else
	pyfreq="?"
fi

menuitems=( "0500" " .5 Hz")
menuitems+=( "1000" "1 kHz" )
menuitems+=( "1500" "1.5 kHz" )
menuitems+=( "2000" "2 kHz" )
menuitems+=( "2500" "2.5 kHz" )
menuitems+=( "3000" "3 kHz" )
menuitems+=( "3500" "3.5 kHz" )


dialog --title "AO loop configuration" \
--ok-label "Select" \
--cancel-label "Main" \
--help-button --help-label "Exit" \
--default-item ${pyfreq} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menuconfmanage"
modfreq=$(cat $tempfile)
echo "$modfreq" > ./conf${confnb}/conf_pyrloopfrequ.txt
;; # button 1:
   1) state="menuconfmain";;  
   2) state="menuexit";; 
   255) state="menuexit";;
esac

fi




#  CONFIGURATION SETUP INDEX - AMPL
if [ $state = "menuconfconf_modamp" ]; then
stateok=1
menuname="CONFIGURE CONFIGURATION ${confnb} - AMPL"

file="./conf${confnb}/conf_pyrmodamp.txt"
if [ -a $file ]
	then
	pymod=$(echo "$(cat $file)")
	else
	pymod="?"
fi


menuitems=()
for i in `seq 0 5 100 `;
        do
str0=$( echo $i|awk '{printf("%4.2f",$1*0.01)}')
str1=$( echo $i|awk '{printf("%4.2f V", $1*0.01)}')
menuitems+=( "$str0" "$str1" )
done 



dialog --title "AO loop configuration" \
--ok-label "Select" \
--cancel-label "Main" \
--help-button --help-label "Exit" \
--default-item ${pymod} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menuconfmanage"
modamp=$(cat $tempfile)
echo "$modamp" > ./conf${confnb}/conf_pyrmodamp.txt
;; # button 1:
   1) state="menuconfmain";; 
   2) state="menuexit";; 
   255) state="menuexit";;
esac

fi





#  CONFIGURATION SETUP INDEX - RESPONSE MATRIX AMPL
if [ $state = "menuconfconf_pyrmamp" ]; then
stateok=1
menuname="CONFIGURE CONFIGURATION ${confnb} - RM AMPL"

file="./conf${confnb}/conf_pyrmamp.txt"
if [ -a $file ]
	then
	pyrmamp=$(echo "$(cat $file)")
	else
	pymod="?"
fi


menuitems=()
for i in `seq 5 5 100 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%03d nm", $1)}')
menuitems+=( "$str0" "$str1" )
done 



dialog --title "AO loop configuration" \
--ok-label "Select" \
--cancel-label "Main" \
--help-button --help-label "Exit" \
--default-item ${pyrmamp} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menuconfmanage"
pyrmamp=$(cat $tempfile)
echo "$pyrmamp" > ./conf${confnb}/conf_pyrmamp.txt
;; # button 1:
   1) state="menuconfmain";; 
   2) state="menuexit";; 
   255) state="menuexit";;
esac

fi






#  CONFIGURATION SETUP INDEX - FW
if [ $state = "menuconfconf_pyfw" ]; then
stateok=1
menuname="CONFIGURE CONFIGURATION ${confnb} - FW"

file="./conf${confnb}/conf_PYRWHEEL.txt"
if [ -a $file ]
	then
	pyfw=$(echo "$(cat $file)")
	else
	pyfw="?"
fi


dialog --title "AO loop configuration" \
--ok-label "Select" \
--extra-button --extra-label "Move" \
--cancel-label "Main" \
--help-button --help-label "Exit" \
--default-item ${pyfw} \
--menu "$menuname" \
 50 80 100 "${pyfwlist[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menuconfmanage"
pyfw=$(cat $tempfile)
echo "$pyfw" > ./conf${confnb}/conf_PYRWHEEL.txt
;; # button 1:
   1) state="menuconfmain";; 
   2) state="menuexit";;
   3) pyfw=$(cat $tempfile)
setFW $pyfw
;;
   255) state="menuexit";;
esac

fi







#  CONFIGURATION SETUP INDEX - CPA
if [ $state = "menuconfconf_cpa" ]; then
stateok=1
menuname="CONFIGURE CONFIGURATION ${confnb} - CPA"

file="./conf${confnb}/conf_CPA.txt"
if [ -a $file ]
	then
	pycpa=$(echo "$(cat $file)")
	else
	pycpa="?"
fi

menuitems=()
menuitems+=( "00.2" "0.2 CPA (Tip/Tilt only)" )
menuitems+=( "00.3" "0.3 CPA (Tip/Tilt + Focus)" )
menuitems+=( "00.5" "0.5 CPA (Tip/Tilt + Focus + AST)" )
for i in `seq 20 40 240 `;
        do
str0=$( echo $i|awk '{printf("%04.1f", $1*0.1)}')
str1=$( echo $i|awk '{printf("%4.1f CPA", $1*0.1)}')
menuitems+=( "$str0" "$str1" )
done 



dialog --title "AO loop configuration" \
--ok-label "Select" \
--cancel-label "Main" \
--help-button --help-label "Exit" \
--default-item ${pycpa} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menuconfmanage"
cpa=$(cat $tempfile)
echo "$cpa" > ./conf${confnb}/conf_CPA.txt
;; # button 1:
   1) state="menuconfmain";;  
   2) state="menuexit";; 
   255) state="menuexit";;
esac

fi




















# CAMERA SETUP SCREEN
if [ $state = "menucamera" ]; then
stateok=1

camgain=$(echo "$(cat ./status/status_camgain.txt)")
camon=$(echo "$(cat ./status/status_camon.txt)")



menuname="CAMERA CONFIGURATION\n
Make sure the camera serial link is released from the GUI\n
   Gain = ${camgain}     ON = ${camon}\n"


menuitems=( "001" "set gain =   1" )
menuitems+=( "003" "set gain =   3" )
menuitems+=( "010" "set gain =  10" )
menuitems+=( "030" "set gain =  30" )
menuitems+=( "100" "set gain = 100" )
menuitems+=( "" "" )
menuitems+=( "0500" " 500 Hz" )
menuitems+=( "1000" "1000 Hz" )
menuitems+=( "1500" "1500 Hz" )
menuitems+=( "2000" "2000 Hz" )
menuitems+=( "2500" "2500 Hz" )
menuitems+=( "3000" "3000 Hz" )
menuitems+=( "3500" "3500 Hz" )
menuitems+=( "" "" )
menuitems+=( "P"   "protection reset" )
menuitems+=( "Son"  "Synchro on" )
menuitems+=( "Soff"  "Synchro off" )
menuitems+=( "" "" )
menuitems+=( "ON"  "Acquisition ON" )
menuitems+=( "OFF" "Acquisition OFF" )
menuitems+=( "" "" )
menuitems+=( "C" "Configurations" )
menuitems+=( "W" "WFS Camera" )
menuitems+=( "L" "Control Loop" )
menuitems+=( "A" "Alignment" )


state="menutop"


dialog --title "Camera menu" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menucamera_default}" \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)

ocamsleeptime="0.2"

case $retval in
   0) # button
	case $choiceval in
  	 001) 
ocamstopacq
sleep $ocamsleeptime
echo -e "gain 1\r" > /tmp/ocamtty
sleep $ocamsleeptime
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="001";;
  	 003) 
ocamstopacq
sleep $ocamsleeptime
echo -e "gain 3\r" > /tmp/ocamtty
echo "003" > ./status/status_camgain.txt 
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="003";;
  	 010) 
ocamstopacq
sleep $ocamsleeptime
echo -e "gain 10\r" > /tmp/ocamtty
echo "010" > ./status/status_camgain.txt 
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="010";;
  	 030) 
ocamstopacq
sleep $ocamsleeptime
echo -e "gain 30\r" > /tmp/ocamtty
echo "030" > ./status/status_camgain.txt 
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="030";;
  	 100) 
ocamstopacq
sleep $ocamsleeptime
echo -e "gain 100\r" > /tmp/ocamtty
echo "100" > ./status/status_camgain.txt 
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="100";;
  	   
 	 0500) 
ocamstopacq
sleep $ocamsleeptime
echo -e "fps 500\r" > /tmp/ocamtty
echo "0500" > ./status/status_camfreq.txt 
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="0500";;
 	 1000) 
ocamstopacq
sleep $ocamsleeptime
echo -e "fps 1000\r" > /tmp/ocamtty
echo "1000" > ./status/status_camfreq.txt 
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="1000";;
 	 1500) 
ocamstopacq
sleep $ocamsleeptime
echo -e "fps 1500\r" > /tmp/ocamtty
echo "1500" > ./status/status_camfreq.txt 
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="1500";;
 	 2000) 
ocamstopacq
sleep $ocamsleeptime
echo -e "fps 2000\r" > /tmp/ocamtty
echo "2000" > ./status/status_camfreq.txt 
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="2000";;
 	 2500) 
ocamstopacq
sleep $ocamsleeptime
echo -e "fps 2500\r" > /tmp/ocamtty
echo "2500" > ./status/status_camfreq.txt 
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="2500";;
 	 3000) 
ocamstopacq
sleep $ocamsleeptime
echo -e "fps 3000\r" > /tmp/ocamtty
echo "3000" > ./status/status_camfreq.txt 
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="3000";;
 	 3500) 
ocamstopacq
sleep $ocamsleeptime
echo -e "fps 3500\r" > /tmp/ocamtty
echo "3500" > ./status/status_camfreq.txt 
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="3500";;
	P) 
ocamstopacq
sleep $ocamsleeptime
echo -e "protection reset\r" > /tmp/ocamtty
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="P";;  	 
	Son) 
ocamstopacq
sleep $ocamsleeptime
echo -e "synchro on\r" > /tmp/ocamtty
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="Son";;
	Soff) 
ocamstopacq
sleep $ocamsleeptime
echo -e "synchro off\r" > /tmp/ocamtty
ocamstartacq
echo "001" > ./status/status_camgain.txt 
state="menucamera"
menucamera_default="Soff";;
	ON) ocamstartacq
state="menucamera"
menucamera_default="ON";;
	OFF) ocamstopacq
state="menucamera"
menucamera_default="OFF";;   
  	 C) state="menuconfmain";; 
   	 W) state="menucamera";;  
   	 L) state="menucontrolloop";;   
   	 A) state="menualign";;  
	esac;;
   1) state="menutop";;
   2) state="menuexit";;   
   255) state="menuexit";;
esac

fi










# CONTROL LOOP
if [ $state = "menucontrolloop" ]; then
stateok=1
menuname="CONTROL LOOP"


loopgain=$(echo "$(cat ./conf/conf_loopgain.txt)")
loopmaxlim=$(echo "$(cat ./conf/conf_loopmaxlim.txt)")
loopmultcoeff=$(echo "$(cat ./conf/conf_loopmultcoeff.txt)")


menuitems=( "g" "loop gain    =   ${loopgain}" )
menuitems+=( "m" "loop max lim =   ${loopmaxlim}" )
menuitems+=( "e" "mult coeff   =   ${loopmultcoeff}" )
menuitems+=( "" "" )
menuitems+=( "S" "Start loop processes" )
menuitems+=( "t1" "step 1" )
menuitems+=( "t3" "step 3" )
menuitems+=( "t10" "step 10" )
menuitems+=( "t30" "step 30" )
menuitems+=( "t100" "step 100" )
menuitems+=( "t300" "step 300" )
menuitems+=( "t1000" "step 1000" )
menuitems+=( "N" "LOOP ON" )
menuitems+=( "F" "LOOP OFF" )
menuitems+=( "Z" "LOOP Zero" )
menuitems+=( "K" "Kill LOOP" )
menuitems+=( "" "" )
menuitems+=( "C" "Configurations" )
menuitems+=( "W" "WFS Camera" )
menuitems+=( "L" "Control Loop" )
menuitems+=( "A" "Alignment" )


state="menutop"


dialog --title "LOOP CONTROL" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menucontrolloop_default}" \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)

case $retval in
   0) # button
	case $choiceval in
  	 g) 
menucontrolloop_default="g"
state="menucontrolloop_setgain"
;; 
   	 m)   	
menucontrolloop_default="m"
state="menucontrolloop_setmaxlim"
;;  
   	 e) 
menucontrolloop_default="e"
state="menucontrolloop_setmult"
;;   
   	 S)
rm aolctr-${LOOPNUMBER}-fifo
sleep 1
xterm $xtermopt -e numactl --cpunodebind=$NUMAnode --membind=$NUMAnode ./aolctr &
sleep 1
xterm $xtermopt -e numactl --cpunodebind=$NUMAnode --membind=$NUMAnode ./aolrun &
ocamstopacq
sleep 1
echo "aolon" >> aolctr-${LOOPNUMBER}-fifo
sleep 5
echo "aoloff" >> aolctr-${LOOPNUMBER}-fifo
sleep 1
ocamstartacq
menucontrolloop_default="S"
state="menucontrolloop"
;; 
   	 t1)
echo "aolstep 1" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t1"
state="menucontrolloop"
;;   
   	 t3)
echo "aolstep 3" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t3"
state="menucontrolloop"
;;   
   	 t10)
echo "aolstep 10" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t10"
state="menucontrolloop"
;;   
   	 t30)
echo "aolstep 30" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t30"
state="menucontrolloop"
;;   
   	 t100)
echo "aolstep 100" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t100"
state="menucontrolloop"
;;   
   	 t300)
echo "aolstep 300" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t300"
state="menucontrolloop"
;;   
   	 t1000)
echo "aolstep 1000" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="t1000"
state="menucontrolloop"
;;   
   	 N)
echo "aolon" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="N"
state="menucontrolloop"
;; 
   	 F)
echo "aoloff" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="F"
state="menucontrolloop"
;; 
   	 Z)
echo "imzero aol${LOOPNUMBER}_DMmode_cmd" >> aolctr-${LOOPNUMBER}-fifo
echo "readshmim aol${LOOPNUMBER}_dmC" >> aolctr-${LOOPNUMBER}-fifo
echo "imzero aol${LOOPNUMBER}_dmC" >> aolctr-${LOOPNUMBER}-fifo
menucontrolloop_default="Z"
state="menucontrolloop"
;;
   	 K)
ocamstopacq
sleep 1
echo "aoloff" >> aolctr-${LOOPNUMBER}-fifo
echo "aolkill" >> aolctr-${LOOPNUMBER}-fifo
echo "exit" >> aolctr-${LOOPNUMBER}-fifo
sleep 1
ocamstartacq
menucontrolloop_default="K"
state="menucontrolloop"
;;
  	 C) state="menuconfmain";; 
   	 W) state="menucamera";;  
   	 L) state="menucontrolloop";;   
   	 A) state="menualign";;  
	esac;;
   1) state="menutop";;   
   2) state="menuexit";;
   255) state="menuexit";;
esac


fi






#  SET CONTROL LOOP GAIN
if [ $state = "menucontrolloop_setgain" ]; then
stateok=1
menuname="SET LOOP GAIN - LOOP ${LOOPNUMBER}"

file="./conf/conf_loopgain.txt"
if [ -a $file ]
	then
	loopgain=$(echo "$(cat $file)")
	else
	loopgain="?"
fi

loopgain3=$(echo "scale=0; $loopgain*1000/1" | bc -q 2>/dev/null)

menuitems=()
menuitems+=( "000" "0.000" )
menuitems+=( "001" "0.001" )
menuitems+=( "005" "0.005" )
menuitems+=( "010" "0.010" )
for i in `seq 50 50 950 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 



dialog --title "Control loop gain" \
--ok-label "Select" \
--cancel-label "Cancel" \
--help-button --help-label "Exit" \
--default-item ${loopgain3} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menucontrolloop"
loopgain=$(cat $tempfile|awk '{printf("%5.3f", $1*0.001)}')
echo "$loopgain" > ./conf/conf_loopgain.txt
echo "aolsetgain ${loopgain}" >> aolctr-${LOOPNUMBER}-fifo
;; # button 1:
   1) state="menucontrolloop";; 
   2) state="menuexit";; 
   255) state="menuexit";;
esac

fi





#  SET CONTROL LOOP MAX LIM
if [ $state = "menucontrolloop_setmaxlim" ]; then
stateok=1
menuname="SET LOOP MAX LIMIT - LOOP ${LOOPNUMBER}"

file="./conf/conf_loopmaxlim.txt"
if [ -a $file ]
	then
	loopmaxlim=$(echo "$(cat $file)")
	else
	loopmaxlim="?"
fi

loopmaxlim3=$(echo "scale=0; $loopmaxlim*1000/1" | bc -q 2>/dev/null)

menuitems=()
menuitems+=( "000" "0.000" )
menuitems+=( "001" "0.001" )
menuitems+=( "005" "0.005" )
menuitems+=( "010" "0.010" )
for i in `seq 50 50 950 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 



dialog --title "Control loop max limit" \
--ok-label "Select" \
--cancel-label "Cancel" \
--help-button --help-label "Exit" \
--default-item ${loopmaxlim3} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menucontrolloop"
loopmaxlim=$(cat $tempfile|awk '{printf("%5.3f", $1*0.001)}')
echo "$loopmaxlim" > ./conf/conf_loopmaxlim.txt
echo "aolsetmaxlim ${loopmaxlim}" >> aolctr-${LOOPNUMBER}-fifo
;; # button 1:
   1) state="menucontrolloop";; 
   2) state="menuexit";; 
   255) state="menuexit";;
esac

fi





#  SET MULT COEFF
if [ $state = "menucontrolloop_setmult" ]; then
stateok=1
menuname="SET LOOP MULT COEFF - LOOP ${LOOPNUMBER}"

file="./conf/conf_loopmultcoeff.txt"
if [ -a $file ]
	then
	loopmultcoeff=$(echo "$(cat $file)")
	else
	loopmultcoeff="?"
fi

loopmultcoeff3=$(echo "scale=0; $loopmultcoeff*1000/1" | bc -q 2>/dev/null)

menuitems=()
for i in `seq 000 100 800 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 
menuitems+=( "" "" )
for i in `seq 900 10 980 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 
menuitems+=( "" "" )
for i in `seq 990 1 999 `;
        do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems+=( "$str0" "$str1" )
done 
menuitems+=( "" "" )
menuitems+=( "1000" "1.000" )


dialog --title "Control loop mult coeff" \
--ok-label "Select" \
--cancel-label "Cancel" \
--help-button --help-label "Exit" \
--default-item ${loopmultcoeff3} \
--menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?

case $retval in
   0) state="menucontrolloop"
loopmultcoeff=$(cat $tempfile|awk '{printf("%5.3f", $1*0.001)}')
echo "$loopmultcoeff" > ./conf/conf_loopmultcoeff.txt
echo "aolsetmult ${loopmultcoeff}" >> aolctr-${LOOPNUMBER}-fifo
;; # button 1:
   1) state="menucontrolloop";; 
   2) state="menuexit";; 
   255) state="menuexit";;
esac

fi







# ALIGNMENT
if [ $state = "menualign" ]; then
stateok=1
menuname="ALIGNMENT\n
\n
   TT   loop is : $(cat ./status/status_alignTT.txt)\n
   Pcam loop is : $(cat ./status/status_alignPcam.txt)\n
   Pyr Filter  : $(cat ./status/status_fw.txt)\n"

pyTTloopgain=$(cat ./status/gain_PyAlignTT.txt)
Pcamloopgain=$(cat ./status/gain_PyAlignCam.txt)

menuitems=( "tz" "Zero TT align" )
menuitems+=( "ts" "Start TT align" )
menuitems+=( "tr" "Resume TT align (after pause)" )
menuitems+=(  "tg" "py TT loop gain = ${pyTTloopgain}")
menuitems+=( "tp" "PAUSE TT align" )
menuitems+=( "tk" "STOP TT align (note: need to resume first if paused)" )
menuitems+=( "" "" )
menuitems+=( "pz" "Zero Pcam align" )
menuitems+=( "ps" "Start Pcam align" )
menuitems+=( "pr" "RESUME Pcam align (after pause)" )
menuitems+=( "pg" "Pcam loop gain = ${Pcamloopgain}" )
menuitems+=( "pp" "PAUSE Pcam align" )
menuitems+=( "pk" "STOP Pcam align (note: need to resume first if paused)" )
menuitems+=( "" "" )
menuitems+=( "d" "Measure DM illumination (-> ./conf/actmap.fits)" )
menuitems+=( "fw" "Set PY Filter Wheel" )
menuitems+=( "" "" )
menuitems+=( "C" "Configurations" )
menuitems+=( "W" "WFS Camera" )
menuitems+=( "L" "Control Loop" )
menuitems+=( "A" "Alignment" )

state="menutop"


dialog --title "Alignment" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menualign_default}" \
 --menu "$menuname" \
 50 80 100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)

case $retval in
   0) # button
menualign_default="$choiceval"
	case $choiceval in
	tz)
analog_output.py voltage C -5.0
analog_output.py voltage D -5.0
menualign_default="tz"
state="menualign"
;;
	ts)
xterm $xtermopt -e ./alignPyrTT &
menualign_default="ts"
state="menualign"
;; 
  	 tr) 
rm pause_PyAlignTT.txt stop_PyAlignTT.txt
if [ "$(cat ./status/status_alignTT.txt)" == "off" ]
then
dialog --title "Message" --msgbox "Starting TT align\n (CTRL-C now to abort)\n" 8 30
fi
echo "on" > ./status/status_alignTT.txt
menualign_default="tr"
state="menualign"
;; 
	tg)
dialog --title "PyTT loop gain" --inputbox "Enter loop gain" 8 40 ${pyTTloopgain} 2> $tempfile
pyTTloopgain=$(cat $tempfile)
echo ${pyTTloopgain} > ./status/gain_PyAlignTT.txt
menualign_default="tg"
state="menualign"
;;
   	 tp)
touch pause_PyAlignTT.txt
echo "paused" > ./status/status_alignTT.txt
menualign_default="tp"
state="menualign"
;;  
   	 tk) 
touch stop_PyAlignTT.txt
echo "off" > ./status/status_alignTT.txt
menualign_default="tk"
state="menualign"
;; 
	pz)
pywfs reimage x home
pywfs reimage x goto 150000
pywfs reimage y home
pywfs reimage y goto 67000
echo "150000 67000" > ./status/pcampos.txt
menualign_default="pz"
state="menualign"
;;
	ps)
xterm $xtermopt -e ./alignPcam &
menualign_default="ps"
state="menualign"
;; 
   	 pr)
rm pause_PyAlignCam.txt stop_PyAlignCam.txt
if [ "$(cat ./status/status_alignPcam.txt)" == "off" ]
then
dialog --title "Message" --msgbox "Starting Pcam align\n (CTRL-C now to abort)\n" 8 30
fi
echo "on" > ./status/status_alignPcam.txt
menualign_default="pr"
state="menualign"
;;  
 	pg)
dialog --title "Pcam loop gain" --inputbox "Enter loop gain" 8 40 ${Pcamloopgain} 2> $tempfile
Pcamloopgain=$(cat $tempfile)
echo ${Pcamloopgain} > ./status/gain_PyAlignCam.txt
menualign_default="pg"
state="menualign"
;;  	 
	pp) 
touch pause_PyAlignCam.txt
echo "paused" > ./status/status_alignPcam.txt
menualign_default="pp"
state="menualign"
;;   
   	 pk) 
touch stop_PyAlignCam.txt
echo "off" > ./status/status_alignPcam.txt
menualign_default="pk"
state="menualign"
;;   
	d)
( ./MeasureActMap & ) &> ${outmesg}
menualign_default="d"
state="menualign"
;;
	fw)
# set FW
menualign_default="fw"
state="menupyfw"
;;
  	 C) state="menuconfmain";; 
   	 W) state="menucamera";;  
   	 L) state="menucontrolloop";;   
   	 A) state="menualign";;  
	esac;;
   1) state="menutop";;   
   2) state="menuexit";;
   255) state="menuexit";;
esac

fi











#  CONFIGURATION SETUP INDEX - FW
if [ $state = "menupyfw" ]; then
stateok=1
file="./status/status_fw.txt"
pyfw=$(echo "$(cat $file)")

menuname="MOVE FW\n
  FW current position : $pyfw\n"


dialog --title "AO loop configuration" \
--ok-label "Move" \
--cancel-label "Back" \
--help-button --help-label "Exit" \
--default-item ${pyfw} \
--menu "$menuname" \
 50 80 100 "${pyfwlist[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)
case $retval in
   0) state="menupyfw"
pyfw=$(cat $tempfile)
echo "setFW ${choiceval}"
SetFW ${choiceval}
;; # button 1:
   1) state="menualign";; 
   2) state="menuexit";;
   255) state="menuexit";;
esac

fi












if [ $state = "menuexit" ]; then
stateok=1
echo "exit"
exit
fi



if [ $stateok = 0 ]; then
echo "state \"$state\" not recognized ... exit"
exit
fi


done
















