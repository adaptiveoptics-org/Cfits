#!/bin/bash



if [ ! -v aolconfFLAG ]; then
echo "ERROR: This script should be called from aolconf main script"
exit
fi


# is the loop control in combined/ZONAL CM or MODAL CM mode ?
CMMODEfile="conf/param_CMMODE.txt"
if [ -f $CMMODEfile ]; then
CMMODE=$( cat ${CMMODEfile} )
else
CMMODE="0"
echo "$CMMODE" > $CMMODEfile
fi







# argument is tmux session name within which command should be executed
# if agrument is NULL, execute from bash

function WFSresidualOffsetLoop_init
{

# all commands written in script file
scriptfile="script_WFSresidualOffsetLoop_init"
rm $scriptfile
touch $scriptfile
chmod +x $scriptfile

#echo "WFSresidualOffsetLoop_init  loop ${LOOPNUMBER}"
echo "sleep 2" >> $scriptfile
echo "./AOloopControl << EOF" >> $scriptfile
echo "readshmim aol${LOOPNUMBER}_wfszpo6" >> $scriptfile
echo "imzero aol${LOOPNUMBER}_wfszpo6" >> $scriptfile
echo "readshmim aol${LOOPNUMBER}_wfsres_ave" >> $scriptfile
echo "imzero aol${LOOPNUMBER}_wfsres_ave" >> $scriptfile
echo "readshmim aol${LOOPNUMBER}_wfsresm_ave" >> $scriptfile
echo "imzero aol${LOOPNUMBER}_wfsresm_ave" >> $scriptfile
echo "readshmim aol${LOOPNUMBER}_wfsref0" >> $scriptfile
echo "readshmim aol${LOOPNUMBER}_wfsref" >> $scriptfile
echo "cpsh aol${LOOPNUMBER}_wfsref0 aol${LOOPNUMBER}_wfsref" >> $scriptfile
echo "exitCLI" >> $scriptfile
echo "EOF" >> $scriptfile

if [ "$1" = "NULL" ]; then
echo "TMUX NULL"
./$scriptfile
else
echo "TMUX $1"
echo "tmux send-keys -t $1 \"./$scriptfile\""
tmux send-keys -t $1 "./$scriptfile"
fi
}








# argument is tmux session name within which command should be executed
# if agrument is NULL, execute from bash

function function_AOloopProcess_ON {

# all commands written in script file
scriptfile="script_AOloopProcess_ON"
rm $scriptfile
touch $scriptfile
chmod +x $scriptfile

echo "echo \" ON\" > ./status/stat_procON.txt" >> $scriptfile

echo "./aolconfscripts/aollog -e \"$LOOPNAME\" \"START LOOP PROCESSES\"" >> $scriptfile
tmuxname="aol${LOOPNUMBER}-ctr"
echo "unset TMUX" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
echo "tmux new-session -d -s ${tmuxname}" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
logRunningProcessQ0 "aolctr" "$tmuxname" "AO loop control prompt"

echo "tmux send-keys -t ${tmuxname} \" \" C-m" >> $scriptfile
echo "tmux send-keys -t ${tmuxname} \" \" C-m" >> $scriptfile
echo "tmux send-keys -t ${tmuxname} \"mv runproc/aolctr.runprocQ runproc/aolctr.runproc\" C-m" >> $scriptfile
echo "tmux send-keys -t ${tmuxname} \"./auxscripts/aolctr\" C-m" >> $scriptfile


echo "sleep 1" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
echo "tmux new-session -d -s aol${LOOPNUMBER}-run" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr " " C-m" >> $scriptfile
logRunningProcessQ0 "aolrun" "aol${LOOPNUMBER}-run" "AO loop real-time loop"
echo "tmux send-keys -t aol${LOOPNUMBER}-run \"mv runproc/aolrun.runprocQ runproc/aolrun.runproc\" C-m" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-run \"./auxscripts/aolrun\" C-m" >> $scriptfile

echo "sleep 1" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolsetgain 0.0\" C-m" >> $scriptfile
	


echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolon\" C-m" >> $scriptfile
echo "sleep 2" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aoloff\" C-m" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolsetgain ${loopgain}\" C-m" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolsetmaxlim ${loopmaxlim}\" C-m" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolsetmult ${loopmultcoeff}\" C-m" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"readshmim aol${LOOPNUMBER}_respM\" C-m" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolloadconf ${LOOPNUMBER}\" C-m" >> $scriptfile
echo "sleep 1" >> $scriptfile



if [ "0" -lt "$NBblocks" ]; then
ConfReadParam limitb00 "1.0"; limitb00="$paramvalue"
limitb[00]=${limitb00}
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolsetlimitb 00 ${limitb[00]}\" C-m" >> $scriptfile

ConfReadParam multfb00 "1.0"; multfb00="$paramvalue"
multfb[00]=${multfb00}
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolsetmultfb 00 ${multfb[00]}\" C-m" >> $scriptfile

ConfReadParam gainb00 "1.0"; gainb00="$paramvalue"
gainb[00]=${gainb00}
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolsetgainb 00 ${gainb[00]}\" C-m" >> $scriptfile
fi




#for i in `seq 0 $(( $NBblocks - 1 ))`;
#do
#	     gi=$(printf "%02d" "$i")

#		ConfReadParam limitb${gi} "1.0"; limitb${gi}="$paramvalue"

#		file="./conf/conf_limitb${gi}.txt"
#		if [ ! -f "$file" ]; then
#		echo "1.0" > $file
#		fi
#	     limitb[10#${gi}]=${limitb${gi}}
#	     echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolsetlimitb ${gi} ${limitb[10#${gi}]}\" C-m" >> $scriptfile


#		ConfReadParam multfb${gi} "1.0"; multfb${gi}="$paramvalue"
#		file="./conf/conf_multfb${gi}.txt"
#		if [ ! -f "$file" ]; then
#		echo "1.0" > $file
#		fi
#	     multfb[10#${gi}]=${multfb${gi}}
#	     echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolsetmultfb ${gi} ${multfb[10#${gi}]}\" C-m" >> $scriptfile

#		ConfReadParam gainb${gi} "0.0"; gainb${gi}="$paramvalue"	     
#		file="./conf/conf_gainb${gi}.txt"
#		if [ ! -f "$file" ]; then
#		echo "1.0" > $file
#		fi
#	     gainb[10#${gi}]=${gainb${gi}}
	     
#	     echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolsetmbgain ${gi} ${gainb[10#${gi}]} 0\" C-m" >> $scriptfile
#	 done

#gi="00"
#file="./conf/conf_gainb${gi}.txt"
#if [ ! -f "$file" ]; then
#echo "echo \"1.0\" > $file" >> $scriptfile
#fi
#gainb[10#${gi}]=$(cat $file )
#echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolsetmbgain ${gi} ${gainb[10#${gi}]} 1\" C-m" >> $scriptfile
#echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"# test: ${gainb[10#${gi}]}\" C-m" >> $scriptfile




#  	 echo "${gainb[${gi}]}" > ./conf/conf_gainb${gi}.txt
#  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[${gi}]} 1" C-m

if [ "$DMprimWriteON" = "1" ]; then
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolDMprimWon\" C-m" >> $scriptfile
else
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolDMprimWoff\" C-m" >> $scriptfile
fi

echo "sleep 2" >> $scriptfile

if [ "$LOOPPROCESS_ZPO" -eq "1" ]; then
# START ZERO POINT OFFSET LOOP (ZONAL, CPU-BASED)
tmuxname="aol${LOOPNUMBER}wfszpo"
echo "tmux kill-session -t $tmuxname" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
echo "tmux new-session -d -s $tmuxname" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
logRunningProcessQ0 "aolzpwfscloop" "$tmuxname" "AO loop zero point offset (zonal, CPU-based)"
echo "tmux send-keys -t ${tmuxname} \"mv runproc/aolzpwfscloop.runprocQ runproc/aolzpwfscloop.runproc\" C-m" >> $scriptfile
echo "tmux send-keys -t $tmuxname \"$execname -n aol${LOOPNUMBER}wfszpo\" C-m" >> $scriptfile
if [ "$CPUconfRT" -eq "1" ];then
echo "tmux send-keys -t $tmuxname \"csetpmove aol${LOOPNUMBER}RT\" C-m" >> $scriptfile
fi
echo "tmux send-keys -t $tmuxname \"readshmim aol${LOOPNUMBER}_wfsref\" C-m" >> $scriptfile
echo "tmux send-keys -t $tmuxname \"readshmim aol${LOOPNUMBER}_wfsref0\" C-m" >> $scriptfile
echo "tmux send-keys -t $tmuxname \"aolzpwfscloop aol${LOOPNUMBER}_wfszpo 8 aol${LOOPNUMBER}_wfsref0 aol${LOOPNUMBER}_wfsref\" C-m" >> $scriptfile
fi


ConfReadParam DMMODE "0"; DMMODE="$paramvalue" # DM index 
if [ "$CMMODE" = "0" ]; then  # if CM multiplication outputs modes
#echo "Linking    /tmp/aol${LOOPNUMBER}_DMmode_meas.im.shm  - /tmp/aol${LOOPNUMBER}_modeval.im.shm"
echo "rm /tmp/aol${LOOPNUMBER}_modeval.im.shm" >> $scriptfile
echo "ln -s /tmp/aol${LOOPNUMBER}_DMmode_meas.im.shm /tmp/aol${LOOPNUMBER}_modeval.im.shm" >> $scriptfile
fi


# EXTRACT WFS MODES
# process runs in GPU set aol#RT1
if [ "$LOOPPROCESS_EXTRWFSMODES" -eq "1" ]; then
tmuxname="aol${LOOPNUMBER}mexwfs"
echo "tmux kill-session -t $tmuxname" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
echo "tmux new-session -d -s $tmuxname" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
logRunningProcessQ0 "modesextractwfs" "$tmuxname" "AO loop extract WFS modes"
echo "tmux send-keys -t ${tmuxname} \"mv runproc/modesextractwfs.runprocQ runproc/modesextractwfs.runproc\" C-m" >> $scriptfile
if [ "$CMMODE" -eq "1" ]; then
echo "tmux send-keys -t $tmuxname \"./auxscripts/modesextractwfs ${GPUmodesextrwfs}\" C-m" >> $scriptfile
else
echo "tmux send-keys -t $tmuxname \"./auxscripts/modesextractwfs -r ${GPUmodesextrwfs}\" C-m" >> $scriptfile
fi
fi


# wait to ensure that modesextractwfs has created aol${LOOPNUMBER}_modeval
echo "sleep 0.2" >> $scriptfile

# process runs in CPU set aol#RT
if [ "$LOOPPROCESS_EXTROLMODES" -eq "1" ]; then
tmuxname="aol${LOOPNUMBER}meol"
echo "tmux kill-session -t $tmuxname" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
echo "tmux new-session -d -s $tmuxname" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
logRunningProcessQ0 "aolcompolm" "$tmuxname" "AO loop extract open loop WFS modes"
echo "tmux send-keys -t ${tmuxname} \"mv runproc/aolcompolm.runprocQ runproc/aolcompolm.runproc\" C-m" >> $scriptfile
echo "tmux send-keys -t $tmuxname \"./AOloopControl -p ${tmuxname}\" C-m" >> $scriptfile
echo "tmux send-keys -t $tmuxname \"csetpmove aol${LOOPNUMBER}RT\" C-m" >> $scriptfile
echo "tmux send-keys -t $tmuxname \"aolcompolm ${LOOPNUMBER}\" C-m" >> $scriptfile
fi

# wait to ensure that aolcompolm has created aol${LOOPNUMBER}_modeval_dm_now_filt
echo "sleep 0.2" >> $scriptfile

# process runs in CPU set aol0RT
if [ "$LOOPPROCESS_DMFILTWB" -eq "1" ]; then
tmuxname="aol${LOOPNUMBER}dmfwb"
echo "tmux kill-session -t $tmuxname" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
echo "tmux new-session -d -s $tmuxname" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
logRunningProcessQ0 "aolmcoeffs2dmmap" "$tmuxname" "DM modal (post-filtering) write back"
echo "tmux send-keys -t ${tmuxname} \"mv runproc/aolmcoeffs2dmmap.runprocQ runproc/aolmcoeffs2dmmap.runproc\" C-m" >> $scriptfile
echo "tmux send-keys -t $tmuxname \"./auxscripts/aolmcoeffs2dmmap -p ${tmuxname} -f ${GPUdmfwb}\" C-m" >> $scriptfile
fi





if [ "$LOOPPROCESS_DMCAVE" -eq "1" ]; then
tmuxname="aol${LOOPNUMBER}dmCave"
echo "tmux kill-session -t $tmuxname" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
echo "tmux new-session -d -s $tmuxname" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
logRunningProcessQ0 "aol_dmCave" "$tmuxname" "AO loop compute time-averaged DM correction"
echo "tmux send-keys -t ${tmuxname} \"mv runproc/aol_dmCave.runprocQ runproc/aol_dmCave.runproc\" C-m" >> $scriptfile
echo "tmux send-keys -t $tmuxname \"./auxscripts/aol_dmCave 0.0005\" C-m" >> $scriptfile
fi

echo "sleep 2" >> $scriptfile
echo "./AOloopControl << EOF" >> $scriptfile
echo "readshmim aol${LOOPNUMBER}_wfszpo6" >> $scriptfile
echo "imzero aol${LOOPNUMBER}_wfszpo6" >> $scriptfile
echo "readshmim aol${LOOPNUMBER}_wfsres_ave" >> $scriptfile
echo "imzero aol${LOOPNUMBER}_wfsres_ave" >> $scriptfile
echo "readshmim aol${LOOPNUMBER}_wfsresm_ave" >> $scriptfile
echo "imzero aol${LOOPNUMBER}_wfsresm_ave" >> $scriptfile
echo "readshmim aol${LOOPNUMBER}_wfsref0" >> $scriptfile
echo "readshmim aol${LOOPNUMBER}_wfsref" >> $scriptfile
echo "cpsh aol${LOOPNUMBER}_wfsref0 aol${LOOPNUMBER}_wfsref" >> $scriptfile
echo "exitCLI" >> $scriptfile
echo "EOF" >> $scriptfile

if [ "$LOOPPROCESS_WFSRESAVE" -eq "1" ]; then
tmuxname="aol${LOOPNUMBER}wfsresave"
echo "tmux kill-session -t $tmuxname" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
echo "tmux new-session -d -s $tmuxname" >> $scriptfile
echo "sleep 0.2" >> $scriptfile
logRunningProcessQ0 "aolmkWFSres" "$tmuxname" "compute and average WFS residual"
echo "tmux send-keys -t ${tmuxname} \"mv runproc/aolmkWFSres.runprocQ runproc/aolmkWFSres.runproc\" C-m" >> $scriptfile
echo "tmux send-keys -t $tmuxname \"./auxscripts/aolmkWFSres 0.0005\" C-m" >> $scriptfile
fi


if [ "$1" = "NULL" ]; then
procONstat=" ON"
./$scriptfile
else
tmux send-keys -t $1 "./$scriptfile" C-m
fi

}

 
 
 
 
 


# argument is tmux session name within which command should be executed
# if agrument is NULL, execute from bash

function function_AOloopProcess_OFF {

# all commands written in script file
scriptfile="script_AOloopProcess_OFF"
rm $scriptfile
touch $scriptfile
chmod +x $scriptfile

echo "echo \"OFF\" > ./status/stat_procON.txt" >> $scriptfile
echo "./aolconfscripts/aollog -e \"$LOOPNAME\" \"STOP LOOP PROCESSES\"" >> $scriptfile

# TURN OFF LIMITS AUTOTUNING
if [ "$AUTOTUNELIMITS_ON" = " ON" ]; then
file="./status/stat_AUTOTUNELIMITS_ON.txt"
echo "echo \"OFF\" > $file" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolAUTOTUNELIMoff\" C-m" >> $scriptfile
fi


echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aoloff\" C-m" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolkill\" C-m" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"exitCLI\" C-m" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"rm runproc/aolctr.runproc\" C-m" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-run C-c" >> $scriptfile
echo "pkill -9 aol${LOOPNUMBER}-run" >> $scriptfile
echo "rm runproc/aolrun.runproc" >> $scriptfile

if [ "$LOOPPROCESS_ZPO" -eq "1" ]; then
echo "pkill -9 aol${LOOPNUMBER}wfszpo" >> $scriptfile
tmuxname="aol${LOOPNUMBER}wfszpo"
echo "tmux kill-session -t $tmuxname" >> $scriptfile
echo "rm runproc/aolzpwfscloop.runproc" >> $scriptfile
fi

if [ "$LOOPPROCESS_EXTRWFSMODES" -eq "1" ]; then
tmuxname="aol${LOOPNUMBER}mexwfs"
echo "tmux send-keys -t $tmuxname C-c" >> $scriptfile
echo "tmux kill-session -t $tmuxname" >> $scriptfile
echo "rm runproc/modesextractwfs.runproc" >> $scriptfile
echo "echo \"0\" > \"./status/stat_log_modeval.txt\"" >> $scriptfile
fi

if [ "$LOOPPROCESS_EXTROLMODES" -eq "1" ]; then
tmuxname="aol${LOOPNUMBER}meol"
echo "tmux send-keys -t $tmuxname C-c" >> $scriptfile
echo "tmux kill-session -t $tmuxname" >> $scriptfile
echo "rm runproc/aolcompolm.runproc" >> $scriptfile
echo "echo \"0\" > \"./status/stat_log_modeval_ol.txt\"" >> $scriptfile
fi

if [ "$LOOPPROCESS_DMFILTWB" -eq "1" ]; then
tmuxname="aol${LOOPNUMBER}dmfwb"
echo "tmux send-keys -t $tmuxname C-c" >> $scriptfile
echo "tmux kill-session -t $tmuxname" >> $scriptfile
echo "rm runproc/aolmcoeffs2dmmap.runproc" >> $scriptfile
fi

if [ "$LOOPPROCESS_DMCAVE" -eq "1" ]; then
tmuxname="aol${LOOPNUMBER}dmCave"
echo "tmux send-keys -t $tmuxname C-c" >> $scriptfile
echo "tmux kill-session -t $tmuxname" >> $scriptfile
echo "rm runproc/aol_dmCave.runproc" >> $scriptfile
fi

if [ "$LOOPPROCESS_WFSRESAVE" -eq "1" ]; then
tmuxname="aol${LOOPNUMBER}wfsresave"
echo "tmux send-keys -t $tmuxname C-c" >> $scriptfile
echo "tmux kill-session -t $tmuxname" >> $scriptfile
echo "rm runproc/aolmkWFSres.runproc" >> $scriptfile
fi

if [ "$procWFSres2refONstat" = " ON" ]; then
tmuxname="aol${LOOPNUMBER}wfsresoffl"
file="./status/stat_procWFSres2refON.txt"
echo "echo \"OFF\" > $file" >> $scriptfile
echo "tmux send-keys -t $tmuxname C-c" >> $scriptfile
echo "tmux kill-session -t $tmuxname" >> $scriptfile
fi





if [ "$1" = "NULL" ]; then
./$scriptfile
else
tmux send-keys -t $1 "./$scriptfile" C-m
fi

}










# argument is tmux session name within which command should be executed
# if agrument is NULL, execute from bash

function function_LOOP_ON {

# all commands written in script file
scriptfile="script_AOloop_ON"
rm $scriptfile
touch $scriptfile
chmod +x $scriptfile

echo "echo \" ON\" > ./status/stat_loopON.txt" >> $scriptfile
echo "./aolconfscripts/aollog -e \"$LOOPNAME\" \"LOOP ON [gain = ${loopgain}   maxlim = ${loopmaxlim}   multcoeff = ${loopmultcoeff}]\"" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aolon\" C-m" >> $scriptfile
echo "./setupAOloopON" >> $scriptfile



if [ "$1" = "NULL" ]; then
./$scriptfile

loopONstat=" ON"


ConfReadParam logMode "0"; logMode="$paramvalue" # LOG mode
if [ "$logMode" = "1" ]; then   # log when loop is closed
start_Telemetrylog_all
fi

else
tmux send-keys -t $1 "./$scriptfile" C-m
fi

}





# argument is tmux session name within which command should be executed
# if agrument is NULL, execute from bash

function function_LOOP_OFF {
	
# all commands written in script file
scriptfile="script_AOloop_OFF"
rm $scriptfile
touch $scriptfile
chmod +x $scriptfile



echo "echo \"OFF\" > ./status/stat_loopON.txt" >> $scriptfile
echo "./aolconfscripts/aollog -e \"$LOOPNAME\" \"LOOP OFF\"" >> $scriptfile
echo "tmux send-keys -t aol${LOOPNUMBER}-ctr \"aoloff\" C-m" >> $scriptfile
echo "./setupAOloopOFF" >> $scriptfile



if [ "$1" = "NULL" ]; then
./$scriptfile
loopONstat="OFF"

ConfReadParam logMode "0"; logMode="$paramvalue" # LOG mode

if [ "$logMode" =  "1" ]; then  # log when loop is closed
stop_Telemetrylog_all
fi

else
tmux send-keys -t $1 "./$scriptfile" C-m
fi

}


# args : 
function function_zplon
{
echo " ON" > ./status/stat_zploopON$1.txt
tmuxnameZP="aol${LOOPNUMBER}zploop$1"
unset TMUX
sleep 0.2
tmux new-session -d -s $tmuxnameZP
sleep 0.2
tmux send-keys -t $tmuxnameZP "$execname -n aol${LOOPNUMBER}zploop$1" C-m
if [ "$CPUconfRT" -eq "1" ];then
tmux send-keys -t $tmuxnameZP "csetpmove aol${LOOPNUMBER}RT" C-m
fi
tmux send-keys -t $tmuxnameZP "readshmim aol${LOOPNUMBER}_wfszpo$1" C-m
tmux send-keys -t $tmuxnameZP "readshmim aol${LOOPNUMBER}_dmZP$1" C-m
tmux send-keys -t $tmuxnameZP "readshmim aol${LOOPNUMBER}_zrespM" C-m
tmux send-keys -t $tmuxnameZP "listim" C-m
tmux send-keys -t $tmuxnameZP "aolzpwfsloop aol${LOOPNUMBER}_dmZP$1 aol${LOOPNUMBER}_zrespM aol${LOOPNUMBER}_wfszpo$1" C-m
}

function function_zploff
{
echo "OFF" > ./status/stat_zploopON$1.txt
tmuxnameZP="aol${LOOPNUMBER}zploop$1"
tmux kill-session -t $tmuxnameZP
}
