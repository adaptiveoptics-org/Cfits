#!/bin/bash



if [ ! -v aolconfFLAG ]; then
echo "ERROR: This script should be called from aolconf main script"
exit
fi



# DM mode
# ZONAL : physical actuators on spatial coordinates
# MODAL : each DM actuiator represents a single WF mode
DMMODEfile="conf/conf_DMMODE.txt"
if [ -f $DMMODEfile ]; then
DMMODE=$( cat ${DMMODEfile} )
else
DMMODE="ZONAL"
echo "$DMMODE" > $DMMODEfile
fi




RMZONALCALIBlist="wfsref0 zrespM wfsmap dmmap wfsmask dmmaskRM dmslaved dmmask"
RMMODALCALIBlist="LODMmodes LOrespM LOwfsref0"

















function function_configureloop_readparams {

loopfrequ="2000.0"
if [ -f "./conf/conf_loopfrequ.txt" ]; then
loopfrequ=$( cat ./conf/conf_loopfrequ.txt )
fi

hardwlatency="0.001"
if [ -f "./conf/conf_hardwlatency.txt" ]; then
hardwlatency=$( cat ./conf/conf_hardwlatency.txt )
hardwlatency_frame=$( cat ./conf/conf_hardwlatency_frame.txt )
fi

complatency="0.0002"
if [ -f "./conf/conf_complatency_frame.txt" ]; then
complatency=$( cat ./conf/conf_complatency.txt )
complatency_frame=$( cat ./conf/conf_complatency_frame.txt )
fi

wfsmextrlatency="0.0004"
if [ -f "./conf/conf_wfsmextrlatency.txt" ]; then
wfsmextrlatency=$( cat ./conf/conf_wfsmextrlatency.txt )
wfsmextrlatency_frame=$( cat ./conf/conf_wfsmextrlatency_frame.txt )
fi



wfslambdanm="800"
if [ -f "./conf/conf_wfslambdanm.txt" ]; then
wfslambdanm=$( cat ./conf/conf_wfslambdanm.txt )
fi



file="conf/conf_MASKS_LOCK.txt"
if [ -a $file ]
	then
	MASKS_LOCK=$(cat $file)
	else
	MASKS_LOCK="0"
fi


ACzrmtime="600.0"
if [ -f "./conf/conf_ACzrmtime.txt" ]; then
ACzrmtime=$( cat ./conf/conf_ACzrmtime.txt )
fi

ACzrmNBcycle="5"
if [ -f "./conf/conf_ACzrmNBcycle.txt" ]; then
ACzrmNBcycle=$( cat ./conf/conf_ACzrmNBcycle.txt )
fi



if [ "$DMMODE" = "ZONAL" ]; then
ACmrmtime="60.0"
if [ -f "./conf/conf_ACmrmtime.txt" ]; then
ACmrmtime=$( cat ./conf/conf_ACmrmtime.txt )
fi

ACmrmNBcycle="5"
if [ -f "./conf/conf_ACmrmNBcycle.txt" ]; then
ACmrmNBcycle=$( cat ./conf/conf_ACmrmNBcycle.txt )
fi
fi



rmdelayfr=2
if [ -f "./conf/conf_RMdelayfr.txt" ]; then
rmdelayfr=$( cat ./conf/conf_RMdelayfr.txt )
fi

rmfrave=5
if [ -f "./conf/conf_RMfrave.txt" ]; then
rmfrave=$( cat ./conf/conf_RMfrave.txt )
fi

rmexfr=5
if [ -f "./conf/conf_RMexfr.txt" ]; then
rmexfr=$( cat ./conf/conf_RMexfr.txt )
fi

# compute acquisition time
RMacqTimeZ=$( echo $loopfrequ $rmfrave $rmexfr $ACzrmNBcycle | awk '{printf("%8.3f", 2.0*($2+$3)*$4/$1*2048)}' )




rmamplum=0.05
if [ -f "./conf/conf_RMamplum.txt" ]; then
rmamplum=$( cat ./conf/conf_RMamplum.txt )
fi


delayRM1us="0"
if [ -f "./conf/conf_delayRM1us.txt" ]; then
delayRM1us=$( cat ./conf/conf_delayRM1us.txt )
fi


nblatm=100
if [ -f "./conf/conf_nblatm.txt" ]; then
nblatm=$( cat ./conf/conf_nblatm.txt )
fi



if [ -f "./conf/conf_RMpokeMode.txt" ]; then
	RMpokeMode=$( cat ./conf/conf_RMpokeMode.txt )
	else
	RMpokeMode="0" # default
fi
if [ "${RMpokeMode}" -eq "0" ]; then
	rm ./conf/RMpokeCube.fits
	else
	cp ./conf/Hpoke.fits ./conf/RMpokeCube.fits
fi



if [ -f "./conf/conf_WFSnormalize.txt" ]; then
WFSnorm=$( cat ./conf/conf_WFSnormalize.txt )
else
WFSnorm="0" # default
echo "0" > ./conf/conf_WFSnormalize.txt
fi



zrespMstat=$( cat ./status/stat_zrespM.txt )
if [[ -f "./status/stat_zrespM.txt" && ( "$zrespMstat" = " ON" || "$zrespMstat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_zrespM.txt
zrespMstat="OFF"
fi


zrespmatnbiter=$( cat zresptmp/zrespmat_nbiter.txt )





if [ "$DMMODE" = "ZONAL" ]; then


DMmaskRMp0=0.2
if [ -f "./conf/conf_DMmaskRMp0.txt" ]; then
DMmaskRMp0=$( cat ./conf/conf_DMmaskRMp0.txt )
fi

DMmaskRMc0=1.0
if [ -f "./conf/conf_DMmaskRMc0.txt" ]; then
DMmaskRMc0=$( cat ./conf/conf_DMmaskRMc0.txt )
fi

DMmaskRMp1=0.5
if [ -f "./conf/conf_DMmaskRMp1.txt" ]; then
DMmaskRMp1=$( cat ./conf/conf_DMmaskRMp1.txt )
fi

DMmaskRMc1=0.4
if [ -f "./conf/conf_DMmaskRMc1.txt" ]; then
DMmaskRMc1=$( cat ./conf/conf_DMmaskRMc1.txt )
fi



WFSmaskRMp0=0.2
if [ -f "./conf/conf_WFSmaskRMp0.txt" ]; then
WFSmaskRMp0=$( cat ./conf/conf_WFSmaskRMp0.txt )
fi

WFSmaskRMc0=1.0
if [ -f "./conf/conf_WFSmaskRMc0.txt" ]; then
WFSmaskRMc0=$( cat ./conf/conf_WFSmaskRMc0.txt )
fi

WFSmaskRMp1=0.5
if [ -f "./conf/conf_WFSmaskRMp1.txt" ]; then
WFSmaskRMp1=$( cat ./conf/conf_WFSmaskRMp1.txt )
fi

WFSmaskRMc1=0.4
if [ -f "./conf/conf_WFSmaskRMc1.txt" ]; then
WFSmaskRMc1=$( cat ./conf/conf_WFSmaskRMc1.txt )
fi



WFSmaskSNRr=0.05
if [ -f "./conf/conf_WFSmaskSNRr.txt" ]; then
WFSmaskSNRr=$( cat ./conf/conf_WFSmaskSNRr.txt )
fi

else
DMmaskRMp0=0
DMmaskRMc0=0
DMmaskRMp1=0
DMmaskRMc1=0
fi





if [ "$DMMODE" = "ZONAL" ]; then


RMmodal=$( cat ./conf/conf_RMmodal.txt )
if [[ -f "./conf/conf_RMmodal.txt" && ( "$RMmodal" = " ON" || "$RMmodal" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./conf/conf_RMmodal.txt
RMmodal="OFF"
aoconflog "RMmodal not (properly) set -> SETTING TO OFF"
fi



RMmodal=$( cat ./conf/conf_RMmodal.txt )
if [ "${RMmodal}" = "OFF" ];
then
    menuitems+=( "RMMon" "           RM modal is currently OFF. Select to toggle to ON" )
fi
if [ "${RMmodal}" = " ON" ];
then

    rmMamplum=0.1
   
    if [ -f "./conf/conf_RMMamplum.txt" ]; then
        rmMamplum=$( cat ./conf/conf_RMMamplum.txt )
    fi
   

    rmMcpa=1.0
   
    if [ -f "./conf/conf_RMMcpa.txt" ]; then
        rmMcpa=$( cat ./conf/conf_RMMcpa.txt )
    fi
   

    LOrespMstat=$( cat ./status/stat_LOrespM.txt )
   
    if [[ -f "./status/stat_LOrespM.txt" && ( "$LOrespMstat" = " ON" || "$LOrespMstat" = "OFF" ) ]]; then
        echo "OK"
    else
        echo "OFF" > ./status/stat_LOrespM.txt
        LOrespMstat="OFF"
    fi

    LOrespmatnbiter=$( cat zresptmp/LOrespmat_nbiter.txt )


fi

fi






}














#
# TOP LEVEL AUTO CALIBRATION ACQUIRE
#
function function_nAUTOC {
	
echo "ENTERING function_nAUTOC"



if [ ! -f "runproc/FUNCTION_nAUTOC.runproc" ]; then
echo "start calib"
aoconflogext "START AUTO CALIBRATION"

tmuxname="aol${LOOPNUMBER}arespM"
logRunningProcess "FUNCTION_nAUTOC" "$tmuxname" "=== ACQUIRE RM(s) ==="


# archive
dirnb=20
i0=`( printf "%03d" "$dirnb" )`
rm -rf conf_staged.$i0


# save old RMs
while [ $dirnb -gt 0 ]; do
	i=$(($dirnb))
	i1=$(($dirnb-1))
	is=`( printf "%03d" "$i" )`
	i1s=`( printf "%03d" "$i1" )`
	mv conf_staged.$i1s conf_staged.$is
	let dirnb-=1
done    
 
cp -rf conf_staged conf_staged.000

# this function populates conf_staged directory
function_acqWFSresp

tmux send-keys -t ${tmuxname} "rm runproc/FUNCTION_nAUTOC.runproc" C-m

else
echo "already running"
fi

}








function function_acqWFSresp_LOmodes {
tmuxnameaWFSr="aol${LOOPNUMBER}arespM"

# ACQUIRE LOW ORDER RESPONSE
#
# INPUT:
#	respM_LOmodes.fits
#
# OUTPUT:
#	LOzrespmat0.fits
#	LOwfsref0.fits
#
tmux send-keys -t ${tmuxnameaWFSr} "./aolconfscripts/aollog -e \"$LOOPNAME\" \"START LO RM acquisition   CPA=$rmMcpa  amp=$rmMamplum delay=$rmdelayfr frame NBframe_average $rmfrave frame, $rmexfr frame excluded\" &" C-m
#tmux send-keys -t ${tmuxnameaWFSr} "dologext $LOOPNAME START LO RM acquisition   CPA=$rmMcpa  amp=$rmMamplum delay=$rmdelayfr frame NBframe_average $rmfrave frame, $rmexfr frame excluded &" C-m


logRunningProcessQ "aolMeasureLOrespmat2" "${tmuxnameaWFSr}" "Acquire LO RM"
if pgrep "aol${LOOPNUMBER}run" > /dev/null
then # use option -r to re-use AO shared memory configuration
	echo "./auxscripts/aolMeasureLOrespmat2 -r -n ${ACmrmNBcycle} -d ${delayRM1us} ${rmMamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" >> cmdlog.txt
    tmux send-keys -t ${tmuxnameaWFSr} "./auxscripts/aolMeasureLOrespmat2 -r -n ${ACmrmNBcycle} -d ${delayRM1us} ${rmMamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" C-m
else
	echo "./auxscripts/aolMeasureLOrespmat2 -n ${ACmrmNBcycle} -d ${delayRM1us} ${rmMamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" >> cmdlog.txt
    tmux send-keys -t ${tmuxnameaWFSr} "./auxscripts/aolMeasureLOrespmat2 -n ${ACmrmNBcycle} -d ${delayRM1us} ${rmMamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" C-m
fi
tmux send-keys -t ${tmuxnameaWFSr} "rm runproc/aolMeasureLOrespmat2.runproc" C-m

tmux send-keys -t ${tmuxnameaWFSr} "./aolconfscripts/aollog -e \"$LOOPNAME\" \"STOP LO RM acquisition   CPA=$rmMcpa  amp=$rmMamplum delay=$rmdelayfr frame NBframe_average $rmfrave frame, $rmexfr frame excluded\" &" C-m
#tmux send-keys -t ${tmuxnameaWFSr} "dologext $LOOPNAME STOP LO RM acquisition   CPA=$rmMcpa  amp=$rmMamplum delay=$rmdelayfr frame NBframe_average $rmfrave frame, $rmexfr frame excluded &" C-m

}









function function_acqWFSresp {
tmuxnameaWFSr="aol${LOOPNUMBER}arespM"


# STAGING DIRECTORIES
dir_conf_staged="conf_staged"

aCALIBdatestr=`date -u +%Y-%m-%d_%H:%M:%S`
sleep 0.2
tmux new-session -d -s ${tmuxnameaWFSr}
sleep 0.2
logRunningProcessQ "aolMeasureZrespmat2" "$tmuxnameaWFSr" "Acquire zonal RM"

# ACQUIRE HIGH ORDER WFS RESPONSE: 
#
# INPUT:
# 	conf/RMpokeCube.fits  (poke sequence)
#		if file does not exist, create straight poke sequence (one actuator at a time) 
#
# OUTPUT: 
# 	zrespmat0.fits
#	wfsref00.fits
#

tmux send-keys -t ${tmuxnameaWFSr} "./aolconfscripts/aollog -e \"$LOOPNAME\" \"START HO RM acquision   amplitude $rmamplum um, time delay $rmdelayfr frame, NB frame average $rmfrave frame, $rmexfr frame excluded, delayRM1us = ${delayRM1us}, NBcycle=${ACzrmNBcycle}\"" C-m
tmux send-keys -t ${tmuxnameaWFSr} "date" C-m

if pgrep "aol${LOOPNUMBER}run" > /dev/null
then # use option -r to re-use AO shared memory configuration
	echo "./auxscripts/aolMeasureZrespmat2 -c aol${LOOPNUMBER}RT2 -r -n ${ACzrmNBcycle} -d ${delayRM1us} ${rmamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" >> cmdlog.txt
    tmux send-keys -t ${tmuxnameaWFSr} "./auxscripts/aolMeasureZrespmat2 -c aol${LOOPNUMBER}RT2 -r -n ${ACzrmNBcycle} -d ${delayRM1us} ${rmamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" C-m
else
    echo "./auxscripts/aolMeasureZrespmat2 -c aol${LOOPNUMBER}RT2 -n ${ACzrmNBcycle} -d ${delayRM1us} ${rmamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" >> cmdlog.txt
    tmux send-keys -t ${tmuxnameaWFSr} "./auxscripts/aolMeasureZrespmat2 -c aol${LOOPNUMBER}RT2 -n ${ACzrmNBcycle} -d ${delayRM1us} ${rmamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" C-m
fi
tmux send-keys -t ${tmuxnameaWFSr} "./aolconfscripts/aollog -e \"$LOOPNAME\" \"STOP HO RM acquision   amplitude $rmamplum um, time delay $rmdelayfr frame, NB frame average $rmfrave frame, $rmexfr frame excluded, delayRM1us = ${delayRM1us}, NBcycle=${ACzrmNBcycle}\"" C-m
tmux send-keys -t ${tmuxnameaWFSr} "rm runproc/aolMeasureZrespmat2.runproc" C-m



if [ "$DMMODE" = "ZONAL" ]; then

if [ "$RMCalibReuseMasks" = "1" ]; then
# reuse modes
function_acqWFSresp_LOmodes
fi

fi



# PROCESS & DECODE HIGH ORDER WFS RESPONSE: 
#
# INPUT:
#	zrespmat0.fits
#	wfsref00.fits 
#	
# OPTIONAL INPUT:
# 	./conf/RMpokeCube.fits
#	./conf/RMmat.fits
#	./conf/RMpixindex.fits
#		if these 3 files exist, use them to decode the zrespmat0.fits
#	
# OUTPUT:
#	./conf_zrm_staged/zrespM.fits
#	./conf_zrm_staged/wfsmap.fits
#	./conf_zrm_staged/dmmap.fits   
#

logRunningProcessQ "aolCleanZrespmat2" "${tmuxnameaWFSr}" "Clean zonal RM"
tmux send-keys -t ${tmuxnameaWFSr} "./auxscripts/aolCleanZrespmat2" C-m
stageddir="conf_zrm_staged"
mkdir -p $stageddir
tmux send-keys -t ${tmuxnameaWFSr} "cp zrespM.fits $stageddir" C-m
tmux send-keys -t ${tmuxnameaWFSr} "cp wfsmap.fits $stageddir" C-m
tmux send-keys -t ${tmuxnameaWFSr} "cp dmmap.fits $stageddir" C-m
tmux send-keys -t ${tmuxnameaWFSr} "rm runproc/aolCleanZrespmat2.runproc" C-m



if [ "$RMCalibReuseMasks" = "0" ]; then
# MAKE MASKS  
# 
# INPUT:
#     ./conf_zrm_staged/zrespM.fits
# OUTPUT:
#     wfsmask.fits  (overwrite)
#     dmmaskRM.fits (overwrite)
#
logRunningProcessQ "aolmkMasks" "${tmuxnameaWFSr}" "Make masks"
tmux send-keys -t ${tmuxnameaWFSr} "./auxscripts/aolmkMasks" C-m
if [ "$DMMODE" = "MODAL" ]; then  # set dmmaskRM.fits to 1.0 over all pixels
	tmux send-keys -t ${tmuxnameaWFSr} "$execname" C-m
	tmux send-keys -t ${tmuxnameaWFSr} "readshmim aol${LOOPNUMBER}_dmC" C-m
	tmux send-keys -t ${tmuxnameaWFSr} "im0=0*aol${LOOPNUMBER}_dmC" C-m
	tmux send-keys -t ${tmuxnameaWFSr} "dmmaskRM=1.0+im0" C-m
	tmux send-keys -t ${tmuxnameaWFSr} "savefits dmmaskRM \"!dmmaskRM.fits\"" C-m
	tmux send-keys -t ${tmuxnameaWFSr} "exitCLI" C-m	
fi
tmux send-keys -t ${tmuxnameaWFSr} "rm runproc/aolmkMasks.runproc" C-m




# MAKE SLAVED ACTUATOR DM MASK: dmmaskRM.fits -> dmslaved.fits, dmmask.fits
# 
# INPUT:
#	dmmaskRM.fits
# OUTPUT:
#	dmslaved.fits  (overwrite)
#	dmmask.fits    (overwrite)
#

if [ "$DMMODE" = "ZONAL" ]; then
	logRunningProcessQ "mkDMslaveActprox" "${tmuxnameaWFSr}" "Make slaved actuator DM mask"
	tmux send-keys -t ${tmuxnameaWFSr} "./auxscripts/mkDMslaveActprox dmmaskRM.fits 2.5" C-m
	tmux send-keys -t ${tmuxnameaWFSr} "rm runproc/mkDMslaveActprox.runproc" C-m
else # set dmmask to 1, dmslaved to 0
	tmux send-keys -t ${tmuxnameaWFSr} "$execname" C-m
	tmux send-keys -t ${tmuxnameaWFSr} "readshmim aol${LOOPNUMBER}_dmC" C-m
	tmux send-keys -t ${tmuxnameaWFSr} "im0=0*aol${LOOPNUMBER}_dmC" C-m
	tmux send-keys -t ${tmuxnameaWFSr} "dmmask=1.0+im0" C-m
	tmux send-keys -t ${tmuxnameaWFSr} "savefits dmmask \"!dmmask.fits\"" C-m
	tmux send-keys -t ${tmuxnameaWFSr} "savefits im0 \"!dmslaved.fits\"" C-m
	tmux send-keys -t ${tmuxnameaWFSr} "exitCLI" C-m	
fi

fi  # end of if [ "$RMCalibReuseMasks" = "0" ]; then



# UPDATE wfsref00 TO NORMALIZE FLUX OVER wfsmask 
# 
# INPUT
#	wfsref00.fits
#	wfsmask.fits
#
# OUTPUT
#	wfsref0.fits
#
tmux send-keys -t ${tmuxnameaWFSr} "$execname" C-m
tmux send-keys -t ${tmuxnameaWFSr} "loadfits wfsref00.fits im0" C-m
tmux send-keys -t ${tmuxnameaWFSr} "loadfits wfsmask.fits wfm" C-m
tmux send-keys -t ${tmuxnameaWFSr} "a=itot(im0)/itot(im0*wfm)" C-m
tmux send-keys -t ${tmuxnameaWFSr} "im1=im0*a" C-m
tmux send-keys -t ${tmuxnameaWFSr} "savefits im1 \"!wfsref0.fits\"" C-m
tmux send-keys -t ${tmuxnameaWFSr} "listim" C-m
tmux send-keys -t ${tmuxnameaWFSr} "exitCLI" C-m


# COPY TO ARCHIVE
for imname in $RMZONALCALIBlist
do
	mkdir -p ${imname}
	tmux send-keys -t ${tmuxnameaWFSr} "cp ${imname}.fits ${imname}/${imname}_${aCALIBdatestr}.fits" C-m
done



if [ "$DMMODE" = "ZONAL" ]; then


# MAKE LOW ORDER MODES 
#
# INPUT:
#	dmslaved.fits
#	dmmask.fits
#
# OUTPUT:
#	respM_LOmodes.fits
#
if [ "$RMCalibReuseMasks" = "0" ]; then
tmux send-keys -t ${tmuxnameaWFSr} "# DMMODE is ZONAL -> MAKING LOW ORDER MODES" C-m
logRunningProcessQ "aolmkLO_DMmodes" "${tmuxnameaWFSr}" "Make LO DM modes"
tmux send-keys -t ${tmuxnameaWFSr} "./auxscripts/aolmkLO_DMmodes ${rmMcpa}" C-m
tmux send-keys -t ${tmuxnameaWFSr} "rm runproc/aolmkLO_DMmodes.runproc" C-m
fi


# ACQUIRE LOW ORDER RESPONSE
#
# INPUT:
#	respM_LOmodes.fits
#
# OUTPUT:
#	LOzrespmat0.fits
#	LOwfsref0.fits
#

if [ "$RMCalibReuseMasks" = "0" ]; then
# don'r reuse modes
function_acqWFSresp_LOmodes
fi


# COPY LOW ORDER RESPONSE TO ARCHIVE
for imname in $RMMODALCALIBlist
do
	mkdir -p ${imname}
	tmux send-keys -t ${tmuxnameaWFSr} "cp ${imname}.fits ${imname}/${imname}_${aCALIBdatestr}.fits" C-m
done


else
tmux send-keys -t ${tmuxnameaWFSr} "# DMMODE is MODAL = $DMMODE" C-m
fi




# copy file names in conf_<name>_name.txt files in staged directory
dir="$dir_conf_staged"
mkdir -p $dir

if [ "$DMMODE" = "ZONAL" ]; then
	for imname in $RMZONALCALIBlist $RMMODALCALIBlist
	do
		tmux send-keys -t ${tmuxnameaWFSr} "echo \"${imname}/${imname}_${aCALIBdatestr}.fits\" > ./${dir}/conf_${imname}_name.txt" C-m
		tmux send-keys -t ${tmuxnameaWFSr} "mv ${imname}.fits ./${dir}/" C-m
	done
else
	for imname in $RMZONALCALIBlist
	do
		tmux send-keys -t ${tmuxnameaWFSr} "echo \"${imname}/${imname}_${aCALIBdatestr}.fits\" > ./${dir}/conf_${imname}_name.txt" C-m
		tmux send-keys -t ${tmuxnameaWFSr} "mv ${imname}.fits ./${dir}/" C-m
	done
fi
tmux send-keys -t ${tmuxnameaWFSr} "# DMMODE = $DMMODE" C-m
tmux send-keys -t ${tmuxnameaWFSr} "./aolconfscripts/aollog -e \"$LOOPNAME\" \"AUTO CALIBRATION DONE\"" C-m



#tmux send-keys -t ${tmuxnameaWFSr} "dologext $LOOPNAME STOP AUTO CALIBRATION &" C-m


# =============================================================================================================
#       AT THIS POINT, EVERYTHING IS IN STAGED DIRECTORY AS FITS FILES WITH TIME STAMPED NAMES
#             FILES ARE ALSO PRESENT IN CURRENT DIRECTORY, WITHOUT TIME STAMP
# =============================================================================================================

}







#function function_zresp_on {
#zrespMstat=" ON"
#tmuxname="aol${LOOPNUMBER}zrespM"
#rm function_zresp_off.wait
#echo " ON" > ./status/stat_zrespM.txt
#logRunningProcess "aolMeasureZrespmat" "$tmuxname" "Measuring zonal response matrix"

#tmux new-session -d -s $tmuxname
#if pgrep "aol${LOOPNUMBER}run" > /dev/null
#then # use option -r to re-use AO shared memory configuration
#    tmux send-keys -t $tmuxname "./auxscripts/aolMeasureZrespmat -c aol${LOOPNUMBER}RT2 -r -n ${ACzrmNBcycle} -d ${delayRM1us} ${rmamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" C-m
#else
#    tmux send-keys -t $tmuxname "./auxscripts/aolMeasureZrespmat -c aol${LOOPNUMBER}RT2 -n ${ACzrmNBcycle} -d ${delayRM1us} ${rmamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" C-m
#fi

#tmux send-keys -t ${tmuxname} "touch function_zresp_off.wait" C-m

#echo "./auxscripts/aolMeasureZrespmat -c aol${LOOPNUMBER}RT2 -n ${ACzrmNBcycle} -d ${delayRM1us} ${rmamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" > aolcmd.txt
#aoconflogext "START HO RM acquision   amplitude $rmamplum um, time delay $rmdelayfr frame(s), NB frame average $rmfrave frame(s), $rmexfr frame(s) excluded, delayRM1us = ${delayRM1us}, NBcycle=${ACzrmNBcycle}"
#}


##
## arg 1 is time [sec] until zresp process will be stopped
##
#function function_zresp_off 
#{
#zrespMstat="OFF"
#echo "OFF" > ./status/stat_zrespM.txt
#tmuxname="aol${LOOPNUMBER}zrespMc"
#tmux new-session -d -s ${tmuxname}
##tmux send-keys -t ${tmuxname} "rm function_zresp_off.wait" C-m
##tmux send-keys -t ${tmuxname} "sleep $1 && touch function_zresp_off.wait &" C-m
#tmux send-keys -t ${tmuxname} "./auxscripts/waitforfilek -t $1 function_zresp_off.wait" C-m
#tmux send-keys -t ${tmuxname} "pkill -USR2 aol${LOOPNUMBER}zrespM" C-m
#tmux send-keys -t ${tmuxname} "echo \"OFF\" > ./status/stat_zrespM.txt" C-m
#tmux send-keys -t ${tmuxname} "rm runproc/aolMeasureZrespmat.runproc" C-m
#tmux send-keys -t ${tmuxname} "sleep 0.2" C-m
#tmux send-keys -t ${tmuxname} "rm function_zresp_off.wait" C-m
#aoconflogext "STOP HO RM acquision in $1 sec max"

#tmux send-keys -t ${tmuxname} "./auxscripts/aolCleanZrespmat ${rmamplum} ${WFSnorm} ${DMmaskRMp0} ${DMmaskRMc0} ${DMmaskRMp1} ${DMmaskRMc1}" C-m
#logRunningProcess "aolCleanZrespmat" "$tmuxname" "Process zonal response matrix"
#tmux send-keys -t  ${tmuxname} "echo \"./auxscripts/aolCleanZrespmat ${rmamplum} ${WFSnorm} ${DMmaskRMp0} ${DMmaskRMc0} ${DMmaskRMp1} ${DMmaskRMc1}\" >> aolcmd.txt" C-m

#tmux send-keys -t ${tmuxname} "./auxscripts/aolmkMasks" C-m
#tmux send-keys -t ${tmuxname} "./auxscripts/mkDMslaveActprox dmmaskRM.fits 2.5" C-m



#mkdir -p zrespM
#mkdir -p wfsref
#mkdir -p wfsref0
#mkdir -p wfsmap
#mkdir -p dmmap
#mkdir -p wfsmask

#if [ "$DMMODE" = "ZONAL" ]; then
#mkdir -p dmmask
#mkdir -p dmmaskRM
#mkdir -p dmslaved
#fi

#if [ "$DMMODE" = "ZONAL" ]; then
#if [ "$MASKS_LOCK" -eq "1" ]; then
#tmux send-keys -t ${tmuxname} "cp ./conf/dmmask.LOCK.fits dmmask.fits" C-m
#tmux send-keys -t ${tmuxname} "cp ./conf/dmmaskRM.LOCK.fits dmmaskRM.fits" C-m
#tmux send-keys -t ${tmuxname} "cp ./conf/dmslaved.LOCK.fits dmslaved.fits" C-m
#tmux send-keys -t ${tmuxname} "cp ./conf/wfsmask.LOCK.fits wfsmask.fits" C-m
#fi
#fi


#zCALIBdatestr=`date -u +%Y-%m-%d_%H:%M:%S`
#tmux send-keys -t ${tmuxname} "cp wfsmask.fits wfsmask/wfsmask_${zCALIBdatestr}.fits" C-m
#tmux send-keys -t ${tmuxname} "cp zrespmat.fits zrespM/zrespM_${zCALIBdatestr}.fits" C-m
#tmux send-keys -t ${tmuxname} "cp wfsref0.fits wfsref0/wfsref0_${zCALIBdatestr}.fits" C-m
#tmux send-keys -t ${tmuxname} "cp wfsmap.fits wfsmap/wfsmap_${zCALIBdatestr}.fits" C-m
#tmux send-keys -t ${tmuxname} "cp dmmap.fits dmmap/dmmap_${zCALIBdatestr}.fits" C-m

#if [ "$DMMODE" = "ZONAL" ]; then
#tmux send-keys -t ${tmuxname} "cp dmmask.fits dmmask/dmmask_${zCALIBdatestr}.fits" C-m
#tmux send-keys -t ${tmuxname} "cp dmslaved.fits dmslaved/dmslaved_${zCALIBdatestr}.fits" C-m
#tmux send-keys -t ${tmuxname} "cp dmmaskRM.fits dmmaskRM/dmmaskRM_${zCALIBdatestr}.fits" C-m
#fi

## move from staged to ./conf/
#UpdateCalib_staged_zrm_tmux "${tmuxname}"

#tmux send-keys -t ${tmuxname} "rm runproc/aolCleanZrespmat.runproc" C-m
#}



function function_upzrm_tmux ()
{
sleep 0.2
tmux new-session -d -s $1
sleep 0.2
logRunningProcess "aolupzrm" "$1" "Update zonal response matrix calibration to latest"
tmux send-keys -t $1 "cp ${dir_conf_staged}/conf_*.txt ./conf/" C-m
tmux send-keys -t $1 "rm runproc/aolupzrm.runproc" C-m
}


function function_SMloadzrm_tmux ()
{
sleep 0.2
tmux new-session -d -s $1
sleep 0.2
logRunningProcess "SMloadzrm" "$1" "Load zonal response matrix files to shared memory"

tmux send-keys -t $1 "./auxscripts/aolReadConfFile \"zrespM\"" C-m
tmux send-keys -t $1 "./auxscripts/aolgetshmimsize aol${LOOPNUMBER}_zrespM" C-m

tmux send-keys -t $1 "./auxscripts/aolReadConfFile \"wfsref0\"" C-m
tmux send-keys -t $1 "./auxscripts/aolgetshmimsize aol${LOOPNUMBER}_wfsref0" C-m

tmux send-keys -t $1 "./auxscripts/aolReadConfFile \"wfsmap\"" C-m
tmux send-keys -t $1 "./auxscripts/aolgetshmimsize aol${LOOPNUMBER}_wfsmap" C-m

tmux send-keys -t $1 "./auxscripts/aolReadConfFile \"dmmap\"" C-m
tmux send-keys -t $1 "./auxscripts/aolgetshmimsize aol${LOOPNUMBER}_dmmap" C-m

tmux send-keys -t $1 "./auxscripts/aolReadConfFile \"wfsmask\"" C-m
tmux send-keys -t $1 "./auxscripts/aolgetshmimsize aol${LOOPNUMBER}_wfsmask" C-m

tmux send-keys -t $1 "./auxscripts/aolReadConfFile \"dmmaskRM\"" C-m

if [ "$DMMODE" = "ZONAL" ]; then
tmux send-keys -t $1 "./auxscripts/aolgetshmimsize aol${LOOPNUMBER}_dmmaskRM" C-m
tmux send-keys -t $1 "./auxscripts/aolReadConfFile \"dmslaved\"" C-m
tmux send-keys -t $1 "./auxscripts/aolgetshmimsize aol${LOOPNUMBER}_dmslaved" C-m
tmux send-keys -t $1 "./auxscripts/aolReadConfFile \"dmmask\"" C-m
tmux send-keys -t $1 "./auxscripts/aolgetshmimsize aol${LOOPNUMBER}_dmmask" C-m
fi
tmux send-keys -t $1 "rm runproc/SMloadzrm.runproc" C-m
}




function UpdateModes ()
{
aoconflog "UpdateModes"
value=${SVDlim[10#${mb}]}
SelectValue01 100 1001 50
SVDlim[10#${mb}]=${value}
echo "${SVDlim[10#${mb}]}" > ./conf/block${mb}_SVDlim.txt
tmuxname="aol${LOOPNUMBER}mkmodes"
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "export CUDA_VISIBLE_DEVICES=0" C-m
tmux send-keys -t $tmuxname "./auxscripts/aolmkmodes ${cpamax} ${mb} ${SVDlim[10#${mb}]}" C-m
tmux send-keys -t aol${LOOPNUMBER}mkmodes "touch mkmodes.run0" C-m
waitforfile mkmodes.run0
rm mkmodes.run0
upMODESdatestr=`date -u +%Y-%m-%d_%H:%M:%S`

tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodesall.fits DMmodes/DMmodes_${upMODESdatestr}.fits" C-m
echo "DMmodes/DMmodes_${upMODESdatestr}.fits" > ./conf/conf_DMmodes_name.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodesWFSall.fits respM/respM_${upMODESdatestr}.fits" C-m
echo "respM/respM_${upMODESdatestr}.fits" > ./conf/conf_respM_name.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmat.fits contrM/contrM_${upMODESdatestr}.fits" C-m
echo "contrM/contrM_${upMODESdatestr}.fits" > ./conf/conf_contrM_name.txt


i2="$mb"

tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodes_${i2}.fits DMmodes/DMmodes${i2}_${upMODESdatestr}.fits" C-m
echo "DMmodes/DMmodes${i2}_${upMODESdatestr}.fits" > ./conf/conf_DMmodes${i2}_name.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodesWFS_${i2}.fits respM/respM${i2}_${upMODESdatestr}.fits" C-m
echo "respM/respM${i2}_${upMODESdatestr}.fits" > ./conf/conf_respM${i2}_name.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmat_${i2}.fits contrM/contrM${i2}_${upMODESdatestr}.fits" C-m
echo "contrM/contrM${i2}_${upMODESdatestr}.fits" > ./conf/conf_contrM${i2}_name.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmatc_${i2}.fits contrMc/contrMc${i2}_${upMODESdatestr}.fits" C-m
echo "contrMc/contrMc${i2}_${upMODESdatestr}.fits" > ./conf/conf_contrMc${i2}_name.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmatcact_${i2}.fits contrMcact/contrMcact${i2}_${upMODESdatestr}.fits" C-m
echo "contrMcact/contrMcact${i2}_${upMODESdatestr}.fits" > ./conf/conf_contrMcact${i2}_name.txt



tmux send-keys -t aol${LOOPNUMBER}mkmodes "touch mkmodes.run" C-m
waitforfile mkmodes.run


ReadConfFile "DMmodes"
ReadConfFile "respM"
ReadConfFile "contrM"

i2="${mb}"
ReadConfFile "DMmodes${i2}"
ReadConfFile "respM${i2}"
ReadConfFile "contrM${i2}"
ReadConfFile "contrMc${i2}"
ReadConfFile "contrMcact${i2}_00"
}






# STAGING DIRECTORIES
dir_conf_staged="conf_staged"





function UpdateCalib_staged_zrm {
dir="$dir_conf_staged"
mkdir -p $dir

echo "zrespM/zrespM_${zCALIBdatestr}.fits" > ./${dir}/conf_zrespM_name.txt
mv zrespmat.fits ./${dir}/
echo "wfsref0/wfsref0_${zCALIBdatestr}.fits" > ./${dir}/conf_wfsref0_name.txt
mv  wfsref0.fits ./${dir}/
echo "wfsmap/wfsmap_${zCALIBdatestr}.fits" > ./${dir}/conf_wfsmap_name.txt
mv wfsmap.fits ./${dir}/
echo "dmmap/dmmap_${zCALIBdatestr}.fits" > ./${dir}/conf_dmmap_name.txt
mv dmmap.fits ./${dir}/
echo "wfsmask/wfsmask_${zCALIBdatestr}.fits" > ./${dir}/conf_wfsmask_name.txt
mv wfsmap.fits ./${dir}/

if [ "$DMMODE" = "ZONAL" ]; then
echo "dmmaskRM/dmmaskRM_${zCALIBdatestr}.fits" > ./${dir}/conf_dmmaskRM_name.txt
mv dmmaskRM.fits ./${dir}/
echo "dmslaved/dmslaved_${zCALIBdatestr}.fits" > ./${dir}/conf_dmslaved_name.txt
mv dmslaved.fits ./${dir}/
echo "dmmask/dmmask_${zCALIBdatestr}.fits" > ./${dir}/conf_dmmask_name.txt
mv dmmask.fits ./${dir}/
fi

}


function UpdateCalib_staged_zrm_tmux {
dir="$dir_conf_staged"
mkdir -p $dir
tmux send-keys -t $1 "echo \"zrespM/zrespM_${zCALIBdatestr}.fits\" > ./${dir}/conf_zrespM_name.txt" C-m
tmux send-keys -t $1 "mv zrespmat.fits ./${dir}/" C-m
tmux send-keys -t $1 "echo \"wfsref0/wfsref0_${zCALIBdatestr}.fits\" > ./${dir}/conf_wfsref0_name.txt" C-m
tmux send-keys -t $1 "mv  wfsref0.fits ./${dir}/" C-m
tmux send-keys -t $1 "echo \"wfsmap/wfsmap_${zCALIBdatestr}.fits\" > ./${dir}/conf_wfsmap_name.txt" C-m
tmux send-keys -t $1 "mv wfsmap.fits ./${dir}/" C-m
tmux send-keys -t $1 "echo \"dmmap/dmmap_${zCALIBdatestr}.fits\" > ./${dir}/conf_dmmap_name.txt" C-m
tmux send-keys -t $1 "mv dmmap.fits ./${dir}/" C-m
tmux send-keys -t $1 "echo \"wfsmask/wfsmask_${zCALIBdatestr}.fits\" > ./${dir}/conf_wfsmask_name.txt" C-m
tmux send-keys -t $1 "mv wfsmap.fits ./${dir}/" C-m

if [ "$DMMODE" = "ZONAL" ]; then
tmux send-keys -t $1 "echo \"dmmaskRM/dmmaskRM_${zCALIBdatestr}.fits\" > ./${dir}/conf_dmmaskRM_name.txt" C-m
tmux send-keys -t $1 "mv dmmaskRM.fits ./${dir}/" C-m
tmux send-keys -t $1 "echo \"dmslaved/dmslaved_${zCALIBdatestr}.fits\" > ./${dir}/conf_dmslaved_name.txt" C-m
tmux send-keys -t $1 "mv dmslaved.fits ./${dir}/" C-m
tmux send-keys -t $1 "echo \"dmmask/dmmask_${zCALIBdatestr}.fits\" > ./${dir}/conf_dmmask_name.txt" C-m
tmux send-keys -t $1 "mv dmmask.fits ./${dir}/" C-m
fi
}




function function_LOresp_on_tmux ()
{
LOrespMstat=" ON"
rm function_LOresp_off.wait
sleep 0.2
tmux new-session -d -s $1
sleep 0.2
tmux send-keys -t $1 "./auxscripts/waitonfile function_LOresp_on_tmux.lock" C-m
tmux send-keys -t $1 "echo \" ON\" > ./status/stat_LOrespM.txt" C-m
logRunningProcess "aolMeasureLOrespmat" "$1" "Acquiring LO modal response matrix"
tmux send-keys -t $1 "./auxscripts/aolmkLO_DMmodes ${rmMcpa}" C-m

if pgrep "aol${LOOPNUMBER}run" > /dev/null
then # use option -r to re-use AO shared memory configuration
    tmux send-keys -t $1 "./auxscripts/aolMeasureLOrespmat -r -n ${ACmrmNBcycle} -d ${delayRM1us} ${rmMamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" C-m
else
    tmux send-keys -t $1 "./auxscripts/aolMeasureLOrespmat -n ${ACmrmNBcycle} -d ${delayRM1us} ${rmMamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" C-m
fi
echo "./auxscripts/aolMeasureLOrespmat -n ${ACmrmNBcycle} -d ${delayRM1us} ${rmMamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" > aolcmd.txt
aoconflogext "START LO RM acquisition   CPA=$rmMcpa  amp=$rmMamplum delay=$rmdelayfr frame NBframe_average $rmfrave frames, $rmexfr frames excluded"

tmux send-keys -t ${tmuxname} "touch function_LOresp_off.wait" C-m
tmux send-keys -t $1 "rm runproc/aolMeasureLOrespmat.runproc" C-m
}



function function_LOresp_off_tmux ()
{
sleep 0.2
tmux new-session -d -s $1
sleep 0.2
LOrespMstat="OFF"
tmux send-keys -t $1 "./auxscripts/waitonfile function_LOresp_off_tmux.lock" C-m
#tmux send-keys -t ${tmuxname} "rm function_LOresp_off.wait" C-m
#tmux send-keys -t ${tmuxname} "sleep $2 && touch function_LOresp_off.wait &" C-m
tmux send-keys -t ${tmuxname} "./auxscripts/waitforfilek -t $2 function_LOresp_off.wait" C-m

tmux send-keys -t $1 "pkill -USR1 aol${LOOPNUMBER}LOrespM" C-m
tmux send-keys -t $1 "echo \"OFF\" > ./status/stat_LOrespM.txt" C-m
tmux send-keys -t $1 "rm runproc/aolMeasureLOrespmat.runproc" C-m
tmux send-keys -t $1 "sleep 0.2" C-m
tmux send-keys -t ${tmuxname} "rm function_LOresp_off.wait" C-m
aoconflogext "STOP LO RM acquisition"
tmux send-keys -t $1 "./auxscripts/aolCleanLOrespmat ${rmMamplum} ${WFSnorm}" C-m
echo "./auxscripts/aolCleanLOrespmat ${rmamplum} ${WFSnorm}" >> aolcmd.txt
logRunningProcess "aolCleanLOrespmat" "$1" "Process LO modal response matrix"

mkdir -p LOrespM
mkdir -p LODMmodes
mkdir -p LOwfsref
mkdir -p LOwfsref0
mkdir -p LOwfsmap
mkdir -p LOdmmap
mkdir -p LOwfsmask
mkdir -p LOdmmask
mCALIBdatestr=`date -u +%Y-%m-%d_%H:%M:%S`
tmux send-keys -t $1 "cp LOrespmat.fits LOrespM/LOrespM_${mCALIBdatestr}.fits" C-m
tmux send-keys -t $1 "cp respM_LOmodes.fits LODMmodes/LODMmodes_${mCALIBdatestr}.fits" C-m
tmux send-keys -t $1 "cp LOwfsref0.fits LOwfsref0/LOwfsref0_${mCALIBdatestr}.fits" C-m
tmux send-keys -t $1 "cp LOwfsmap.fits LOwfsmap/LOwfsmap_${mCALIBdatestr}.fits" C-m
tmux send-keys -t $1 "cp LOdmmap.fits LOdmmap/LOdmmap_${mCALIBdatestr}.fits" C-m
tmux send-keys -t $1 "cp LOwfsmask.fits LOwfsmask/LOwfsmask_${mCALIBdatestr}.fits" C-m
tmux send-keys -t $1 "cp LOdmmask.fits LOdmmask/LOdmmask_${mCALIBdatestr}.fits" C-m


#rm cleanLOresp.run

#tmux send-keys -t $1 "touch cleanLOresp.run" C-m
#tmux send-keys -t $1 "exit" C-m
#waitforfile cleanLOresp.run
#rm cleanLOresp.run
UpdateCalib_staged_mrm_tmux "$1"
tmux send-keys -t $1 "rm runproc/aolCleanLOrespmat.runproc" C-m
}


function function_upmrm_tmux ()
{
sleep 0.2
tmux new-session -d -s $1
sleep 0.2
logRunningProcess "aolupmrm" "$1" "Update LO modal response matrix calibration to latest"
tmux send-keys -t $1 "cp ${dir_conf_staged}/conf_*.txt ./conf/" C-m
tmux send-keys -t $1 "rm runproc/aolupmrm.runproc" C-m
}



function function_SMloadmrm_tmux ()
{
sleep 0.2
tmux new-session -d -s $1
sleep 0.2
logRunningProcess "SMloadmrm" "$1" "Load LO modal response matrix files to shared memory"
tmux send-keys -t $1 "./auxscripts/aolReadConfFile \"LOrespM\"" C-m
tmux send-keys -t $1 "./auxscripts/aolgetshmimsize aol${LOOPNUMBER}_LOrespM" C-m
tmux send-keys -t $1 "./auxscripts/aolReadConfFile \"LODMmodes\"" C-m
tmux send-keys -t $1 "./auxscripts/aolgetshmimsize aol${LOOPNUMBER}_LODMmodes" C-m
tmux send-keys -t $1 "rm runproc/SMloadmrm.runproc" C-m
}





function UpdateCalib_staged_mrm {
dir="$dir_conf_staged"
mkdir -p $dir

echo "LOrespM/LOrespM_${mCALIBdatestr}.fits" > ./${dir}/conf_LOrespM_name.txt
mv LOrespmat.fits ./${dir}/
echo "LODMmodes/LODMmodes_${mCALIBdatestr}.fits" > ./${dir}/conf_LODMmodes_name.txt
mv respM_LOmodes.fits ./${dir}/
echo "LOwfsref0/LOwfsref0_${mCALIBdatestr}.fits" > ./${dir}/conf_LOwfsref0_name.txt
mv LOwfsref0.fits ./${dir}/
echo "LOwfsmap/LOwfsmap_${mCALIBdatestr}.fits" > ./${dir}/conf_LOwfsmap_name.txt
mv LOwfsmap.fits ./${dir}/
echo "LOdmmap/LOdmmap_${mCALIBdatestr}.fits" > ./${dir}/conf_LOdmmap_name.txt
mv LOdmmap.fits ./${dir}/
echo "LOwfsmask/LOwfsmask_${mCALIBdatestr}.fits" > ./${dir}/conf_LOwfsmask_name.txt
mv LOwfsmask.fits ./${dir}/
echo "LOdmmask/LOdmmask_${mCALIBdatestr}.fits" > ./${dir}/conf_LOdmmask_name.txt
mv LOdmmask.fits ./${dir}/
}


function UpdateCalib_staged_mrm_tmux {
dir="$dir_conf_staged"
mkdir -p $dir

tmux send-keys -t $1 "echo \"LOrespM/LOrespM_${mCALIBdatestr}.fits\" > ./${dir}/conf_LOrespM_name.txt" C-m
tmux send-keys -t $1 "mv LOrespmat.fits ./${dir}/" C-m
tmux send-keys -t $1 "echo \"LODMmodes/LODMmodes_${mCALIBdatestr}.fits\" > ./${dir}/conf_LODMmodes_name.txt" C-m
tmux send-keys -t $1 "mv respM_LOmodes.fits ./${dir}/" C-m
tmux send-keys -t $1 "echo \"LOwfsref0/LOwfsref0_${mCALIBdatestr}.fits\" > ./${dir}/conf_LOwfsref0_name.txt" C-m
tmux send-keys -t $1 "mv LOwfsref0.fits ./${dir}/" C-m
tmux send-keys -t $1 "echo \"LOwfsmap/LOwfsmap_${mCALIBdatestr}.fits\" > ./${dir}/conf_LOwfsmap_name.txt" C-m
tmux send-keys -t $1 "mv LOwfsmap.fits ./${dir}/" C-m
tmux send-keys -t $1 "echo \"LOdmmap/LOdmmap_${mCALIBdatestr}.fits\" > ./${dir}/conf_LOdmmap_name.txt" C-m
tmux send-keys -t $1 "mv LOdmmap.fits ./${dir}/" C-m
tmux send-keys -t $1 "echo \"LOwfsmask/LOwfsmask_${mCALIBdatestr}.fits\" > ./${dir}/conf_LOwfsmask_name.txt" C-m
tmux send-keys -t $1 "mv LOwfsmask.fits ./${dir}/" C-m
tmux send-keys -t $1 "echo \"LOdmmask/LOdmmask_${mCALIBdatestr}.fits\" > ./${dir}/conf_LOdmmask_name.txt" C-m
tmux send-keys -t $1 "mv LOdmmask.fits ./${dir}/" C-m
}



