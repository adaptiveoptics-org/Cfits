#!/bin/bash


if [ ! -v aolconfFLAG ]; then
echo "ERROR: This script should be called from aolconf main script"
exit
fi










function UpdateModes {
aoconflog "UpdateModes"
value=${SVDlim[10#${mb}]}
SelectValue01 100 1001 50
SVDlim[10#${mb}]=${value}
echo "${SVDlim[10#${mb}]}" > ./conf/block${mb}_SVDlim.txt
tmuxname="aol${LOOPNUMBER}mkmodes"
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "export CUDA_VISIBLE_DEVICES=0" C-m
tmux send-keys -t $tmuxname "./auxscripts/aolmkmodes ${cpamax} ${mb} ${SVDlim[10#${mb}]}" C-m
tmux send-keys -t aol${LOOPNUMBER}mkmodes "touch mkmodes.run0" C-m
waitforfile mkmodes.run0
rm mkmodes.run0
datestr=`date -u +%Y-%m-%d_%H:%M:%S`

tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodesall.fits DMmodes/DMmodes_${datestr}.fits" C-m
echo "DMmodes/DMmodes_${datestr}.fits" > ./conf/conf_DMmodes_name.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodesWFSall.fits respM/respM_${datestr}.fits" C-m
echo "respM/respM_${datestr}.fits" > ./conf/conf_respM_name.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmat.fits contrM/contrM_${datestr}.fits" C-m
echo "contrM/contrM_${datestr}.fits" > ./conf/conf_contrM_name.txt


i2="$mb"

tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodes_${i2}.fits DMmodes/DMmodes${i2}_${datestr}.fits" C-m
echo "DMmodes/DMmodes${i2}_${datestr}.fits" > ./conf/conf_DMmodes${i2}_name.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/fmodesWFS_${i2}.fits respM/respM${i2}_${datestr}.fits" C-m
echo "respM/respM${i2}_${datestr}.fits" > ./conf/conf_respM${i2}_name.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmat_${i2}.fits contrM/contrM${i2}_${datestr}.fits" C-m
echo "contrM/contrM${i2}_${datestr}.fits" > ./conf/conf_contrM${i2}_name.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmatc_${i2}.fits contrMc/contrMc${i2}_${datestr}.fits" C-m
echo "contrMc/contrMc${i2}_${datestr}.fits" > ./conf/conf_contrMc${i2}_name.txt

tmux send-keys -t $tmuxname "cp ./mkmodestmp/cmatcact_${i2}.fits contrMcact/contrMcact${i2}_${datestr}.fits" C-m
echo "contrMcact/contrMcact${i2}_${datestr}.fits" > ./conf/conf_contrMcact${i2}_name.txt



tmux send-keys -t aol${LOOPNUMBER}mkmodes "touch mkmodes.run" C-m
waitforfile mkmodes.run


ReadConfFile "DMmodes"
ReadConfFile "respM"
ReadConfFile "contrM"

i2="${mb}"
ReadConfFile "DMmodes${i2}"
ReadConfFile "respM${i2}"
ReadConfFile "contrM${i2}"
ReadConfFile "contrMc${i2}"
ReadConfFile "contrMcact${i2}_00"
}







# =====================================================
# =============== CONFIGURE AO LOOP ===================
# =====================================================

if [ $state = "menuconfigureloop" ]; then
stateok=1
dateUTC=$( date -u )
#aoconflog "$0 state = ${state}"
menuname="\Zb\Zu LOOP CONFIGURATION, GPU ALLOCATION\Zn  [ $dateUTC ]\n 
Notations: \n      
  \Z4shared memory stream\Zn\n
  \Zufile system FITS file\Zn\n   
  \Z1missing file or stream\Zn\n
\n
For all configurations files (not including Hardware I/O links) :\n
  File \Zbconf/conf_<name>_name.txt\Zn contains the original .fits file path and name\n
  A symbolic link to the FITS file is written as \Zuconf/aol${LOOPNUMBER}_<name>.fits\Zn\n
  File is loaded in shared memory as /tmp/\Z4aol${LOOPNUMBER}_<name>\Zn.im.shm\n
"

confOK=1
stringcenter "HELP"
menuitems=( "H" "\Zb\Zr\Z4$string\Zn" )
menuitems+=( " " " " )

stringcenter "HARDWARE INFO AND I/O LINKS [shared memory sim links]"
menuitems+=( "1 ->" "\Zb\Zr$string\Zn" )

loopfrequ="2000.0"
if [ -f "./conf/conf_loopfrequ.txt" ]; then
loopfrequ=$( cat ./conf/conf_loopfrequ.txt )
fi
menuitems+=( "lfreq" "            Loop Frequ                        ${loopfrequ} Hz" )

loophlat="2.1"
if [ -f "./conf/conf_loophlat.txt" ]; then
loophlat=$( cat ./conf/conf_loophlat.txt )
fi
menuitems+=( "lhlat" "            Hardware Latency                  ${loophlat} frame" )

loopclat="0.6"
if [ -f "./conf/conf_loopclat.txt" ]; then
loopclat=$( cat ./conf/conf_loopclat.txt )
fi
menuitems+=( "lclat" "            Computing Latency                 ${loopclat} frame" )

loopwlat="0.6"
if [ -f "./conf/conf_loopwlat.txt" ]; then
loopwlat=$( cat ./conf/conf_loopwlat.txt )
fi
menuitems+=( "lwlat" "            WFS modes extraction Latency      ${loopwlat} frame" )





dmCfile="/tmp/aol${LOOPNUMBER}_dmC.im.shm"
if [ -f $dmCfile ]; then
#getshmimsize aol${LOOPNUMBER}_dmC
sizestring=$( cat conf/conf_imsize_aol${LOOPNUMBER}_dmC.txt )
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "dmC" "[\Z2\Zr${OKstr}\Zn] DM control channel        \Z4\Zbaol${LOOPNUMBER}_dmC\Zn -> \Z4${dmC}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmC" "[${OKstr}] DM control channel        \Z4\Zbaol${LOOPNUMBER}_dmC\Zn -> \Z1${dmC}\Zn" )
confOK=0
fi


dmOfile="/tmp/aol${LOOPNUMBER}_dmO.im.shm"
if [ -f $dmOfile ]; then
#getshmimsize aol${LOOPNUMBER}_dmO
sizestring=$( cat conf/conf_imsize_aol${LOOPNUMBER}_dmO.txt )
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "dmO" "[\Z2\Zr${OKstr}\Zn] DM offset channel         \Z4\Zbaol${LOOPNUMBER}_dmO\Zn -> \Z4${dmO}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmO" "[${OKstr}] DM offset channel        \Z4\Zbaol${LOOPNUMBER}_dmO\Zn -> \Z1${dmO}\Zn" )
confOK=0
fi



dmZP0file="/tmp/aol${LOOPNUMBER}_dmZP0.im.shm"
if [ -f $dmZP0file ]; then
#getshmimsize aol${LOOPNUMBER}_dmZP0
sizestring=$( cat conf/conf_imsize_aol${LOOPNUMBER}_dmZP0.txt )
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "dmZP0" "[${OKstr}] DM control offset chan.  \Z4\Zbaol${LOOPNUMBER}_dmZP0\Zn -> \Z4${dmZP0}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmZP0" "[${OKstr}] DM control offset chan.  \Z4\Zbaol${LOOPNUMBER}_dmZP0\Zn -> \Z1${dmZP0}\Zn" )
confOK=0
fi

dmZP1file="/tmp/aol${LOOPNUMBER}_dmZP1.im.shm"
if [ -f $dmZP1file ]; then
#getshmimsize aol${LOOPNUMBER}_dmZP1
sizestring=$( cat conf/conf_imsize_aol${LOOPNUMBER}_dmZP1.txt )
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "dmZP1" "[${OKstr}] DM control offset chan.  \Z4\Zbaol${LOOPNUMBER}_dmZP1\Zn -> \Z4${dmZP1}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmZP1" "[${OKstr}] DM control offset chan.  \Z4\Zbaol${LOOPNUMBER}_dmZP1\Zn -> \Z1${dmZP1}\Zn" )
confOK=0
fi

dmZP2file="/tmp/aol${LOOPNUMBER}_dmZP2.im.shm"
if [ -f $dmZP2file ]; then
#getshmimsize aol${LOOPNUMBER}_dmZP2
sizestring=$( cat conf/conf_imsize_aol${LOOPNUMBER}_dmZP2.txt )
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "dmZP2" "[${OKstr}] DM control offset chan.  \Z4\Zbaol${LOOPNUMBER}_dmZP2\Zn -> \Z4${dmZP2}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmZP2" "[${OKstr}] DM control offset chan.  \Z4\Zbaol${LOOPNUMBER}_dmZP2\Zn -> \Z1${dmZP2}\Zn" )
confOK=0
fi

dmZP3file="/tmp/aol${LOOPNUMBER}_dmZP3.im.shm"
if [ -f $dmZP3file ]; then
#getshmimsize aol${LOOPNUMBER}_dmZP3
sizestring=$( cat conf/conf_imsize_aol${LOOPNUMBER}_dmZP3.txt )
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "dmZP3" "[${OKstr}] DM control offset chan.  \Z4\Zbaol${LOOPNUMBER}_dmZP3\Zn -> \Z4${dmZP3}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmZP3" "[${OKstr}] DM control offset chan.  \Z4\Zbaol${LOOPNUMBER}_dmZP3\Zn -> \Z1${dmZP3}\Zn" )
confOK=0
fi

dmZP4file="/tmp/aol${LOOPNUMBER}_dmZP4.im.shm"
if [ -f $dmZP4file ]; then
#getshmimsize aol${LOOPNUMBER}_dmZP4
sizestring=$( cat conf/conf_imsize_aol${LOOPNUMBER}_dmZP4.txt )
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "dmZP4" "[${OKstr}] DM control offset chan.  \Z4\Zbaol${LOOPNUMBER}_dmZP4\Zn -> \Z4${dmZP4}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmZP4" "[${OKstr}] DM control offset chan.  \Z4\Zbaol${LOOPNUMBER}_dmZP4\Zn -> \Z1${dmZP4}\Zn" )
confOK=0
fi



dmdispfile="/tmp/aol${LOOPNUMBER}_dmdisp.im.shm"
if [ -f $dmdispfile ]; then
#getshmimsize aol${LOOPNUMBER}_dmdisp
sizestring=$( cat conf/conf_imsize_aol${LOOPNUMBER}_dmdisp.txt )
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "dmdisp" "[${OKstr}] DM total displacement  \Z4\Zbaol${LOOPNUMBER}_dmdisp\Zn -> \Z4${dmdisp}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmdisp" "[${OKstr}] DM total displacement  \Z4\Zbaol${LOOPNUMBER}_dmdisp\Zn -> \Z1${dmdisp}\Zn" )
confOK=0
fi


dmRMfile="/tmp/aol${LOOPNUMBER}_dmRM.im.shm"
if [ -f $dmRMfile ]; then
#getshmimsize aol${LOOPNUMBER}_dmRM
sizestring=$( cat conf/conf_imsize_aol${LOOPNUMBER}_dmRM.txt )
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "dmRM" "[${OKstr}] DM RM acqu channel      \Z4\Zbaol${LOOPNUMBER}_dmdRM\Zn -> \Z4${dmRM}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "dmRM" "[${OKstr}] DM RM acqu channel      \Z4\Zbaol${LOOPNUMBER}_dmRM\Zn -> \Z1${dmRM}\Z1" )
confOK=0
fi


wfsimcamfile="/tmp/aol${LOOPNUMBER}_wfsim.im.shm"
if [ -f $wfsimcamfile ]; then
#getshmimsize aol${LOOPNUMBER}_wfsim
sizestring=$( cat conf/conf_imsize_aol${LOOPNUMBER}_wfsim.txt )
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "wfs" "[${OKstr}] WFS camera image        \Z4\Zbaol${LOOPNUMBER}_wfsim\Zn -> \Z4${wfsimcam}\Zn" )
else
OKstr="\Z1\Zb  MISSING \Zn"
menuitems+=( "wfs" "[${OKstr}] WFS camera image        \Z4\Zbaol${LOOPNUMBER}_wfsim\Zn -> \Z1${wfsimcam}\Zn" )
confOK=0
fi




menuitems+=( " " " " )
stringcenter "I/O PRE-PROCESSING [FITS files] "
menuitems+=( "2 ->" "\Zb\Zr$string\Zn" )
 

wfsdarkfname="/tmp/aol${LOOPNUMBER}_wfsdark.im.shm"
if [ -f "$wfsdarkfname" ]; then
#getshmimsize aol${LOOPNUMBER}_wfsdark
sizestring=$( cat conf/conf_imsize_aol${LOOPNUMBER}_wfsdark.txt )
OKstr="\Z2\Zr$sizestring\Zn"
menuitems+=( "wfsdark" "[${OKstr}] WFS camera dark        \Z4\Zbaol${LOOPNUMBER}_wfsdark\Zn" )
else
OKstr="\Z5 OPTIONAL \Zn"
menuitems+=( "dark" "[${OKstr}] WFS dark                  {\Z4${wfsdarkfname}\Zn}" )
confOK=0
fi


#acqudarkstat=$( cat ./status/stat_acqudark.txt )
#if [ "${acqudarkstat}" = "OFF" ];
#then
menuitems+=( "adark_on" "             Acquire WFS dark (10000 frames) -> aol${LOOPNUMBER}_wfsdark" )
#fi
#if [ "${acqudarkstat}" = " ON" ];
#then
#menuitems+=( "adarkoff" "\Z1\Zr             STOP WFS dark acquisition                     \Zn" )
#fi




menuitems+=( " " " " )


menuitems+=( "smlock" "Set locked masks to current masks")

file="conf/conf_MASKS_LOCK.txt"
if [ -a $file ]
	then
	MASKS_LOCK=$(cat $file)
	else
	MASKS_LOCK="0"
fi
if [ "$MASKS_LOCK" -eq "1" ]; then
menuitems+=( "mlock" "\Z1\Zr[$MASKS_LOCK] Toggle Lock WFS and DM masks\Zn" )
else
menuitems+=( "mlock" "[$MASKS_LOCK] Toggle Lock WFS and DM masks" )
fi




menuitems+=( " " " " )
stringcenter "SYSTEM CALIBRATION (ZONAL)"
menuitems+=( "3 ->" "\Zb\Zr$string\Zn" )

menuitems+=( "Sconf" "        \Zb\ZuSAVE CURRENT SYSTEM CALIBRATION\Zn" )
menuitems+=( "Lconf" "        \Zb\ZuLOAD SYSTEM CALIBRATION\Zn  (last loaded: ${confnameloaded})" )
menuitems+=( " " " " )

rmamplum=0.05
if [ -f "./conf/conf_RMamplum.txt" ]; then
rmamplum=$( cat ./conf/conf_RMamplum.txt )
fi
menuitems+=( "rmamp" "            RM amplitude                    ${rmamplum} um" )

rmdelayfr=2
if [ -f "./conf/conf_RMdelayfr.txt" ]; then
rmdelayfr=$( cat ./conf/conf_RMdelayfr.txt )
fi
menuitems+=( "rmdelay" "            RM time delay                   ${rmdelayfr} frame(s)" )

rmfrave=5
if [ -f "./conf/conf_RMfrave.txt" ]; then
rmfrave=$( cat ./conf/conf_RMfrave.txt )
fi
menuitems+=( "rmnbfr" "            RM frame averaging              ${rmfrave} frame(s)" )


rmexfr=5
if [ -f "./conf/conf_RMexfr.txt" ]; then
rmexfr=$( cat ./conf/conf_RMexfr.txt )
fi
menuitems+=( "rmexfr" "            RM excluded frames              ${rmexfr} frame(s)" )

nblatm=100
if [ -f "./conf/conf_nblatm.txt" ]; then
nblatm=$( cat ./conf/conf_nblatm.txt )
fi
menuitems+=( "mlat" "            Measure Latency                 ${nblatm} frame(s)" )


makemenuitemstringaolshm "zrespM" "Zonal Resp Mat"
menuitems+=( "zrespM" "$menustring" )

menuitems+=( "zrmcust" "Make Custom RM and masks from zrespmat.fits and wfsref0.fits" )


if [ -f "./conf/conf_RMpokeMode.txt" ]; then
RMpokeMode=$( cat ./conf/conf_RMpokeMode.txt )
else
RMpokeMode="0" # default
fi
if [ "${RMpokeMode}" -eq "0" ]; then
rm ./conf/RMpokeCube.fits
else
cp ./conf/Hpoke.fits ./conf/RMpokeCube.fits
fi

if [ "${RMpokeMode}" -eq "0" ]; then
menuitems+=( "Hon" "Turn Hadamard mode on")
else
menuitems+=( "Hoff" "Turn Hadamard mode off")
fi



if [ -f "./conf/conf_WFSnormalize.txt" ]; then
WFSnorm=$( cat ./conf/conf_WFSnormalize.txt )
else
WFSnorm="0" # default
fi

if [ "${WFSnorm}" -eq "0" ]; then
menuitems+=( "WFSNon" "Turn WFS normalization on")
else
menuitems+=( "WFSNoff" "Turn WFS normalization off")
fi



zrespMstat=$( cat ./status/stat_zrespM.txt )
if [[ -f "./status/stat_zrespM.txt" && ( "$zrespMstat" = " ON" || "$zrespMstat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_zrespM.txt
fi






zrespmatnbiter=$( cat zresptmp/zrespmat_nbiter.txt )
if [ "${zrespMstat}" = "OFF" ];
then
menuitems+=( "zresp_on" "[Hadamard = ${RMpokeMode}][normalize = ${WFSnorm}] \Zb\Zu ==== START zonal RMs acquisition ====\ZB\ZU" )
if [ "${zrespmatnbiter}" -lt 4 ]; then
menuitems+=( " " "[${zrespmatnbiter} matrices available] \Z1Need > 4 matrices to CLEAN and average zonal RMs\Zn")
else
menuitems+=( "zrespc" "[${zrespmatnbiter} matrices] CLEAN and average zonal RMs")
fi

#menuitems+=( "zrespoff" "            PROCESS zrespM" )
menuitems+=( " " " ")
else
menuitems+=( "zrespoff" "\Z1\ZrSTOP zonal RM acquisition\Zn" )
if [ "${zrespmatnbiter}" -lt 4 ]; then
menuitems+=( " " "[${zrespmatnbiter} matrices available] \Z1Need > 4 matrices to CLEAN and average zonal RMs\Zn")
else
menuitems+=( "zrespc" "CLEAN currently accumulated zonal RMs (${zrespmatnbiter} matrices)")
fi

menuitems+=( "zrespmon" "             Monitor tmux session zrespM${LOOPNUMBER}" )
fi



makemenuitemstringaolshm "wfsmask" "WFS pixel mask"
menuitems+=( "wfsM" "$menustring" )

makemenuitemstringaolshm "dmmap" "DM influence map"
menuitems+=( "dmmap" "$menustring" )

makemenuitemstringaolshm "dmmaskRM" "DM actuator mask"
menuitems+=( "dmMrm" "$menustring" )

makemenuitemstringaolshm "dmslaved" "DM slaved act mask"
menuitems+=( "dmSlM" "$menustring" )

makemenuitemstringaolshm "dmmask" "extended DM act mask"
menuitems+=( "dmM" "$menustring" )

makemenuitemstringaolshm "wfsref0" "WFS reference"
menuitems+=( "wfsref0" "$menustring" )



acquwfsref0stat=$( cat ./status/stat_acquwfsref0.txt )
if [[ -f "./status/stat_acquwfsref0.txt" && ( "$acquwfsref0stat" = " ON" || "$acquwfsref0stat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_acquwfsref0.txt
fi

acquwfsref0stat=$( cat ./status/stat_acquwfsref0.txt )
if [ "${acquwfsref0stat}" = "OFF" ];
then
menuitems+=( "awfsref0_on" "    \Zb\Zu ==== START new WFS ref acquisition ====\ZB\ZU -> aol${LOOPNUMBER}_wfsref0" )
menuitems+=( " " " " )
fi
if [ "${acquwfsref0stat}" = " ON" ];
then
menuitems+=( "awfsref0off" "\Z1\Zr             STOP WFS ref acquisition                  \Zn" )
menuitems+=( "awfsref0mon" "             Monitor tmux session aol${LOOPNUMBER}awfsref0" )
fi



menuitems+=( "SMloadzrm" "LOAD ZONAL CALIBRATION FILE TO SHARED MEMORY")





menuitems+=( " " " " )
stringcenter "SYSTEM CALIBRATION (MODAL)"
menuitems+=( "4 ->" "\Zb\Zr$string\Zn" )

RMmodal=$( cat ./conf/conf_RMmodal.txt )
if [[ -f "./conf/conf_RMmodal.txt" && ( "$RMmodal" = " ON" || "$RMmodal" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./conf/conf_RMmodal.txt
aoconflog "RMmodal not (properly) set -> SETTING TO OFF"
fi



RMmodal=$( cat ./conf/conf_RMmodal.txt )
if [ "${RMmodal}" = "OFF" ];
then
    menuitems+=( "RMMon" "           RM modal is currently OFF. Select to toggle to ON" )
fi
if [ "${RMmodal}" = " ON" ];
then
    menuitems+=( "RMMoff" "           RM modal is currently ON. Select to toggle to OFF" )

    rmMamplum=0.1
   
    if [ -f "./conf/conf_RMMamplum.txt" ]; then
        rmMamplum=$( cat ./conf/conf_RMMamplum.txt )
    fi
   
    menuitems+=( "rmMamp" "            Modal RM amplitude                ${rmMamplum} um" )

    rmMcpa=1.0
   
    if [ -f "./conf/conf_RMMcpa.txt" ]; then
        rmMcpa=$( cat ./conf/conf_RMMcpa.txt )
    fi
   
    menuitems+=( "rmMcpa" "            Modal RM CPA max                  ${rmMcpa}" )


    makemenuitemstringaolshm "LOrespM" "Modal Resp Mat"
    menuitems+=( "LOrespM" "$menustring" )


    LOrespMstat=$( cat ./status/stat_LOrespM.txt )
   
    if [[ -f "./status/stat_LOrespM.txt" && ( "$LOrespMstat" = " ON" || "$LOrespMstat" = "OFF" ) ]]; then
        echo "OK"
    else
        echo "OFF" > ./status/stat_LOrespM.txt
        LOrespMstat="OFF"
    fi

    LOrespmatnbiter=$( cat zresptmp/LOrespmat_nbiter.txt )
   
    if [ "${LOrespMstat}" = "OFF" ];
    then
        menuitems+=( "LOresp_on" "[normalize = ${WFSnorm}] \Zb\Zu ==== START modal RMs acquisition ====\ZB\ZU" )
        if [ "${LOrespmatnbiter}" -lt 4 ]; then
            menuitems+=( " " "[${LOrespmatnbiter} matrices available] \Z1Need > 4 matrices to CLEAN and average modal RMs\Zn")
        else
            menuitems+=( "LOrespc" "[${LOrespmatnbiter} matrices] CLEAN and average modal RMs")
        fi
        menuitems+=( " " " ")
    else
        menuitems+=( "LOrespoff" "\Z1\Zr Modal RM acquisition running - Press to STOP\Zn" )
        if [ "${LOrespmatnbiter}" -lt 4 ]; then
            menuitems+=( " " "[${LOrespmatnbiter} matrices available] \Z1Need > 4 matrices to CLEAN and average modal RMs\Zn")
        else
            menuitems+=( "LOrespc" "CLEAN currently accumulated modal RMs (${LOrespmatnbiter} matrices)")
        fi
        menuitems+=( "LOrespmon" "             Monitor tmux session LOrespM${LOOPNUMBER}" )
    fi


	menuitems+=( "SMloadmrm" "LOAD MODAL CALIBRATION FILE TO SHARED MEMORY")


fi











state="menutop"


dialog --colors --title "LOOP CONFIGURATION  - LOOP ${LOOPNUMBER}" \
--ok-label "Action: ${actionmode}" \
--cancel-label "Top" \
--extra-button --extra-label "Action toggle" \
--help-button --help-label "Exit" \
--default-item "${menucontrolloop_default}" \
 --menu "$menuname" \
 $nbwlines $nbwcols 100 "${menuitems[@]}"  2> $tempfile


retval=$?
choiceval=$(cat $tempfile)

menucontrolloop_default="$choiceval"
state="menuconfigureloop"

case $actionmode in
	"Select")
amode=0
;;
	"View")
amode=1
;;
esac

case $retval in
   0) # button
	case $choiceval in
	-);;
	H)
dialog --title "Help" --msgbox '
Loop configuration is stored in ./conf/ directory\n
Files specified in this configuration menu get linked/loaded to shared memory:\n
\n
HARDWARE I/O:\n
     /tmp/aol${LOOPNUMBER}_dmC.im.shm           DM correction channel\n
     /tmp/aol${LOOPNUMBER}_dmRM.im.shm          DM resp matrix channel\n
     /tmp/aol${LOOPNUMBER}_wfsim.im.shm         WFS camera image\n
            cnt0    full frame counter\n
            cnt1    last slice written (pixel stream mode)\n
            sem0    post: full frame ready      wait: main WFC loop\n
            sem1    post: full frame ready      wait: RM acquisition\n
            sem2    post: subframe ready        wait: main WFC loop, pixel stream mode\n
            sem3    post: subframe ready\n
            sem4    post: full frame ready      wait: alignment loop #1 (focus)\n
            sem5    post: full frame ready      wait: alignment loop #2 (pupil)\n
            sem6    post: full frame ready      mode coefficients telemetry\n
\n
I/O PRE-PROCESSING:\n
     /tmp/aol${LOOPNUMBER}_wfsdark.im.shm       WFS dark\n
\n
SYSTEM ZONAL RESPONSE AND CONTROL:\n
     /tmp/aol${LOOPNUMBER}_wfsmask.im.shm       WFS mask\n
     /tmp/aol${LOOPNUMBER}_dmmap.im.shm         DM map\n
     /tmp/aol${LOOPNUMBER}_dmmaskRM.im.shm      DM mask\n
     /tmp/aol${LOOPNUMBER}_wfsref0.im.shm        WFS ref\n
\n
SYSTEM MODAL RESPONSE AND CONTROL:\n
     /tmp/aol${LOOPNUMBER}_DMmodes.im.shm       DM modes\n
     /tmp/aol${LOOPNUMBER}_RM.im.shm            Response Matrix\n
     /tmp/aol${LOOPNUMBER}_CM.im.shm            Control Matrix\n
\n
\n
    /tmp/aol${LOOPNUMBER}_imWFS0.im.shm         Dark-subtracted WFS frame\n
            sem0    post: full frame ready      wait: modal reconstruction\n
            sem1    post: full frame ready      wait: \n
\n
' $nbwlines $nbwcols
;;






	lfreq)
exec 3>&1;
loopfrequ=$(dialog --inputbox "Loop Frequency [Hz]" 0 0 "$loopfrequ" 2>&1 1>&3);
exec 3>&-;
echo "$loopfrequ" > ./conf/conf_loopfrequ.txt
aoconflogext "set loop frequency $loopfrequ Hz"
;;

	lhlat)
exec 3>&1;
loophlat=$(dialog --inputbox "Hardware latency" 0 0 "$loophlat" 2>&1 1>&3);
exec 3>&-;
echo "$loophlat" > ./conf/conf_loophlat.txt
aoconflogext "set hardware latency $loophlat frame"
;;

	lclat)
exec 3>&1;
loopclat=$(dialog --inputbox "Computing latency" 0 0 "$loopclat" 2>&1 1>&3);
exec 3>&-;
echo "$loopclat" > ./conf/conf_loopclat.txt
aoconflogext "set computing latency $loopclat frame"
;;

	lwlat)
exec 3>&1;
loopwlat=$(dialog --inputbox "WFS modes extraction latency" 0 0 "$loopwlat" 2>&1 1>&3);
exec 3>&-;
echo "$loopwlat" > ./conf/conf_loopwlat.txt
aoconflogext "set WFS modes extraction latency $loopwlat frame"
;;

	dmC)
case $amode in
	0)
exec 3>&1;
dmC=$(dialog --inputbox "dmC" 0 0 "$dmC" 2>&1 1>&3);
exec 3>&-;
echo "$dmC" > ./conf/conf_dmC_name.txt
ReaddmCname
getshmimsize aol${LOOPNUMBER}_dmC
;;
	1)shmimmon aol${LOOPNUMBER}_dmC;;
esac
;;


	dmO)
case $amode in
	0)
exec 3>&1;
dmO=$(dialog --inputbox "dmO" 0 0 "$dmO" 2>&1 1>&3);
exec 3>&-;
echo "$dmO" > ./conf/conf_dmO_name.txt
ReaddmOname
getshmimsize aol${LOOPNUMBER}_dmO
;;
	1)shmimmon aol${LOOPNUMBER}_dmO;;
esac
;;

	
	dmZP0)
case $amode in
	0)
exec 3>&1;
dmZP0=$(dialog --inputbox "dmZP0" 0 0 "$dmZP0" 2>&1 1>&3);
#exitcode=$?;
exec 3>&-;
#echo $result $exitcode;
echo "$dmZP0" > ./conf/conf_dmZP0_name.txt
ReaddmZP0name
getshmimsize aol${LOOPNUMBER}_dmZP0
;;
	1)shmimmon aol${LOOPNUMBER}_dmZP0;;
esac
;;

	
	dmZP1)
case $amode in
	0)
exec 3>&1;
dmZP1=$(dialog --inputbox "dmZP1" 0 0 "$dmZP1" 2>&1 1>&3);
#exitcode=$?;
exec 3>&-;
#echo $result $exitcode;
echo "$dmZP1" > ./conf/conf_dmZP1_name.txt
ReaddmZP1name
getshmimsize aol${LOOPNUMBER}_dmZP1
;;
	1)shmimmon aol${LOOPNUMBER}_dmZP1;;
esac
;;
	
	dmZP2)
case $amode in
	0)
exec 3>&1;
dmZP2=$(dialog --inputbox "dmZP2" 0 0 "$dmZP2" 2>&1 1>&3);
#exitcode=$?;
exec 3>&-;
#echo $result $exitcode;
echo "$dmZP2" > ./conf/conf_dmZP2_name.txt
ReaddmZP2name
getshmimsize aol${LOOPNUMBER}_dmZP2
;;
	1)shmimmon aol${LOOPNUMBER}_dmZP2;;
esac
;;

	dmZP3)
case $amode in
	0)
exec 3>&1;
dmZP3=$(dialog --inputbox "dmZP3" 0 0 "$dmZP3" 2>&1 1>&3);
#exitcode=$?;
exec 3>&-;
#echo $result $exitcode;
echo "$dmZP3" > ./conf/conf_dmZP3_name.txt
ReaddmZP3name
getshmimsize aol${LOOPNUMBER}_dmZP3
;;
	1)shmimmon aol${LOOPNUMBER}_dmZP3;;
esac
;;

	dmZP4)
case $amode in
	0)
exec 3>&1;
dmZP4=$(dialog --inputbox "dmZP4" 0 0 "$dmZP4" 2>&1 1>&3);
#exitcode=$?;
exec 3>&-;
#echo $result $exitcode;
echo "$dmZP4" > ./conf/conf_dmZP4_name.txt
ReaddmZP4name
getshmimsize aol${LOOPNUMBER}_dmZP4
;;
	1)shmimmon aol${LOOPNUMBER}_dmZP4;;
esac
;;


	dmdisp)
case $amode in
	0)
exec 3>&1;
dmdisp=$(dialog --inputbox "dmdisp" 0 0 "$dmdisp" 2>&1 1>&3);
#exitcode=$?;
exec 3>&-;
#echo $result $exitcode;
echo "$dmdisp" > ./conf/conf_dmdisp_name.txt
Readdmdispname
getshmimsize aol${LOOPNUMBER}_dmdisp
;;
	1)
shmimmon aol${LOOPNUMBER}_dmdisp
;;
esac
;;
    dmRM)
case $amode in
	0)
exec 3>&1;
dmRM=$(dialog --inputbox "dmRM" 0 0 "$dmRM" 2>&1 1>&3);
exec 3>&-;
echo "$dmRM" > ./conf/conf_dmRM_name.txt
ReaddmRMname
getshmimsize aol${LOOPNUMBER}_dmRM
;;
	1)
shmimmon aol${LOOPNUMBER}_dmRM
;;
esac
;;
	wfs)
case $amode in
	0)
exec 3>&1;
wfsimcam=$(dialog --inputbox "WFS image" 0 0 "$wfsimcam" 2>&1 1>&3);
exec 3>&-;
echo "$wfsimcam" > ./conf/conf_wfsim_name.txt
Readwfsimcamname
getshmimsize aol${LOOPNUMBER}_wfsim
;;
	1)
shmimmon aol${LOOPNUMBER}_wfsim
;;
esac
;;

	dark)
exec 3>&1;
wfsdarkfname=$(dialog --title "Select WFS dark" --stdout --fselect "${wfsdarkfname}" $nbwlines $nbwcols)
echo "$wfsdarkfname" > ./conf/conf_wfsdark_name.txt
ReadWFSdarkfname
;;
	adark_on)
aoconflog "START dark acquisiton"
acqdarkstat=" ON"
echo " ON" > ./status/stat_acqudark.txt
tmux new-session -d -s adark
tmux send-keys -t adark "./customscripts/takedark 10000" C-m
aoconflogext "taking dark"
menucontrolloop_default="adark_on"
;;
#	adarkoff)
#acqdarkstat="OFF"
#echo "OFF" > ./status/stat_acqudark.txt
#tmux kill-session -t adark
#aoconflog "stopping dark"
#menucontrolloop_default="adark_on"
#;;


	smlock) # set masks lock files
fname=$( cat ./conf/conf_dmmask_name.txt )
cp $fname ./conf/dmmask_LOCK.fits
fname=$( cat ./conf/conf_wfsmask_name.txt )
cp $fname ./conf/wfsmask_LOCK.fits
menucontrolloop_default="smlock"
;;


	mlock)
	if [ "$MASKS_LOCK" -eq "1" ]; then
	MASKS_LOCK="0"
	echo "0" > ./conf/conf_MASKS_LOCK.txt
	else
	MASKS_LOCK="1"
	echo "1" > ./conf/conf_MASKS_LOCK.txt
	fi
menucontrolloop_default="mlock"
;;



	Sconf)
mkdir -p ./CONF
datestr=`date -u +%Y-%m-%d_%H:%M:%S`
exec 3>&1;
confname=$(dialog --title "Select Configuration" --stdout --title "Select Configuration" --fselect "./CONF/${datestr}_" $nbwlines $nbwcols)
exec 3>&-;
aoconflogext "save configuration to ${confname}"
echo "${confname}" > ./confname.txt
mkdir -p "${confname}"
cp conf/conf_* "${confname}/"
cp conf/RMpoke.fits "${confname}/"
cp conf/Hpoke.fits "${confname}/"
cp conf/RMHmat.fits "${confname}/"
cp conf/RMpixindex.fits "${confname}/"
cp conf/RMpokeCube.fits "${confname}/"
;;

	Lconf)
mkdir -p ./CONF
exec 3>&1;
confname=$(dialog --title "Select Configuration" --stdout --title "Select Configuration" --fselect "./CONF/" $nbwlines $nbwcols)
exec 3>&-;
echo "${confname}" > confname.txt
aoconflogext "load configuration from ${confname}"
confnameloaded=${confname}
cp "${confname}"/conf_*.txt ./conf/

# set up symbolic links to streams
for name in dmC dmO dmdisp dmRM dmZP0 dmZP1 dmZP2 dmZP3 dmZP4 wfsim
do
	lname=$( cat "./conf/conf_${name}_name.txt" )
	rm /tmp/aol${LOOPNUMBER}_${name}.im.shm
	ln -s /tmp/${lname}.im.shm /tmp/aol${LOOPNUMBER}_${name}.im.shm
done

# set up symbolic links to FITS files in conf directory
for name in zrespM wfsmask LOrespM LODMmodes dmmap dmmaskRM dmslaved dmmask wfsmap wfsref0 contrM DMmodes respM
do
	fname=$( cat "./conf/conf_${name}_name.txt" )
	ln -s "$fname" "./conf/aol${LOOPNUMBER}_${name}.fits"
done

# blocks: set up symbolic links to FITS files in conf directory
NBblocks=$( cat ./conf/conf_NBmodeblocks.txt )
for namet in contrM contrMc contrMcact DMmodes respM
do

for i in `seq 0 $(( $NBblocks - 1 ))`;
do
i2=$(printf "%02d" "$i")
	name="${namet}${i2}"
	fname1="${confname}/conf_${name}_name.txt"
	if [ -f "$fname1" ]; then
	cp ${confname}/conf_${name}_name.txt ./conf/conf_${name}_name.txt
	fname=$( cat "./conf/conf_${name}_name.txt" )
	ln -s "$fname" "./conf/aol${LOOPNUMBER}_${name}.fits"
	#else
	#rm "./conf/aol${LOOPNUMBER}_${name}.fits"
	#rm "./conf/conf_${name}_name.txt"
	fi
done

for i in `seq $NBblocks 20`;
do
i2=$(printf "%02d" "$i")
rm "./conf/aol${LOOPNUMBER}_${name}.fits"
rm "./conf/conf_${name}_name.txt"
done


done

cp "${confname}/RMpoke.fits" ./conf/
cp "${confname}/Hpoke.fits" ./conf/
cp "${confname}/RMHmat.fits" ./conf/
cp "${confname}/RMpixindex.fits" ./conf/
cp "${confname}/RMpokeCube.fits" ./conf/


AOloadMem 1

;;



	rmamp)
exec 3>&1;
rmamplum=$(dialog --inputbox "RM amplitude [um]" 0 0 "$rmamplum" 2>&1 1>&3);
exec 3>&-;
echo "$rmamplum" > ./conf/conf_RMamplum.txt
aoconflogext "set RM amplitude $rmamplum um"
;;
	rmdelay)
exec 3>&1;
rmdelayfr=$(dialog --inputbox "RM time delay [frame]" 0 0 "$rmdelayfr" 2>&1 1>&3);
exec 3>&-;
echo "$rmdelayfr" > ./conf/conf_RMdelayfr.txt
aoconflogext "set RM time delay $rmdelayfr frame"
;;
	rmnbfr)
exec 3>&1;
rmfrave=$(dialog --inputbox "RM frame averaging" 0 0 "$rmfrave" 2>&1 1>&3);
exec 3>&-;
echo "$rmfrave" > ./conf/conf_RMfrave.txt
aoconflogext "set RM NB frame average $rmfrave frames"
;;
	rmexfr)
exec 3>&1;
rmexfr=$(dialog --inputbox "RM excluded frames" 0 0 "$rmexfr" 2>&1 1>&3);
exec 3>&-;
echo "$rmexfr" > ./conf/conf_RMexfr.txt
aoconflogext "set RM NB frame excluded $rmexfr frames"
;;

	mlat)
exec 3>&1;
nblatm=$(dialog --inputbox "Latency measurement: # frames" 0 0 "$nblatm" 2>&1 1>&3);
exec 3>&-;
echo "$nblatm" > ./conf/conf_nblatm.txt
aoconflogext "Measuring system latency"
./auxscripts/MeasureLatency "$nblatm"
;;

	zrespM)
case $amode in
	0)
cd zrespM
exec 3>&1;
zrespMfname=$(dialog --title "Select Zonal RM" --stdout --title "Select zonal RM" --fselect "${zrespMfname}" $nbwlines $nbwcols)
cd ..
echo "./zrespM/$zrespMfname" > ./conf/conf_zrespM_name.txt
ReadConfFile "zrespM"

sed -e 's/zrespM/wfsmask/g' ./conf/conf_zrespM_name.txt > ./conf/conf_wfsmask_name.txt
ReadConfFile "wfsmask"

sed -e 's/zrespM/dmmaskRM/g' ./conf/conf_zrespM_name.txt > ./conf/conf_dmmaskRM_name.txt
ReadConfFile "dmmaskRM"

sed -e 's/zrespM/dmmap/g' ./conf/conf_zrespM_name.txt > ./conf/conf_dmmap_name.txt
ReadConfFile "dmmap"

sed -e 's/zrespM/wfsref0/g' ./conf/conf_zrespM_name.txt > ./conf/conf_wfsref0_name.txt
ReadConfFile "wfsref0"

sed -e 's/zrespM/dmslaved/g' ./conf/conf_zrespM_name.txt > ./conf/conf_dmslaved_name.txt
ReadConfFile "dmslaved"

sed -e 's/zrespM/dmmask/g' ./conf/conf_zrespM_name.txt > ./conf/conf_dmmask_name.txt
ReadConfFile "dmmask"
;;
	1)
ds9 $imname &
imname=$( cat ./conf/conf_zrespM_name.txt )
;;
esac
;;




	Hon)
echo "1" > ./conf/conf_RMpokeMode.txt

if [ -f "./conf/RMpokeCube.fits" ]; then
echo "OK"
else
./auxscripts/mkHpoke 
fi
mv Hpoke.fits ./conf/Hpoke.fits
cp ./conf/Hpoke.fits ./conf/RMpokeCube.fits
cp Hpixindex.fits ./conf/RMpixindex.fits
cp Hmat.fits ./conf/RMHmat.fits 
aoconflogext "RM: set Hadamard ON"
menucontrolloop_default="Hoff"
;;
	Hoff)
echo "0" > ./conf/conf_RMpokeMode.txt
rm ./conf/RMpokeCube.fits
rm ./conf/RMpixindex.fits
rm ./conf/RMHmat.fits
aoconflogext "RM: set Hadamard OFF"
menucontrolloop_default="Hon"
;;


    WFSNon)
echo "1" > ./conf/conf_WFSnormalize.txt
aoconflogext "RM: set WFS normalize ON"
menucontrolloop_default="WFSNoff"
;;
    WFSNoff)
echo "0" > ./conf/conf_WFSnormalize.txt
aoconflogext "RM: set WFS normalize OFF"
menucontrolloop_default="WFSNon"
;;

	zresp_on)
zrespMstat=" ON"
echo " ON" > ./status/stat_zrespM.txt
tmux new-session -d -s aol${LOOPNUMBER}zrespM
tmux send-keys -t aol${LOOPNUMBER}zrespM "./auxscripts/aolMeasureZrespmat ${rmamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" C-m
echo "./auxscripts/aolMeasureZrespmat ${rmamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" > aolcmd.txt
aoconflogext "START HO RM acquision   amplitude $rmamplum um, time delay $rmdelayfr frame(s), NB frame average $rmfrave frame(s), $rmexfr frame(s) excluded"
menucontrolloop_default="zrespoff"
;;
	zrespc) # clean zrespm
tmuxname="aol${LOOPNUMBER}zrepMc"
tmux new-session -d -s ${tmuxname}
tmux send-keys -t ${tmuxname} "./auxscripts/aolCleanZrespmat ${rmamplum} ${WFSnorm}" C-m
echo "./auxscripts/aolCleanZrespmat ${rmamplum} ${WFSnorm}" >> aolcmd.txt
mkdir -p zrespM
mkdir -p wfsref
mkdir -p wfsref0
mkdir -p wfsmap
mkdir -p dmmap
mkdir -p dmmask
mkdir -p wfsmask
mkdir -p dmmaskRM
mkdir -p dmslaved
datestr=`date -u +%Y-%m-%d_%H:%M:%S`
tmux send-keys -t ${tmuxname} "cp zrespmat.fits zrespM/zrespM_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp wfsref0.fits wfsref0/wfsref0_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp wfsmap.fits wfsmap/wfsmap_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp dmmap.fits dmmap/dmmap_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp wfsmask.fits wfsmask/wfsmask_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp dmmaskRM.fits dmmaskRM/dmmaskRM_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp dmslaved.fits dmslaved/dmslaved_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp dmmask.fits dmmask/dmmask_${datestr}.fits" C-m
echo "zrespM/zrespM_${datestr}.fits" > ./conf/conf_zrespM_name.txt
echo "wfsref0/wfsref0_${datestr}.fits" > ./conf/conf_wfsref0_name.txt
echo "wfsmap/wfsmap_${datestr}.fits" > ./conf/conf_wfsmap_name.txt
echo "dmmap/dmmap_${datestr}.fits" > ./conf/conf_dmmap_name.txt

if [ "$MASKS_LOCK" -eq "1" ]; then
echo "conf/wfsmask_LOCK.fits" > ./conf/conf_wfsmask_name.txt
else
echo "wfsmask/wfsmask_${datestr}.fits" > ./conf/conf_wfsmask_name.txt
fi

echo "dmmaskRM/dmmaskRM_${datestr}.fits" > ./conf/conf_dmmaskRM_name.txt
echo "dmslaved/dmslaved_${datestr}.fits" > ./conf/conf_dmslaved_name.txt

if [ "$MASKS_LOCK" -eq "1" ]; then
echo "conf/dmmask_LOCK.fits" > ./conf/conf_dmmask_name.txt
else
echo "dmmask/dmmask_${datestr}.fits" > ./conf/conf_dmmask_name.txt
fi

rm cleanZresp.run
tmux send-keys -t  ${tmuxname} "touch cleanZresp.run" C-m
tmux send-keys -t ${tmuxname} "exit" C-m
waitforfile cleanZresp.run
rm cleanZresp.run
#ReadConfFile "zrespM"
#ReadConfFile "wfsref0"
#ReadConfFile "wfsmap"
#ReadConfFile "dmmap"
#ReadConfFile "wfsmask"
#ReadConfFile "dmmaskRM"
#ReadConfFile "dmslaved"
#ReadConfFile "dmmask"
sleep 0.5
;;


	zrespoff)
zrespMstat="OFF"
echo "OFF" > ./status/stat_zrespM.txt
aoconflogext "STOP HO RM acquision"
tmux new-session -d -s aol${LOOPNUMBER}zrespM
tmux send-keys -t aol${LOOPNUMBER}zrespM "./auxscripts/aolCleanZrespmat ${rmamplum} ${WFSnorm}" C-m
echo "./auxscripts/aolCleanZrespmat ${rmamplum} ${WFSnorm}" >> aolcmd.txt
pkill -USR1 aol${LOOPNUMBER}zrespM
mkdir -p zrespM
mkdir -p wfsref
mkdir -p wfsref0
mkdir -p wfsmap
mkdir -p dmmap
mkdir -p dmmask
mkdir -p wfsmask
mkdir -p dmmaskRM
mkdir -p dmslaved
datestr=`date -u +%Y-%m-%d_%H:%M:%S`
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp zrespmat.fits zrespM/zrespM_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp wfsref0.fits wfsref0/wfsref0_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp wfsmap.fits wfsmap/wfsmap_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp dmmap.fits dmmap/dmmap_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp wfsmask.fits wfsmask/wfsmask_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp dmmaskRM.fits dmmaskRM/dmmaskRM_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp dmslaved.fits dmslaved/dmslaved_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "cp dmmask.fits dmmask/dmmask_${datestr}.fits" C-m
echo "zrespM/zrespM_${datestr}.fits" > ./conf/conf_zrespM_name.txt
echo "wfsref0/wfsref0_${datestr}.fits" > ./conf/conf_wfsref0_name.txt

if [ "$MASKS_LOCK" -eq "1" ]; then
echo "conf/wfsmask_LOCK.fits" > ./conf/conf_wfsmask_name.txt
else
echo "wfsmask/wfsmask_${datestr}.fits" > ./conf/conf_wfsmask_name.txt
fi

echo "dmmap/dmmap_${datestr}.fits" > ./conf/conf_dmmap_name.txt
echo "wfsmask/wfsmask_${datestr}.fits" > ./conf/conf_wfsmask_name.txt
echo "dmmaskRM/dmmaskRM_${datestr}.fits" > ./conf/conf_dmmaskRM_name.txt
echo "dmslaved/dmslaved_${datestr}.fits" > ./conf/conf_dmslaved_name.txt

if [ "$MASKS_LOCK" -eq "1" ]; then
echo "conf/dmmask_LOCK.fits" > ./conf/conf_dmmask_name.txt
else
echo "dmmask/dmmask_${datestr}.fits" > ./conf/conf_dmmask_name.txt
fi

rm cleanZresp.run
tmux send-keys -t aol${LOOPNUMBER}zrespM "touch cleanZresp.run" C-m
tmux send-keys -t aol${LOOPNUMBER}zrespM "exit" C-m
waitforfile cleanZresp.run
rm cleanZresp.run
#ReadConfFile "zrespM"
#ReadConfFile "wfsref0"
#ReadConfFile "wfsmap"
#ReadConfFile "dmmap"
#ReadConfFile "wfsmask"
#ReadConfFile "dmmaskRM"
#ReadConfFile "dmslaved"
#ReadConfFile "dmmask"
menucontrolloop_default="zresp_on"
state="menuconfigureloop"
;;



SMloadzrm) # load files into shared memory
ReadConfFile "zrespM"
getshmimsize aol${LOOPNUMBER}_zrespM
ReadConfFile "wfsref0"
getshmimsize aol${LOOPNUMBER}_wfsref0
ReadConfFile "wfsmap"
getshmimsize aol${LOOPNUMBER}_wfsmap
ReadConfFile "dmmap"
getshmimsize aol${LOOPNUMBER}_dmmap
ReadConfFile "wfsmask"
getshmimsize aol${LOOPNUMBER}_wfsmask
ReadConfFile "dmmaskRM"
getshmimsize aol${LOOPNUMBER}_dmmaskRM
ReadConfFile "dmslaved"
getshmimsize aol${LOOPNUMBER}_dmslaved
ReadConfFile "dmmask"
getshmimsize aol${LOOPNUMBER}_dmmask
;;




	zrmcust)
tmux new-session -d -s aol${LOOPNUMBER}zrmcust
aoconflogext "make custom RM"
tmux send-keys -t aol${LOOPNUMBER}zrmcust "./aolRMmkMasks zrespmat.fits" C-m
echo "./aolRMmkMasks zrespmat.fits" >> aolcmd.txt
mkdir -p zrespM
mkdir -p wfsref
mkdir -p wfsref0
mkdir -p wfsmap
mkdir -p dmmap
mkdir -p dmmask
mkdir -p wfsmask
mkdir -p dmmaskRM
mkdir -p dmslaved
datestr=`date -u +%Y-%m-%d_%H:%M:%S`
tmux send-keys -t aol${LOOPNUMBER}zrmcust "cp zrespmat.fits zrespM/zrespM_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrmcust "cp wfsref0.fits wfsref0/wfsref0_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrmcust "cp wfsmap.fits wfsmap/wfsmap_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrmcust "cp dmmap.fits dmmap/dmmap_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrmcust "cp wfsmask.fits wfsmask/wfsmask_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrmcust "cp dmmaskRM.fits dmmaskRM/dmmaskRM_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrmcust "cp dmslaved.fits dmslaved/dmslaved_${datestr}.fits" C-m
tmux send-keys -t aol${LOOPNUMBER}zrmcust "cp dmmask.fits dmmask/dmmask_${datestr}.fits" C-m
echo "zrespM/zrespM_${datestr}.fits" > ./conf/conf_zrespM_name.txt
echo "wfsref0/wfsref0_${datestr}.fits" > ./conf/conf_wfsref0_name.txt
echo "wfsmap/wfsmap_${datestr}.fits" > ./conf/conf_wfsmap_name.txt
echo "dmmap/dmmap_${datestr}.fits" > ./conf/conf_dmmap_name.txt
echo "wfsmask/wfsmask_${datestr}.fits" > ./conf/conf_wfsmask_name.txt
echo "dmmaskRM/dmmaskRM_${datestr}.fits" > ./conf/conf_dmmaskRM_name.txt
echo "dmslaved/dmslaved_${datestr}.fits" > ./conf/conf_dmslaved_name.txt
echo "dmmaskRM/dmmask_${datestr}.fits" > ./conf/conf_dmmask_name.txt
rm zrmcust.run
tmux send-keys -t aol${LOOPNUMBER}zrmcust "touch zrmcust.run" C-m
tmux send-keys -t aol${LOOPNUMBER}zrmcust "exit" C-m
waitforfile zrmcust.run
rm zrmcust.run
#ReadConfFile "zrespM"
#ReadConfFile "wfsref0"
#ReadConfFile "wfsmap"
#ReadConfFile "dmmap"
#ReadConfFile "wfsmask"
#ReadConfFile "dmmaskRM"
#ReadConfFile "dmslaved"
#ReadConfFile "dmmask"
menucontrolloop_default="zrmcust"
state="menuconfigureloop"
;;





	zrespmon)
tmux a -t aol${LOOPNUMBER}zrespM
menucontrolloop_default="zrespmon"
state="menuconfigureloop"
;;
	wfsM)
case $amode in
	0)
cd wfsmask
exec 3>&1;
wfsmaskfname=$(dialog --title "Select WFS pixel mask file name" --stdout  --fselect "${wfsmaskfname}" $nbwlines $nbwcols)
cd ..
echo "./wfsmask/$wfsmaskfname" > ./conf/conf_wfsmask_name.txt
ReadConfFile "wfsmask"
;;
	1)
imname=$( cat ./conf/conf_wfsmask_name.txt )
ds9 $imname &
;;
esac
menucontrolloop_default="wfsM"
state="menuconfigureloop"
;;


	dmmap)
case $amode in
	0)
cd dmmap
exec 3>&1;
dmmapfname=$(dialog --title "Select DM map file name" --stdout --fselect "${dmmapfname}" $nbwlines $nbwcols)
cd ..
echo "./dmmap/$dmmapfname" > ./conf/conf_dmmap_name.txt
ReadConfFile "dmmap"
;;
	1)
imname=$( cat ./conf/conf_dmmap_name.txt )
ds9 $imname &
;;
esac
menucontrolloop_default="dmmap"
state="menuconfigureloop"
;;

	dmMrm)
case $amode in
	0)
cd dmmaskRM
exec 3>&1;
dmmaskRMfname=$(dialog --title "Select DM act mask file name" --stdout --fselect "${dmmaskRMfname}" $nbwlines $nbwcols)
cd ..
echo "./dmmaskRM/$dmmaskRMfname" > ./conf/conf_dmmaskRM_name.txt
ReadConfFile "dmmaskRM"
;;
	1)
imname=$( cat ./conf/conf_dmmaskRM_name.txt )
ds9 $imname &
;;
esac
menucontrolloop_default="dmMrm"
state="menuconfigureloop"
;;

	dmSlM)
case $amode in
        0)
./auxscripts/mkDMslaveAct ./conf/aol${LOOPNUMBER}_dmmap.fits 0.6 1.0
datestr=`date -u +%Y-%m-%d_%H:%M:%S`
fname="dmslaved/dmslaved_${datestr}.fits"
mkdir -p dmslaved
cp dmslaved.fits $fname
echo "$fname" > ./conf/conf_dmslaved_name.txt
ReadConfFile "dmslaved"
;;
        1)
imname =$( cat ./conf/conf_dmslaved_name.txt )
ds9 $imname &
;;
esac
;;

	dmM)
case $amode in
	0)
cd dmmask
exec 3>&1;
dmmaskfname=$(dialog --title "Select ext DM act mask file name" --stdout --fselect "${dmmaskfname}" $nbwlines $nbwcols)
cd ..
echo "./dmmask/$dmmaskfname" > ./conf/conf_dmmask_name.txt
ReadConfFile "dmmask"
;;
	1)
imname=$( cat ./conf/conf_dmmask_name.txt )
ds9 $imname &
;;
esac
menucontrolloop_default="dmM"
state="menuconfigureloop"
;;


	wfsref0)
case $amode in
	0)
cd wfsref0
exec 3>&1;
wfsref0fname=$(dialog --title "Select WFS reference file name" --stdout --fselect "${wfsref0fname}" $nbwlines $nbwcols)
cd ..
echo "./wfsref0/$wfsref0fname" > ./conf/conf_wfsref0_name.txt
ReadConfFile "wfsref0"
;;
	1)
imname=$( cat ./conf/conf_wfsref_name.txt )
ds9 $imname &
;;
esac
menucontrolloop_default="wfsref0"
state="menuconfigureloop"
;;
	awfsref0_on)
acquwfsref0stat=" ON"
echo " ON" > ./status/stat_acquwfsref0.txt
tmuxsname="aol${LOOPNUMBER}awfsref0"
tmux new-session -d -s $tmuxsname
tmux send-keys -t $tmuxsname "$execname -n awfsref0${LOOPNUMBER}" C-m
tmux send-keys -t $tmuxsname "csetpmove aolRT" C-m
tmux send-keys -t $tmuxsname "readshmim aol${LOOPNUMBER}_wfsdark" C-m
tmux send-keys -t $tmuxsname "readshmim aol${LOOPNUMBER}_wfsim" C-m
tmux send-keys -t $tmuxsname "imgstreamave aol${LOOPNUMBER}_wfsim 100000 imave 0" C-m
aoconflogext "START taking WFS reference"
menucontrolloop_default="awfsref0off"
state="menuconfigureloop"
;;
	awfsref0off)
acquwfsref0stat="OFF"
echo "OFF" > ./status/stat_acquwfsref0.txt
pkill -USR1 awfsref0${LOOPNUMBER}
rm wfsref0.fits
tmuxsname="aol${LOOPNUMBER}awfsref0"
tmux send-keys -t $tmuxsname "imave1=imave-aol${LOOPNUMBER}_wfsdark" C-m
tmux send-keys -t $tmuxsname "savefits imave1 wfsref0.fits" C-m
tmux send-keys -t $tmuxsname "imcp2shm imave1 aol${LOOPNUMBER}_wfsref0" C-m
tmux send-keys -t $tmuxsname "exit" C-m
datestr=`date -u +%Y-%m-%d_%H:%M:%S`
tmux send-keys -t $tmuxsname "cp wfsref0.fits wfsref0/wfsref0_${datestr}.fits" C-m
tmux send-keys -t $tmuxsname "exit" C-m
echo "wfsref0/wfsref0_${datestr}.fits" > ./conf/conf_wfsref0_name.txt
aoconflogext "STOP taking WFS reference"
menucontrolloop_default="awfsref0_on"
state="menuconfigureloop"
;;
	awfsref0mon)
tmuxsname="aol${LOOPNUMBER}awfsref0"
tmux a -t $tmuxsname
menucontrolloop_default="awfsref0mon"
state="menuconfigureloop"
;;





    RMMon)
echo " ON" > ./conf/conf_RMmodal.txt
aoconflogext "set LO RM mode ON"
menucontrolloop_default="RMMoff"
;;
    RMMoff)
echo "OFF" > ./conf/conf_RMmodal.txt
aoconflogext "set LO RM mode OFF"
menucontrolloop_default="RMMon"
;;



	rmMamp)
exec 3>&1;
rmMamplum=$(dialog --inputbox "modal RM amp [um]" 0 0 "$rmMamplum" 2>&1 1>&3);
exec 3>&-;
echo "$rmMamplum" > ./conf/conf_RMMamplum.txt
aoconflogext "set LO RM amplitude $rmMamplum um"
;;

	rmMcpa)
exec 3>&1;
rmMcpa=$(dialog --inputbox "modal RM CPA max" 0 0 "$rmMcpa" 2>&1 1>&3);
exec 3>&-;
echo "$rmMcpa" > ./conf/conf_RMMcpa.txt
aoconflogext "set LO RM CPA max $rmMcpa"
;;


	LOrespM)
case $amode in
	0)
cd LOrespM
exec 3>&1;
LOrespMfname=$(dialog --title "Select Zonal RM" --stdout --title "Select zonal RM" --fselect "${LOrespMfname}" $nbwlines $nbwcols)
cd ..
echo "./LOrespM/$LOrespMfname" > ./conf/conf_LOrespM_name.txt
ReadConfFile "LOrespM"

sed -e 's/LOrespM/LODMmodes/g' ./conf/conf_LOrespM_name.txt > ./conf/conf_LODMmodes_name.txt
ReadConfFile "LODMmodes"
;;
	1)
ds9 $imname &
imname=$( cat ./conf/conf_LOrespM_name.txt )
;;
esac
;;



	LOresp_on)
LOrespMstat=" ON"
echo " ON" > ./status/stat_LOrespM.txt
tmuxname="aol${LOOPNUMBER}LOrespM"
tmux new-session -d -s ${tmuxname}
tmux send-keys -t ${tmuxname} "./auxscripts/aolmkLO_DMmodes ${rmMcpa}" C-m
tmux send-keys -t ${tmuxname} "./auxscripts/aolMeasureLOrespmat ${rmMamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" C-m
echo "./auxscripts/aolMeasureLOrespmat ${rmMamplum} ${rmdelayfr} ${rmfrave} ${rmexfr} ${WFSnorm}" > aolcmd.txt
aoconflogext "START LO RM acquisition   CPA=$rmMcpa  amp=$rmMamplum delay=$rmdelayfr frame NBframe_average $rmfrave frames, $rmexfr frames excluded"
menucontrolloop_default="LOrespoff"
;;

	LOrespc) # clean zrespm
tmuxname="aol${LOOPNUMBER}LOrepMc"
tmux new-session -d -s ${tmuxname}
tmux send-keys -t ${tmuxname} "./auxscripts/aolCleanLOrespmat ${rmMamplum} ${WFSnorm}" C-m
echo "./auxscripts/aolCleanLOrespmat ${rmMamplum} ${WFSnorm}" >> aolcmd.txt
mkdir -p LOrespM
mkdir -p LODMmodes
mkdir -p LOwfsref
mkdir -p LOwfsref0
mkdir -p LOwfsmap
mkdir -p LOdmmap
mkdir -p LOwfsmask
mkdir -p LOdmmask
datestr=`date -u +%Y-%m-%d_%H:%M:%S`
tmux send-keys -t ${tmuxname} "cp LOrespmat.fits LOrespM/LOrespM_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp respM_LOmodes.fits LODMmodes/LODMmodes_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp LOwfsref0.fits LOwfsref0/LOwfsref0_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp LOwfsmap.fits LOwfsmap/LOwfsmap_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp LOdmmap.fits LOdmmap/LOdmmap_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp LOwfsmask.fits LOwfsmask/LOwfsmask_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp LOdmmask.fits LOdmmask/LOdmmask_${datestr}.fits" C-m
echo "LOrespM/LOrespM_${datestr}.fits" > ./conf/conf_LOrespM_name.txt
echo "LODMmodes/LODMmodes_${datestr}.fits" > ./conf/conf_LODMmodes_name.txt
echo "LOwfsref0/LOwfsref0_${datestr}.fits" > ./conf/conf_LOwfsref0_name.txt
echo "LOwfsmap/LOwfsmap_${datestr}.fits" > ./conf/conf_LOwfsmap_name.txt
echo "LOdmmap/LOdmmap_${datestr}.fits" > ./conf/conf_LOdmmap_name.txt
echo "LOwfsmask/LOwfsmask_${datestr}.fits" > ./conf/conf_LOwfsmask_name.txt
echo "LOdmmask/LOdmmask_${datestr}.fits" > ./conf/conf_LOdmmask_name.txt
rm cleanLOresp.run
tmux send-keys -t  ${tmuxname} "touch cleanLOresp.run" C-m
tmux send-keys -t ${tmuxname} "exit" C-m
waitforfile cleanLOresp.run
rm cleanLOresp.run
#ReadConfFile "LOrespM"
#ReadConfFile "LODMmodes"
sleep 0.5
;;

	LOrespoff)
LOrespMstat="OFF"
aoconflogext "STOP LO RM acquisition"
echo "OFF" > ./status/stat_LOrespM.txt
tmuxname="aol${LOOPNUMBER}LOrespM"
tmux new-session -d -s ${tmuxname}
tmux send-keys -t ${tmuxname} "./auxscripts/aolCleanLOrespmat ${rmMamplum} ${WFSnorm}" C-m
echo "./auxscripts/aolCleanLOrespmat ${rmamplum} ${WFSnorm}" >> aolcmd.txt
echo "pkill -USR1 aol${LOOPNUMBER}LOrespM"
pkill -USR1 aol${LOOPNUMBER}LOrespM
mkdir -p LOrespM
mkdir -p LODMmodes
mkdir -p LOwfsref
mkdir -p LOwfsref0
mkdir -p LOwfsmap
mkdir -p LOdmmap
mkdir -p LOwfsmask
mkdir -p LOdmmask
datestr=`date -u +%Y-%m-%d_%H:%M:%S`
tmux send-keys -t ${tmuxname} "cp LOrespmat.fits LOrespM/LOrespM_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp respM_LOmodes.fits LODMmodes/LODMmodes_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp LOwfsref0.fits LOwfsref0/LOwfsref0_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp LOwfsmap.fits LOwfsmap/LOwfsmap_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp LOdmmap.fits LOdmmap/LOdmmap_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp LOwfsmask.fits LOwfsmask/LOwfsmask_${datestr}.fits" C-m
tmux send-keys -t ${tmuxname} "cp LOdmmask.fits LOdmmask/LOdmmask_${datestr}.fits" C-m
echo "LOrespM/LOrespM_${datestr}.fits" > ./conf/conf_LOrespM_name.txt
echo "LODMmodes/LODMmodes_${datestr}.fits" > ./conf/conf_LODMmodes_name.txt
echo "LOwfsref0/LOwfsref0_${datestr}.fits" > ./conf/conf_LOwfsref0_name.txt
echo "LOwfsmap/LOwfsmap_${datestr}.fits" > ./conf/conf_LOwfsmap_name.txt
echo "LOdmmap/LOdmmap_${datestr}.fits" > ./conf/conf_LOdmmap_name.txt
echo "LOwfsmask/LOwfsmask_${datestr}.fits" > ./conf/conf_LOwfsmask_name.txt
echo "LOdmmask/LOdmmask_${datestr}.fits" > ./conf/conf_LOdmmask_name.txt
rm cleanLOresp.run
tmux send-keys -t ${tmuxname} "touch cleanLOresp.run" C-m
tmux send-keys -t ${tmuxname} "exit" C-m
waitforfile cleanLOresp.run
rm cleanLOresp.run
#ReadConfFile "LOrespM"
#ReadConfFile "LODMmodes"
menucontrolloop_default="LOresp_on"
state="menuconfigureloop"
;;


LOrespmon)
tmuxname="aol${LOOPNUMBER}LOrespM"
tmux a -t ${tmuxname}
menucontrolloop_default="LOrespmon"
state="menuconfigureloop"
;;



SMloadmrm) # load files into shared memory
ReadConfFile "LOrespM"
getshmimsize aol${LOOPNUMBER}_LOrespM
ReadConfFile "LODMmodes"
getshmimsize aol${LOOPNUMBER}_LODMmodes
;;






	esac;;
   1) state="menutop";;   
   2) state="menuexit";;
   3)
case $actionmode in
	"Select")
actionmode="View"
;;
	"View")
actionmode="Select"
;;
esac
state="menuconfigureloop"
   ;;
   255) state="menuexit";;
esac


fi


