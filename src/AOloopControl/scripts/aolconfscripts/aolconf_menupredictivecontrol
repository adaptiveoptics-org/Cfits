#!/bin/bash


if [ ! -v aolconfFLAG ]; then
echo "ERROR: This script should be called from aolconf main script"
exit
fi












# =====================================================
# ======== PREDICTIVE CONTROL  ========================
# =====================================================

if [ $state = "menupredictivecontrol" ]; then
stateok=1

menuname="PREDICTIVE CONTROL"


stringcenter "HELP"
menuitems=( "H" "\Zb\Zr\Z4$string\Zn" )
menuitems+=( " " " ")


# hardware latency (frames)
loophlat="2.1"
file="./conf/conf_hardlatency_frame.txt"
if [ -f "$file" ]; then
loophlat=$( cat $file )
fi

# software latency (frame)
loopslat="0.6"
file="./conf/conf_wfsmextrlatency_frame.txt"
if [ -f "$file" ]; then
loopslat=$( cat $file )
fi
lat=$(awk "BEGIN {printf \"%.3f\",${loophlat}+${loopslat}}")



stringcenter "TIMING PARAMETERS"
menuitems+=( "0 ->" "\Zb\Zr$string\Zn" )
menuitems+=( " " " ")

menuitems+=( "mt" "Measure Timing (-> timingstats/timingReport.txt)    $loophlat + $loopslat = $lat")

file="./conf/conf_PForder.txt"
if [ -f $file ]; then
PForder=$(cat $file)
else
echo "0" > $file
PForder=$(cat $file)
fi
menuitems+=( "PFord" "[$PForder] Select Predictive Filter order" )

file="./conf/conf_predcontr_blockSel.txt"
if [ -f $file ]; then
blockSel=$(cat $file)
else
echo "0" > $file
blockSel=$(cat $file)
fi
menuitems+=( "selB" "[$blockSel] Select block" )

menuitems+=( " " " ")




stringcenter "SINGLE FILE: COMPUTE FILTER(S)"
menuitems+=( "1 ->" "\Zb\Zr$string\Zn" )

menuitems+=( " " " ")


menuitems+=( "sellat" "Select Latest telemetry files for filter computation" )
fname=$(ls -lh ./PredictiveControl/modeval_ol.fits )
fnamel=$( echo $fname |  awk '{print $NF}' )
menuitems+=( "" "      FILE : $fnamel" )
menuitems+=( "mkPSDs" "Create open and closed loop PSDs of selected OL / CL telemetry" )
menuitems+=( "ARPFb" "AO find optimal AR linear predictive filter - single block" )
menuitems+=( "ARPF" "AO find optimal AR linear predictive filter" )



menuitems+=( " " " ")
menuitems+=( " " " ")
stringcenter "SINGLE FILE: APPLY FILTER(S)"
menuitems+=( "2 ->" "\Zb\Zr$string\Zn" )
menuitems+=( " " " ")

menuitems+=( " " " ")
menuitems+=( "sellatC" "Select Latest telemetry files for filter correction" )
fname=$(ls -lh ./PredictiveControl/modeval_ol_C.fits )
fnamel=$( echo $fname |  awk '{print $NF}' )
menuitems+=( "" "      FILE : $fnamel" )
menuitems+=( "PFapplyb" "Apply Predictive Filter - single block" )
menuitems+=( "PFapply" "Apply Predictive Filter" )


menuitems+=( " " " ")
menuitems+=( " " " ")
menuitems+=( " " " ")
menuitems+=( " " " ")

stringcenter "CONTINUOUS PREDICTIVE FILTER LOOP - COMPUTE FILTER"
menuitems+=( "3 ->" "\Zb\Zr$string\Zn" )
menuitems+=( " " " ")



file="./conf/conf_PFblock_0.txt"
if [ -f $file ]; then
PFb0start=$( cat $file | awk '{ print $1}' )
PFb0end=$( cat $file | awk '{ print $2}' )
PFb0order=$( cat $file | awk '{ print $3}' )
PFb0lag=$( cat $file | awk '{ print $4}' )
PFb0dgain=$( cat $file | awk '{ print $5}' )
else
PFb0start="0"
PFb0end="2"
PFb0order="10"
PFb0lag="2.5"
PFb0dgain="0.1"
echo "$PFb0start $PFb0end $PFb0order $PFb0lag $PFb0dgain" > $file
fi

menuitems+=( "PFb0start" "[$PFb0start] set Predictive filter block 0 start" )
menuitems+=( "PFb0end" "[$PFb0end] set Predictive filter block 0 end" )
menuitems+=( "PFb0order" "[$PFb0order] set Predictive filter block 0 order" )
menuitems+=( "PFb0lag" "[$PFb0lag] set Predictive filter block 0 lag" )
menuitems+=( "PFb0dgain" "[$PFb0dgain] set Predictive filter block 0 derivationgain" )

file="./conf/conf_PFblock_0_nbGPU.txt"
if [ -f $file ]; then
PFb0nbGPU=$( cat $file )
else
PFb0nbGPU="0"
echo "$PFb0nbGPU" > $file
fi
menuitems+=( "PFb0nbGPU" "[$PFb0nbGPU] set Predictive filter block 0 number of GPUs" )



if [ "0" -lt "$PFb0nbGPU" ]; then
file="./conf/conf_PFb0GPU0device.txt"
PFb0GPU0device=$( cat $file )
if [[ -f "$file" && ${PFb0GPU0device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb0GPU0device="0"
fi
menuitems+=( "PFb0GPU0" "            [ $PFb0GPU0device ]    PF block 0   GPU #0 device" )
fi

if [ "1" -lt "$PFb0nbGPU" ]; then
file="./conf/conf_PFb0GPU1device.txt"
PFb0GPU1device=$( cat $file )
if [[ -f "$file" && ${PFb0GPU1device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb0GPU1device="0"
fi
menuitems+=( "PFb0GPU1" "            [ $PFb0GPU1device ]    PF block 0   GPU #1 device" )
fi

if [ "2" -lt "$PFb0nbGPU" ]; then
file="./conf/conf_PFb0GPU2device.txt"
PFb0GPU2device=$( cat $file )
if [[ -f "$file" && ${PFb0GPU2device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb0GPU2device="0"
fi
menuitems+=( "PFb0GPU2" "            [ $PFb0GPU2device ]    PF block 0   GPU #2 device" )
fi

if [ "3" -lt "$PFb0nbGPU" ]; then
file="./conf/conf_PFb0GPU3device.txt"
PFb0GPU3device=$( cat $file )
if [[ -f "$file" && ${PFb0GPU3device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb0GPU3device="0"
fi
menuitems+=( "PFb0GPU3" "            [ $PFb0GPU3device ]    PF block 0   GPU #3 device" )
fi

if [ "4" -lt "$PFb0nbGPU" ]; then
file="./conf/conf_PFb0GPU4device.txt"
PFb0GPU4device=$( cat $file )
if [[ -f "$file" && ${PFb0GPU4device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb0GPU4device="0"
fi
menuitems+=( "PFb0GPU4" "            [ $PFb0GPU4device ]    PF block 0   GPU #4 device" )
fi

if [ "5" -lt "$PFb0nbGPU" ]; then
file="./conf/conf_PFb0GPU5device.txt"
PFb0GPU5device=$( cat $file )
if [[ -f "$file" && ${PFb0GPU5device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb0GPU5device="0"
fi
menuitems+=( "PFb0GPU5" "            [ $PFb0GPU5device ]    PF block 0   GPU #5 device" )
fi

if [ "6" -lt "$PFb0nbGPU" ]; then
file="./conf/conf_PFb0GPU6device.txt"
PFb0GPU6device=$( cat $file )
if [[ -f "$file" && ${PFb0GPU6device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb0GPU6device="0"
fi
menuitems+=( "PFb0GPU6" "            [ $PFb0GPU6device ]    PF block 0   GPU #6 device" )
fi

if [ "7" -lt "$PFb0nbGPU" ]; then
file="./conf/conf_PFb0GPU7device.txt"
PFb0GPU7device=$( cat $file )
if [[ -f "$file" && ${PFb0GPU7device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb0GPU7device="0"
fi
menuitems+=( "PFb0GPU7" "            [ $PFb0GPU7device ]    PF block 0   GPU #7 device" )
fi

if [ "8" -lt "$PFb0nbGPU" ]; then
file="./conf/conf_PFb0GPU8device.txt"
PFb0GPU8device=$( cat $file )
if [[ -f "$file" && ${PFb0GPU8device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb0GPU8device="0"
fi
menuitems+=( "PFb0GPU8" "            [ $PFb0GPU8device ]    PF block 0   GPU #8 device" )
fi

if [ "9" -lt "$PFb0nbGPU" ]; then
file="./conf/conf_PFb0GPU9device.txt"
PFb0GPU9device=$( cat $file )
if [[ -f "$file" && ${PFb0GPU9device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb0GPU9device="0"
fi
menuitems+=( "PFb0GPU9" "            [ $PFb0GPU9device ]    PF block 0   GPU #9 device" )
fi









menuitems+=( " " " ")
file="./conf/conf_PFblock_1.txt"
if [ -f $file ]; then
PFb1start=$( cat $file | awk '{ print $1}' )
PFb1end=$( cat $file | awk '{ print $2}' )
PFb1order=$( cat $file | awk '{ print $3}' )
PFb1lag=$( cat $file | awk '{ print $4}' )
PFb1dgain=$( cat $file | awk '{ print $5}' )
else
PFb1start="2"
PFb1end="12"
PFb1order="10"
PFb1lag="2.5"
PFb1dgain="0.1"
echo "$PFb1start $PFb1end $PFb1order $PFb1lag $PFb1dgain" > $file
fi

menuitems+=( "PFb1start" "[$PFb1start] set Predictive filter block 1 start" )
menuitems+=( "PFb1end" "[$PFb1end] set Predictive filter block 1 end" )
menuitems+=( "PFb1order" "[$PFb1order] set Predictive filter block 1 order" )
menuitems+=( "PFb1lag" "[$PFb1lag] set Predictive filter block 1 lag" )
menuitems+=( "PFb1dgain" "[$PFb1dgain] set Predictive filter block 1 derivationgain" )


file="./conf/conf_PFblock_1_nbGPU.txt"
if [ -f $file ]; then
PFb1nbGPU=$( cat $file )
else
PFb1nbGPU="0"
echo "$PFb1nbGPU" > $file
fi
menuitems+=( "PFb1nbGPU" "[$PFb1nbGPU] set Predictive filter block 1 number of GPUs" )





if [ "0" -lt "$PFb1nbGPU" ]; then
file="./conf/conf_PFb1GPU0device.txt"
PFb1GPU0device=$( cat $file )
if [[ -f "$file" && ${PFb1GPU0device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb1GPU0device="0"
fi
menuitems+=( "PFb1GPU0" "            [ $PFb1GPU0device ]    PF block 1   GPU #0 device" )
fi

if [ "1" -lt "$PFb1nbGPU" ]; then
file="./conf/conf_PFb1GPU1device.txt"
PFb1GPU1device=$( cat $file )
if [[ -f "$file" && ${PFb1GPU1device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb1GPU1device="0"
fi
menuitems+=( "PFb1GPU1" "            [ $PFb1GPU1device ]    PF block 1   GPU #1 device" )
fi

if [ "2" -lt "$PFb1nbGPU" ]; then
file="./conf/conf_PFb1GPU2device.txt"
PFb1GPU2device=$( cat $file )
if [[ -f "$file" && ${PFb1GPU2device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb1GPU2device="0"
fi
menuitems+=( "PFb1GPU2" "            [ $PFb1GPU2device ]    PF block 1   GPU #2 device" )
fi

if [ "3" -lt "$PFb1nbGPU" ]; then
file="./conf/conf_PFb1GPU3device.txt"
PFb1GPU3device=$( cat $file )
if [[ -f "$file" && ${PFb1GPU3device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb1GPU3device="0"
fi
menuitems+=( "PFb1GPU3" "            [ $PFb1GPU3device ]    PF block 1   GPU #3 device" )
fi

if [ "4" -lt "$PFb1nbGPU" ]; then
file="./conf/conf_PFb1GPU4device.txt"
PFb1GPU4device=$( cat $file )
if [[ -f "$file" && ${PFb1GPU4device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb1GPU4device="0"
fi
menuitems+=( "PFb1GPU4" "            [ $PFb1GPU4device ]    PF block 1   GPU #4 device" )
fi

if [ "5" -lt "$PFb1nbGPU" ]; then
file="./conf/conf_PFb1GPU5device.txt"
PFb1GPU5device=$( cat $file )
if [[ -f "$file" && ${PFb1GPU5device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb1GPU5device="0"
fi
menuitems+=( "PFb1GPU5" "            [ $PFb1GPU5device ]    PF block 1   GPU #5 device" )
fi

if [ "6" -lt "$PFb1nbGPU" ]; then
file="./conf/conf_PFb1GPU6device.txt"
PFb1GPU6device=$( cat $file )
if [[ -f "$file" && ${PFb1GPU6device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb1GPU6device="0"
fi
menuitems+=( "PFb1GPU6" "            [ $PFb1GPU6device ]    PF block 1   GPU #6 device" )
fi

if [ "7" -lt "$PFb1nbGPU" ]; then
file="./conf/conf_PFb1GPU7device.txt"
PFb1GPU7device=$( cat $file )
if [[ -f "$file" && ${PFb1GPU7device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb1GPU7device="0"
fi
menuitems+=( "PFb1GPU7" "            [ $PFb1GPU7device ]    PF block 1   GPU #7 device" )
fi

if [ "8" -lt "$PFb1nbGPU" ]; then
file="./conf/conf_PFb1GPU8device.txt"
PFb1GPU8device=$( cat $file )
if [[ -f "$file" && ${PFb1GPU8device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb1GPU8device="0"
fi
menuitems+=( "PFb1GPU8" "            [ $PFb1GPU8device ]    PF block 1   GPU #8 device" )
fi

if [ "9" -lt "$PFb1nbGPU" ]; then
file="./conf/conf_PFb1GPU9device.txt"
PFb1GPU9device=$( cat $file )
if [[ -f "$file" && ${PFb1GPU9device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
PFb1GPU9device="0"
fi
menuitems+=( "PFb1GPU9" "            [ $PFb1GPU9device ]    PF block 1   GPU #9 device" )
fi























menuitems+=( " " " ")
file="./status/stat_PFb0wON.txt"
PFb0wON=$( cat $file )
if [[ -f "$file" && ( "$PFb0wON" = " ON" || "$PFb0wON" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > $file
PFb0wON="OFF"
fi

if [ "$PFb0wON" = "OFF" ]; then
menuitems+=( "PFb0wON" "[$PFb0wON] switch on Watch input for PF block 0  -> aol${LOOPNUMBER}_modevalol_PFb0" )
else
menuitems+=( "PFb0wOFF" "[\Z1\Zr${PFb0wON}\Zn] \Z1\Zr Currently writing aol${LOOPNUMBER}_modevalol_PFb0 \Zn Select to switch off Watch input for PF block 0" )
fi


file="./status/stat_PFb1wON.txt"
PFb1wON=$( cat $file )
if [[ -f "$file" && ( "$PFb1wON" = " ON" || "$PFb1wON" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > $file
PFb1wON="OFF"
fi

if [ "$PFb1wON" = "OFF" ]; then
menuitems+=( "PFb1wON" "[$PFb1wON] switch on Watch input for PF block 1  -> aol${LOOPNUMBER}_modevalol_PFb1" )
else
menuitems+=( "PFb1wOFF" "[\Z1\Zr${PFb1wON}\Zn] \Z1\Zr Currently writing aol${LOOPNUMBER}_modevalol_PFb1 \Zn Select to  switch off Watch input for PF block 1" )
fi




menuitems+=( " " " ")


file="./status/stat_PFb0cON.txt"
PFb0cON=$( cat $file )
if [[ -f "$file" && ( "$PFb0cON" = " ON" || "$PFb0cON" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > $file
PFb0cON="OFF"
fi

if [ "$PFb0cON" = "OFF" ]; then
menuitems+=( "PFb0cON" "[$PFb0cON] switch on compute filter for PF block 0  -> aol${LOOPNUMBER}_outPFb0" )
else
menuitems+=( "PFb0cOFF" "[\Z1\Zr${PFb0cON}\Zn] \Z1\Zr Currently writing aol${LOOPNUMBER}_outPFb0\Zn Select to switch off compute filter input for PF block 0" )
fi

file="./status/stat_PFb1cON.txt"
PFb1cON=$( cat $file )
if [[ -f "$file" && ( "$PFb1cON" = " ON" || "$PFb1cON" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > $file
PFb1cON="OFF"
fi

if [ "$PFb1cON" = "OFF" ]; then
menuitems+=( "PFb1cON" "[$PFb1cON] switch on compute filter for PF block 1  -> aol${LOOPNUMBER}_outPFb1" )
else
menuitems+=( "PFb1cOFF" "[\Z1\Zr${PFb1cON}\Zn] \Z1\Zr Currently writing aol${LOOPNUMBER}_outPFb1\Zn Select to switch off compute filter for PF block 1" )
fi





menuitems+=( " " " ")
menuitems+=( " " " ")

stringcenter "CONTINUOUS PREDICTIVE FILTER LOOP - APPLY FILTER"
menuitems+=( "4 ->" "\Zb\Zr$string\Zn" )
menuitems+=( " " " ")


file="./status/stat_PFb0aON.txt"
PFb0aON=$( cat $file )
if [[ -f "$file" && ( "$PFb0aON" = " ON" || "$PFb0aON" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > $file
PFb0aON="OFF"
fi

if [ "$PFb0aON" = "OFF" ]; then
menuitems+=( "PFb0aON" "[$PFb0aON] switch on prediction engine for PF block 0" )
else
menuitems+=( "PFb0aOFF" "[\Z1\Zr${PFb0aON}\Zn] switch on prediction engine for PF block 0" )
fi


file="./status/stat_PFb1aON.txt"
PFb1aON=$( cat $file )
if [[ -f "$file" && ( "$PFb1aON" = " ON" || "$PFb1aON" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > $file
PFb1aON="OFF"
fi

if [ "$PFb1aON" = "OFF" ]; then
menuitems+=( "PFb1aON" "[$PFb1aON] switch on prediction engine for PF block 1" )
else
menuitems+=( "PFb1aOFF" "[\Z1\Zr${PFb1aON}\Zn] switch on prediction engine for PF block 1" )
fi






dialog --colors --title "PREDICTIVE CONTROL - LOOP ${LOOPNUMBER}" --ok-label " Select " --cancel-label "Top" --help-button --help-label "Exit" --default-item "${menupred_default}" --menu "$menuname"  $nbwlines $nbwcols $nbwlines "${menuitems[@]}"  2> $tempfile



retval=$?
choiceval=$(cat $tempfile)
menupred_default="$choiceval"
state="menupredictivecontrol"
case $retval in
   0) # Monitor
	case $choiceval in

  
  mt)
mkdir -p timingstats
echo "Measuring loop timing - please wait a few seconds...."
./auxscripts/aolMeasureTiming > timingstats/timingReport.txt

# software latency (frame)
loopslat="0.6"
file="./conf/conf_wfsmextrlatency_frame.txt"
if [ -f "$file" ]; then
loopslat=$( cat $file )
fi
lat=$(awk "BEGIN {printf \"%.3f\",${loophlat}+${loopslat}}")

file="./conf/conf_PFblock_0.txt"
echo "$PFb0start $PFb0end $PFb0order $lat $PFb0dgain" > $file

file="./conf/conf_PFblock_1.txt"
echo "$PFb1start $PFb1end $PFb1order $lat $PFb1dgain" > $file
;;
  
  
	sellat)
./auxscripts/selectLatestTelemetry
;;
  
	mkPSDs)
./auxscripts/processTelemetryPSDs
;;
  
	selB)
exec 3>&1;
blockSel=$(dialog --inputbox "Select block" 0 0 "$blockSel" 2>&1 1>&3);
exec 3>&-;
echo "$blockSel" > ./conf/conf_predcontr_blockSel.txt
;;

	PFord)
exec 3>&1;
PForder=$(dialog --inputbox "Select predictive filter order" 0 0 "$PForder" 2>&1 1>&3);
exec 3>&-;
echo "$PForder" > ./conf/conf_PForder.txt
;;




    ARPFb)
echo "./auxscripts/aolARPFblock \"./PredictiveControl/modeval_ol.fits\"  $blockSel $lat $PForder" > cmd.txt
./auxscripts/aolARPFblock "./PredictiveControl/modeval_ol.fits"  $blockSel $lat $PForder
;;

    ARPF)
echo "./auxscripts/aolARPF \"./PredictiveControl/modeval_ol.fits\" $lat $PForder" > cmd.txt
./auxscripts/aolARPF "./PredictiveControl/modeval_ol.fits" $lat $PForder
;;







	sellatC)
./auxscripts/selectLatestTelemetry -c
;;
  
  
  
  	PFapplyb)
echo "./auxscripts/aolApplyARPFblock \"./PredictiveControl/modeval_ol_C.fits\" \"./PredictiveControl/outPF.$blockSel.fits\" $blockSel $lat" > cmd.txt
./auxscripts/aolApplyARPF "./PredictiveControl/modeval_ol_C.fits" "./PredictiveControl/outPF.$blockSel.fits" $blockSel $lat
;;

  
	PFapply)
echo "./auxscripts/aolApplyARPF \"./PredictiveControl/modeval_ol_C.fits\" \"./PredictiveControl/outPF.fits\" $lat" > cmd.txt
./auxscripts/aolApplyARPF "./PredictiveControl/modeval_ol_C.fits" "./PredictiveControl/outPF.fits" $lat
;;
















PFb0start)
exec 3>&1;
PFb0start=$(dialog --inputbox "Select Predictive filter block 0 start" 0 0 "$PFb0start" 2>&1 1>&3);
exec 3>&-;
file="./conf/conf_PFblock_0.txt"
echo "$PFb0start $PFb0end $PFb0order $PFb0lag $PFb0dgain" > $file
;;

PFb0end)
exec 3>&1;
PFb0end=$(dialog --inputbox "Select Predictive filter block 0 end" 0 0 "$PFb0end" 2>&1 1>&3);
exec 3>&-;
file="./conf/conf_PFblock_0.txt"
echo "$PFb0start $PFb0end $PFb0order $PFb0lag $PFb0dgain" > $file
;;

PFb0order)
exec 3>&1;
PFb0order=$(dialog --inputbox "Select Predictive filter block 0 order" 0 0 "$PFb0order" 2>&1 1>&3);
exec 3>&-;
file="./conf/conf_PFblock_0.txt"
echo "$PFb0start $PFb0end $PFb0order $PFb0lag $PFb0dgain" > $file
;;

PFb0lag)
exec 3>&1;
PFb0lag=$(dialog --inputbox "Select Predictive filter block 0 lag" 0 0 "$PFb0lag" 2>&1 1>&3);
exec 3>&-;
file="./conf/conf_PFblock_0.txt"
echo "$PFb0start $PFb0end $PFb0order $PFb0lag $PFb0dgain" > $file
;;

PFb0dgain)
exec 3>&1;
PFb0dgain=$(dialog --inputbox "Select Predictive filter block 0 derivation gain" 0 0 "$PFb0dgain" 2>&1 1>&3);
exec 3>&-;
file="./conf/conf_PFblock_0.txt"
echo "$PFb0start $PFb0end $PFb0order $PFb0lag $PFb0dgain" > $file
;;


PFb0nbGPU)
exec 3>&1;
PFb0nbGPU=$(dialog --inputbox "Select Predictive filter block 0 number of GPUs" 0 0 "$PFb0nbGPU" 2>&1 1>&3);
exec 3>&-;
file="./conf/conf_PFblock_0_nbGPU.txt"
echo "$PFb0nbGPU" > $file
;;



    PFb0GPU0)
exec 3>&1;
PFb0GPU0device=$(dialog --inputbox "PFb0 GPU0 device" 0 0 "$PFb0GPU0device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb0GPU0device" > ./conf/conf_PFb0GPU0device.txt
aoconflog "set PFb0GPU0device = ${PFb0GPU0device}"
menucontrolloop_default="PFb0GPU0"
;;

    PFb0GPU1)
exec 3>&1;
PFb0GPU1device=$(dialog --inputbox "PFb0 GPU1 device" 0 0 "$PFb0GPU1device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb0GPU1device" > ./conf/conf_PFb0GPU1device.txt
aoconflog "set PFb0GPU1device = ${PFb0GPU1device}"
menucontrolloop_default="PFb0GPU1"
;;

    PFb0GPU2)
exec 3>&1;
PFb0GPU2device=$(dialog --inputbox "PFb0 GPU2 device" 0 0 "$PFb0GPU2device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb0GPU2device" > ./conf/conf_PFb0GPU2device.txt
aoconflog "set PFb0GPU2device = ${PFb0GPU2device}"
menucontrolloop_default="PFb0GPU2"
;;

    PFb0GPU3)
exec 3>&1;
PFb0GPU3device=$(dialog --inputbox "PFb0 GPU3 device" 0 0 "$PFb0GPU3device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb0GPU3device" > ./conf/conf_PFb0GPU3device.txt
aoconflog "set PFb0GPU3device = ${PFb0GPU3device}"
menucontrolloop_default="PFb0GPU3"
;;

    PFb0GPU4)
exec 3>&1;
PFb0GPU4device=$(dialog --inputbox "PFb0 GPU4 device" 0 0 "$PFb0GPU4device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb0GPU4device" > ./conf/conf_PFb0GPU4device.txt
aoconflog "set PFb0GPU4device = ${PFb0GPU4device}"
menucontrolloop_default="PFb0GPU4"
;;

    PFb0GPU5)
exec 3>&1;
PFb0GPU5device=$(dialog --inputbox "PFb0 GPU5 device" 0 0 "$PFb0GPU5device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb0GPU5device" > ./conf/conf_PFb0GPU5device.txt
aoconflog "set PFb0GPU5device = ${PFb0GPU5device}"
menucontrolloop_default="PFb0GPU5"
;;

    PFb0GPU6)
exec 3>&1;
PFb0GPU6device=$(dialog --inputbox "PFb0 GPU6 device" 0 0 "$PFb0GPU6device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb0GPU6device" > ./conf/conf_PFb0GPU6device.txt
aoconflog "set PFb0GPU6device = ${PFb0GPU6device}"
menucontrolloop_default="PFb0GPU6"
;;

    PFb0GPU7)
exec 3>&1;
PFb0GPU7device=$(dialog --inputbox "PFb0 GPU7 device" 0 0 "$PFb0GPU7device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb0GPU7device" > ./conf/conf_PFb0GPU7device.txt
aoconflog "set PFb0GPU7device = ${PFb0GPU7device}"
menucontrolloop_default="PFb0GPU7"
;;

    PFb0GPU8)
exec 3>&1;
PFb0GPU8device=$(dialog --inputbox "PFb0 GPU8 device" 0 0 "$PFb0GPU8device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb0GPU8device" > ./conf/conf_PFb0GPU8device.txt
aoconflog "set PFb0GPU8device = ${PFb0GPU8device}"
menucontrolloop_default="PFb0GPU8"
;;

    PFb0GPU9)
exec 3>&1;
PFb0GPU9device=$(dialog --inputbox "PFb0 GPU9 device" 0 0 "$PFb0GPU9device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb0GPU9device" > ./conf/conf_PFb0GPU9device.txt
aoconflog "set PFb0GPU9device = ${PFb0GPU9device}"
menucontrolloop_default="PFb0GPU9"
;;














PFb1start)
exec 3>&1;
PFb1start=$(dialog --inputbox "Select Predictive filter block 1 start" 0 0 "$PFb1start" 2>&1 1>&3);
exec 3>&-;
file="./conf/conf_PFblock_1.txt"
echo "$PFb1start $PFb1end $PFb1order $PFb1lag $PFb1dgain" > $file
;;

PFb1end)
exec 3>&1;
PFb1end=$(dialog --inputbox "Select Predictive filter block 1 end" 0 0 "$PFb1end" 2>&1 1>&3);
exec 3>&-;
file="./conf/conf_PFblock_1.txt"
echo "$PFb1start $PFb1end $PFb1order $PFb1lag $PFb1dgain" > $file
;;

PFb1order)
exec 3>&1;
PFb1order=$(dialog --inputbox "Select Predictive filter block 1 order" 0 0 "$PFb1order" 2>&1 1>&3);
exec 3>&-;
file="./conf/conf_PFblock_1.txt"
echo "$PFb1start $PFb1end $PFb1order $PFb1lag $PFb1dgain" > $file
;;

PFb1lag)
exec 3>&1;
PFb1lag=$(dialog --inputbox "Select Predictive filter block 1 lag" 0 0 "$PFb1lag" 2>&1 1>&3);
exec 3>&-;
file="./conf/conf_PFblock_1.txt"
echo "$PFb1start $PFb1end $PFb1order $PFb1lag $PFb1dgain" > $file
;;

PFb1dgain)
exec 3>&1;
PFb1dgain=$(dialog --inputbox "Select Predictive filter block 1 derivation gain" 0 0 "$PFb1dgain" 2>&1 1>&3);
exec 3>&-;
file="./conf/conf_PFblock_1.txt"
echo "$PFb1start $PFb1end $PFb1order $PFb1lag $PFb1dgain" > $file
;;


PFb1nbGPU)
exec 3>&1;
PFb1nbGPU=$(dialog --inputbox "Select Predictive filter block 1 number of GPUs" 0 0 "$PFb1nbGPU" 2>&1 1>&3);
exec 3>&-;
file="./conf/conf_PFblock_1_nbGPU.txt"
echo "$PFb1nbGPU" > $file
;;


    PFb1GPU0)
exec 3>&1;
PFb1GPU0device=$(dialog --inputbox "PFb1 GPU0 device" 0 0 "$PFb1GPU0device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb1GPU0device" > ./conf/conf_PFb1GPU0device.txt
aoconflog "set PFb1GPU0device = ${PFb1GPU0device}"
menucontrolloop_default="PFb1GPU0"
;;

    PFb1GPU1)
exec 3>&1;
PFb1GPU1device=$(dialog --inputbox "PFb1 GPU1 device" 0 0 "$PFb1GPU1device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb1GPU1device" > ./conf/conf_PFb1GPU1device.txt
aoconflog "set PFb1GPU1device = ${PFb1GPU1device}"
menucontrolloop_default="PFb1GPU1"
;;

    PFb1GPU2)
exec 3>&1;
PFb1GPU2device=$(dialog --inputbox "PFb1 GPU2 device" 0 0 "$PFb1GPU2device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb1GPU2device" > ./conf/conf_PFb1GPU2device.txt
aoconflog "set PFb1GPU2device = ${PFb1GPU2device}"
menucontrolloop_default="PFb1GPU2"
;;

    PFb1GPU3)
exec 3>&1;
PFb1GPU3device=$(dialog --inputbox "PFb1 GPU3 device" 0 0 "$PFb1GPU3device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb1GPU3device" > ./conf/conf_PFb1GPU3device.txt
aoconflog "set PFb1GPU3device = ${PFb1GPU3device}"
menucontrolloop_default="PFb1GPU3"
;;

    PFb1GPU4)
exec 3>&1;
PFb1GPU4device=$(dialog --inputbox "PFb1 GPU4 device" 0 0 "$PFb1GPU4device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb1GPU4device" > ./conf/conf_PFb1GPU4device.txt
aoconflog "set PFb1GPU4device = ${PFb1GPU4device}"
menucontrolloop_default="PFb1GPU4"
;;

    PFb1GPU5)
exec 3>&1;
PFb1GPU5device=$(dialog --inputbox "PFb1 GPU5 device" 0 0 "$PFb1GPU5device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb1GPU5device" > ./conf/conf_PFb1GPU5device.txt
aoconflog "set PFb1GPU5device = ${PFb1GPU5device}"
menucontrolloop_default="PFb1GPU5"
;;

    PFb1GPU6)
exec 3>&1;
PFb1GPU6device=$(dialog --inputbox "PFb1 GPU6 device" 0 0 "$PFb1GPU6device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb1GPU6device" > ./conf/conf_PFb1GPU6device.txt
aoconflog "set PFb1GPU6device = ${PFb1GPU6device}"
menucontrolloop_default="PFb1GPU6"
;;

    PFb1GPU7)
exec 3>&1;
PFb1GPU7device=$(dialog --inputbox "PFb1 GPU7 device" 0 0 "$PFb1GPU7device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb1GPU7device" > ./conf/conf_PFb1GPU7device.txt
aoconflog "set PFb1GPU7device = ${PFb1GPU7device}"
menucontrolloop_default="PFb1GPU7"
;;

    PFb1GPU8)
exec 3>&1;
PFb1GPU8device=$(dialog --inputbox "PFb1 GPU8 device" 0 0 "$PFb1GPU8device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb1GPU8device" > ./conf/conf_PFb1GPU8device.txt
aoconflog "set PFb1GPU8device = ${PFb1GPU8device}"
menucontrolloop_default="PFb1GPU8"
;;

    PFb1GPU9)
exec 3>&1;
PFb1GPU9device=$(dialog --inputbox "PFb1 GPU9 device" 0 0 "$PFb1GPU9device" 2>&1 1>&3);
exec 3>&-;
echo "$PFb1GPU9device" > ./conf/conf_PFb1GPU9device.txt
aoconflog "set PFb1GPU9device = ${PFb1GPU9device}"
menucontrolloop_default="PFb1GPU9"
;;










	PFb0wON)
tmuxname="aol${LOOPNUMBER}PFb0watchin"
tmux new-session -d -s ${tmuxname}
tmux send-keys -t ${tmuxname} " " C-m
tmux send-keys -t ${tmuxname} " " C-m
tmux send-keys -t ${tmuxname} "Cfits" C-m
tmux send-keys -t ${tmuxname} "aolPFwatchin ${LOOPNUMBER} 0" C-m
#tmux send-keys -t ${tmuxname} "exit" C-m
PFb0wON=" ON"
file="./status/stat_PFb0wON.txt"
echo "writing $PFb0wON to file $file"
echo "$PFb0wON" > $file
menupred_default="PFb0wOFF"
;;

	PFb0wOFF)
tmuxname="aol${LOOPNUMBER}PFb0watchin"
tmux send-keys -t ${tmuxname} C-c
PFb0wON="OFF"
file="./status/stat_PFb0wON.txt"
echo "$PFb0wON" > $file
menupred_default="PFb0wON"
;;





	PFb1wON)
tmuxname="aol${LOOPNUMBER}PFb1watchin"
tmux new-session -d -s ${tmuxname}
tmux send-keys -t ${tmuxname} " " C-m
tmux send-keys -t ${tmuxname} " " C-m
tmux send-keys -t ${tmuxname} "Cfits" C-m
tmux send-keys -t ${tmuxname} "aolPFwatchin ${LOOPNUMBER} 1" C-m
#tmux send-keys -t ${tmuxname} "exit" C-m
PFb1wON=" ON"
file="./status/stat_PFb1wON.txt"
echo "writing $PFb1wON to file $file"
echo "$PFb1wON" > $file
menupred_default="PFb1wOFF"
;;

	PFb1wOFF)
tmuxname="aol${LOOPNUMBER}PFb1watchin"
tmux send-keys -t ${tmuxname} C-c
PFb1wON="OFF"
file="./status/stat_PFb1wON.txt"
echo "$PFb1wON" > $file
menupred_default="PFb1wON"
;;






	PFb0cON)
tmuxname="aol${LOOPNUMBER}PFb0comp"
tmux new-session -d -s ${tmuxname}
tmux send-keys -t ${tmuxname} " " C-m
tmux send-keys -t ${tmuxname} " " C-m
tmux send-keys -t ${tmuxname} "Cfits" C-m
tmux send-keys -t ${tmuxname} "readshmim aol${LOOPNUMBER}_modevalol_PFb0" C-m
tmux send-keys -t ${tmuxname} "mkARpfilt aol${LOOPNUMBER}_modevalol_PFb0 ${PFb0order} ${PFb0lag} 0.0001 0.0 aol${LOOPNUMBER}_outPFb0 1 ${PFb0dgain}" C-m
#tmux send-keys -t ${tmuxname} "exit" C-m
PFb0cON=" ON"
file="./status/stat_PFb0cON.txt"
echo "writing $PFb0cON to file $file"
echo "$PFb0cON" > $file
menupred_default="PFb0cOFF"
;;

	PFb0cOFF)
tmuxname="aol${LOOPNUMBER}PFb0comp"
tmux send-keys -t ${tmuxname} C-c
PFb0cON="OFF"
file="./status/stat_PFb0cON.txt"
echo "$PFb0cON" > $file
menupred_default="PFb0cON"
;;




	PFb1cON)
tmuxname="aol${LOOPNUMBER}PFb1comp"
tmux new-session -d -s ${tmuxname}
tmux send-keys -t ${tmuxname} " " C-m
tmux send-keys -t ${tmuxname} " " C-m
tmux send-keys -t ${tmuxname} "Cfits" C-m
tmux send-keys -t ${tmuxname} "readshmim aol${LOOPNUMBER}_modevalol_PFb1" C-m
tmux send-keys -t ${tmuxname} "mkARpfilt aol${LOOPNUMBER}_modevalol_PFb1 ${PFb1order} ${PFb1lag} 0.0001 0.0 aol${LOOPNUMBER}_outPFb1 1 ${PFb1dgain}" C-m
#tmux send-keys -t ${tmuxname} "exit" C-m
PFb1cON=" ON"
file="./status/stat_PFb1cON.txt"
echo "writing $PFb1cON to file $file"
echo "$PFb1cON" > $file
menupred_default="PFb1cOFF"
;;

	PFb1cOFF)
tmuxname="aol${LOOPNUMBER}PFb1comp"
tmux send-keys -t ${tmuxname} C-c
PFb1cON="OFF"
file="./status/stat_PFb1cON.txt"
echo "$PFb1cON" > $file
menupred_default="PFb1cON"
;;











	PFb0aON)
cp PredictiveControl/inmaskPF0.fits inmask0.fits
cp PredictiveControl/outmaskPF0.fits outmask0.fits
tmuxname="aol${LOOPNUMBER}PFb0apply"
tmux new-session -d -s ${tmuxname}
tmux send-keys -t ${tmuxname} " " C-m
tmux send-keys -t ${tmuxname} " " C-m

tmux send-keys -t ${tmuxname} "./auxscripts/predFiltApplyRT -i 0 -o -g ${PFb0nbGPU} aol${LOOPNUMBER}_modeval_ol aol${LOOPNUMBER}_outPFb0  aol${LOOPNUMBER}_modevalPFb0" C-m

PFb0aON=" ON"
file="./status/stat_PFb0aON.txt"
echo "writing $PFb0aON to file $file"
echo "$PFb0aON" > $file
menupred_default="PFb0aOFF"
;;

	PFb0aOFF)
tmuxname="aol${LOOPNUMBER}PFb0apply"
tmux send-keys -t ${tmuxname} C-c
tmux send-keys -t ${tmuxname} "exit" C-m
PFb0aON="OFF"
file="./status/stat_PFb0aON.txt"
echo "$PFb0aON" > $file
menupred_default="PFb0aON"
;;





	PFb1aON)
tmuxname="aol${LOOPNUMBER}PFb1apply"
tmux new-session -d -s ${tmuxname}
tmux send-keys -t ${tmuxname} " " C-m
tmux send-keys -t ${tmuxname} " " C-m
./predFiltApplyRT -s -n 1000  accposPF accposP

tmux send-keys -t ${tmuxname} "Cfits" C-m

#tmux send-keys -t ${tmuxname} "applyPfiltRT indata Pfilt outPF" C-m
#tmux send-keys -t ${tmuxname} "exit" C-m
PFb1aON=" ON"
file="./status/stat_PFb1aON.txt"
echo "writing $PFb1aON to file $file"
sleep 2
echo "$PFb1aON" > $file
menupred_default="PFb1aOFF"
;;

	PFb1aOFF)
tmuxname="aol${LOOPNUMBER}PFb1apply"
tmux send-keys -t ${tmuxname} C-c
PFb1aON="OFF"
file="./status/stat_PFb1aON.txt"
echo "$PFb1aON" > $file
menupred_default="PFb1aON"
;;










esac
;; 
   1) state="menutop";;   
  2) state="menuexit";;
   255) state="menuexit";;
esac

fi






