#!/bin/bash


if [ ! -v aolconfFLAG ]; then
echo "ERROR: This script should be called from aolconf main script"
exit
fi


















# =====================================================
# ======== CONTROL AO LOOP ============================
# =====================================================
if [ $state = "menucontrolloop" ]; then
stateok=1
menuname="CONTROL LOOP"


function_controlloop_readparams



stringcenter "HARDWARE RESOURCES ALLOCATION"
menuitems=( "1 ->" "\Zb\Zr$string\Zn" )



ConfReadParam GPU "0"; GPU="$paramvalue"
if [ "${GPU}" = "0" ];
then
menuitems+=( "GPUsel" "[ GPU is OFF  ]    CONTROL MATRIX MULT CURRENTLY NOT USING CPU(s) -> Turn on GPU mode" )
else
menuitems+=( "GPUsel" " CONTROL MATRIX MULT CURRENTLY USING \Z5\Zr $GPU \Zn GPU(S)" )
fi



if [ "0" -lt "$GPU" ]; then
ConfReadParam GPUset0dev0 "0"; GPUset0dev0="$paramvalue"
menuitems+=( "GPU0" "            [ $GPUset0dev0 ]    GPU #0 device" )
fi


if [ "1" -lt "$GPU" ]; then
ConfReadParam GPUset0dev1 "1"; GPUset0dev1="$paramvalue"
menuitems+=( "GPU1" "            [ $GPUset0dev1 ]    GPU #1 device" )
fi


if [ "2" -lt "$GPU" ]; then
ConfReadParam GPUset0dev2 "2"; GPUset0dev2="$paramvalue"
menuitems+=( "GPU2" "            [ $GPUset0dev2 ]    GPU #2 device" )
fi


if [ "3" -lt "$GPU" ]; then
ConfReadParam GPUset0dev3 "3"; GPUset0dev3="$paramvalue"
menuitems+=( "GPU3" "            [ $GPUset0dev3 ]    GPU #3 device" )
fi


if [ "4" -lt "$GPU" ]; then
ConfReadParam GPUset0dev4 "4"; GPUset0dev4="$paramvalue"
menuitems+=( "GPU4" "            [ $GPUset0dev4 ]    GPU #4 device" )
fi


if [ "5" -lt "$GPU" ]; then
ConfReadParam GPUset0dev5 "5"; GPUset0dev5="$paramvalue"
menuitems+=( "GPU5" "            [ $GPUset0dev5 ]    GPU #5 device" )
fi


if [ "6" -lt "$GPU" ]; then
ConfReadParam GPUset0dev6 "6"; GPUset0dev6="$paramvalue"
menuitems+=( "GPU6" "            [ $GPUset0dev6 ]    GPU #6 device" )
fi


if [ "7" -lt "$GPU" ]; then
ConfReadParam GPUset0dev7 "7"; GPUset0dev7="$paramvalue"
menuitems+=( "GPU7" "            [ $GPUset0dev7 ]    GPU #7 device" )
fi


if [ "8" -lt "$GPU" ]; then
ConfReadParam GPUset0dev8 "8"; GPUset0dev8="$paramvalue"
menuitems+=( "GPU8" "            [ $GPUset0dev8 ]    GPU #8 device" )
fi


if [ "9" -lt "$GPU" ]; then
ConfReadParam GPUset0dev9 "9"; GPUset0dev9="$paramvalue"
menuitems+=( "GPU9" "            [ $GPUset0dev9 ]    GPU #9 device" )
fi




ConfReadParam GPUmodeARPF "0"; GPUmodeARPF="$paramvalue"
if [ "${GPUmodeARPF}" = "0" ]; then
menuitems+=( "GPUselARPF" "[ GPU_ARPF is OFF  ]    AR PREDICTION MATRIX MULT CURRENTLY NOT USING CPU(s) -> Turn on GPU_ARPF mode" )
else
menuitems+=( "GPUselARPF" " AR PREDICTION MATRIX MULT CURRENTLY USING \Z5\Zr $GPUmodeARPF \Zn GPU(S)" )
fi



if [ "0" -lt "$GPUmodeARPF" ]; then
ConfReadParam GPU0ARPFdevice "0"; GPU0ARPFdevice="$paramvalue"
menuitems+=( "GPU0ARPF" "            [ $GPU0ARPFdevice ]    GPU ARPF #0 device" )
fi

if [ "1" -lt "$GPUmodeARPF" ]; then
ConfReadParam GPU1ARPFdevice "1"; GPU1ARPFdevice="$paramvalue"
menuitems+=( "GPU1ARPF" "            [ $GPU1ARPFdevice ]    GPU ARPF #1 device" )
fi

if [ "2" -lt "$GPUmodeARPF" ]; then
ConfReadParam GPU2ARPFdevice "2"; GPU2ARPFdevice="$paramvalue"
menuitems+=( "GPU2ARPF" "            [ $GPU2ARPFdevice ]    GPU ARPF #2 device" )
fi

if [ "3" -lt "$GPUmodeARPF" ]; then
ConfReadParam GPU3ARPFdevice "3"; GPU3ARPFdevice="$paramvalue"
menuitems+=( "GPU3ARPF" "            [ $GPU3ARPFdevice ]    GPU ARPF #3 device" )
fi

if [ "4" -lt "$GPUmodeARPF" ]; then
ConfReadParam GPU4ARPFdevice "4"; GPU4ARPFdevice="$paramvalue"
menuitems+=( "GPU4ARPF" "            [ $GPU4ARPFdevice ]    GPU ARPF #4 device" )
fi

if [ "5" -lt "$GPUmodeARPF" ]; then
ConfReadParam GPU5ARPFdevice "5"; GPU5ARPFdevice="$paramvalue"
menuitems+=( "GPU5ARPF" "            [ $GPU5ARPFdevice ]    GPU ARPF #5 device" )
fi

if [ "6" -lt "$GPUmodeARPF" ]; then
ConfReadParam GPU06RPFdevice "6"; GPU6ARPFdevice="$paramvalue"
menuitems+=( "GPU6ARPF" "            [ $GPU6ARPFdevice ]    GPU ARPF #6 device" )
fi

if [ "7" -lt "$GPUmodeARPF" ]; then
ConfReadParam GPU7ARPFdevice "7"; GPU7ARPFdevice="$paramvalue"
menuitems+=( "GPU7ARPF" "            [ $GPU7ARPFdevice ]    GPU ARPF #7 device" )
fi

if [ "8" -lt "$GPUmodeARPF" ]; then
ConfReadParam GPU8ARPFdevice "8"; GPU8ARPFdevice="$paramvalue"
menuitems+=( "GPU8ARPF" "            [ $GPU8ARPFdevice ]    GPU ARPF #8 device" )
fi

if [ "9" -lt "$GPUmodeARPF" ]; then
ConfReadParam GPU9ARPFdevice "9"; GPU9ARPFdevice="$paramvalue"
menuitems+=( "GPU9ARPF" "            [ $GPU9ARPFdevice ]    GPU ARPF #9 device" )
fi






ConfReadParam DM2DM_mode "0"; DM2DM_mode="$paramvalue"
if [ "${DM2DM_mode}" = "0" ]; then

ConfReadParam GPUmodesextrwfs "0"; GPUmodesextrwfs="$paramvalue"
menuitems+=( "GPUmewfs" "[ $GPUmodesextrwfs ]    WFS mode coefficients extraction: GPU device" )

ConfReadParam GPUdmfwb "0"; GPUdmfwb="$paramvalue"
menuitems+=( "GPUdmfwb" "[ $GPUdmfwb ]    DM modal write (post-filtering): GPU device" )

ConfReadParam GPUzpoffsetZ "0"; GPUzpoffsetZ="$paramvalue"
menuitems+=( "GPUzpZ" "[ $GPUzpoffsetZ ]    Zonal WFS zero point offset loop: GPU device" )

fi




if [ "${DM2DM_mode}" = "1" ]; then
ConfReadParam GPUzpoffsetM "0"; GPUzpoffsetM="$paramvalue"
menuitems+=( "GPUzpM" "[ $GPUzpoffsetM ]    Modal WFS zero point offset loop: GPU device" )
fi








if [[ "${GPU}" -ne "0" ]]; then   

ConfReadParam GPUall "0"; GPUall="$paramvalue"
 if [ "${GPUall}" = "0" ]; then
  menuitems+=( "GPUaon" "[GPUall is OFF]    CURRENTLY USING CPU(s) + GPU(s)       -> Turn on GPUall mode" )
 else
  menuitems+=( "GPUaoff" "\Z5\Zr[GPUall is  ON]\Zn    CURRENTLY USING GPU(S) FOR ALL        -> Turn off GPUall mode" )
 fi
else
 menuitems+=( " " " GPUall = 0" )
fi


# Combined pix->act or pix->mode->act
ConfReadParam CMMODE "0"; CMMODE="$paramvalue"
if [ "${CMMODE}" = "0" ]; then
menuitems+=( "CMm1" "[CMMODE is OFF]    CURRENTLY USING SEPARATE MATRICES     -> Switch to combined control matrix" )
else
menuitems+=( "CMm0" "\Z5\Zr[CMMODE is  ON]\Zn    CURRENTLY USING COMBINED MATRIX       -> Switch to separate control matrices" )
fi




menuitems+=( " " " " )
stringcenter "LOOP PROCESSES"
menuitems+=( "2 ->" "\Zb\Zr$string\Zn" )




ConfReadParam LOOPPROCESS_EXTRWFSMODES "0"; LOOPPROCESS_EXTRWFSMODES="$paramvalue"
ConfReadParam LOOPPROCESS_EXTROLMODES "0"; LOOPPROCESS_EXTROLMODES="$paramvalue"
ConfReadParam LOOPPROCESS_DMFILTWB "0"; LOOPPROCESS_DMFILTWB="$paramvalue"
ConfReadParam LOOPPROCESS_ZPO "0"; LOOPPROCESS_ZPO="$paramvalue"
ConfReadParam LOOPPROCESS_DMCAVE "0"; LOOPPROCESS_DMCAVE="$paramvalue"
ConfReadParam LOOPPROCESS_WFSRESAVE "0"; LOOPPROCESS_WFSRESAVE="$paramvalue"

StatReadStat procON "OFF"; procONstat="$statusvalue"

if [ "${procONstat}" = "OFF" ]; then
 menuitems+=( "S" "\Zb\Zu ==== START loop processes ====\ZB\ZU" )
 
 menuitems+=( "LPmewfs" "  [$LOOPPROCESS_EXTRWFSMODES] Toggle loop process : extract WFS modes       -> aol${LOOPNUMBER}_modeval .._ave .._rms .._tace" )
 
 menuitems+=( "LPmeol" "  [$LOOPPROCESS_EXTROLMODES] Toggle loop process : extract open loop modes -> aol${LOOPNUMBER}_modeval_ol .._dm_now" )
 
 menuitems+=( "DMfWB" "  [$LOOPPROCESS_DMFILTWB] Toggle DM filtering write back process -> aol${LOOPNUMBER}_dmC" )
 
 menuitems+=( "LPzpo" "  [$LOOPPROCESS_ZPO] Toggle loop process : Zero pt offset" )
 
 menuitems+=( "LPdmCa" "  [$LOOPPROCESS_DMCAVE] Toggle loop process : Running average of dmC" )
 
 menuitems+=( "LPwfsresa" "  [$LOOPPROCESS_WFSRESAVE] Toggle loop process : Compute and average wfsres" )

else
 menuitems+=( "K" "\Z1\ZrLoop processes ON, press to STOP\Zn" )

 if [ "$LOOPPROCESS_EXTRWFSMODES" -eq "1" ]; then
  menuitems+=( " " "     \Z1\Zr[$LOOPPROCESS_EXTRWFSMODES] ---  RUNNING    ---   extract WFS modes -> aol${LOOPNUMBER}_modeval .._ave .._rms .._tace\Zn" )
 else
  menuitems+=( " " "     [$LOOPPROCESS_EXTRWFSMODES] --- not running ---   extract WFS modes -> aol${LOOPNUMBER}_modeval .._ave .._rms .._tace" )
 fi

 if [ "$LOOPPROCESS_EXTROLMODES" -eq "1" ]; then
  menuitems+=( " " "     \Z1\Zr[$LOOPPROCESS_EXTROLMODES] ---  RUNNING    ---   extract open loop modes -> aol${LOOPNUMBER}_modeval_ol .._dm_now\Zn" )
 else
  menuitems+=( " " "     [$LOOPPROCESS_EXTROLMODES] --- not running ---   extract open loop modes -> aol${LOOPNUMBER}_modeval_ol .._dm_now" )
 fi

 if [ "$LOOPPROCESS_DMFILTWB" -eq "1" ]; then
  menuitems+=( " " "     \Z1\Zr[$LOOPPROCESS_DMFILTWB] ---  RUNNING    ---   DM filtering write back process -> aol${LOOPNUMBER}_dmC\Zn" )
 else
  menuitems+=( " " "     [$LOOPPROCESS_DMFILTWB] --- not running ---   DM filtering write back process -> aol${LOOPNUMBER}_dmC" )
 fi


 if [ "$LOOPPROCESS_ZPO" -eq "1" ]; then
  menuitems+=( " " "     \Z1\Zr[$LOOPPROCESS_ZPO] ---  RUNNING    ---   Zero pt offset\Zn" )
 else
  menuitems+=( " " "     [$LOOPPROCESS_ZPO] --- not running ---   Zero pt offset" )
 fi

 if [ "$LOOPPROCESS_DMCAVE" -eq "1" ]; then
  menuitems+=( " " "     \Z1\Zr[$LOOPPROCESS_DMCAVE] ---  RUNNING    ---   Running average of dmC\Zn" )
 else
  menuitems+=( " " "     [$LOOPPROCESS_DMCAVE] --- not running ---   Running average of dmC" )
 fi

 if [ "$LOOPPROCESS_WFSRESAVE" -eq "1" ]; then
  menuitems+=( " " "     \Z1\Zr[$LOOPPROCESS_WFSRESAVE] ---  RUNNING    ---   Compute and average wfsres\Zn" )
 else
  menuitems+=( " " "     [$LOOPPROCESS_WFSRESAVE] --- not running ---   Compute and average wfsres" )
 fi

fi





menuitems+=( " " " " )
stringcenter "LOOP CONTROL "
menuitems+=( "3 ->" "\Zb\Zr$string\Zn" )


if [ "${procONstat}" = " ON" ]; then

 if [ "${loopONstat}" = "OFF" ]; then
  menuitems+=( "Nloopon" "  \Zb\Zu ==== START control loop ====\ZB\ZU" )
 else
  menuitems+=( "Floopoff" "\Z1\ZrLoop running, press to STOP\Zn" )
 fi
 
 menuitems+=( "Z" "LOOP Zero" )
 
 #Q: loopNBstep as param ?
 menuitems+=( "nbstep" "[$loopNBstep] set loopNBsteps" )
 menuitems+=( "tstep" "Advance $loopNBstep step(s)" )
 
 #Q: read stat vars as conf/param ?
 if [ "$procWFSres2refONstat" = "OFF" ]; then
  menuitems+=( "wresolON" "WFS residual offload to wfsref is OFF, press to START" )
 else
  menuitems+=( "wresolOFF" "\Z1\ZrWFS residual offload to wfsref is ON, press to STOP\Zn" )
 fi
else
 menuitems+=( " " "\Z1 Processes need to be ON to turn loop ON/OFF \Zn")
 menuitems+=( "Z" "LOOP Zero" )
 menuitems+=( " " "\Z1[$loopNBstep] set loopNBsteps\Zn" )
 menuitems+=( " " "\Z1Advance $loopNBstep step(s)\Zn" )
 menuitems+=( " " "WFS residual offload to wfsref requires loop ON" )
fi
menuitems+=( "wresolinit" "WFS residual offload initialize" )
menuitems+=( "wzpoinit" "Initialize all wfszpo" )







menuitems+=( " " " " )
stringcenter "LOOP MONITORING "
menuitems+=( "4 ->" "\Zb\Zr$string\Zn" )

menuitems+=( "ctrmon" "  Enter tmux session aol${LOOPNUMBER}-ctr" )
menuitems+=( "runmon" "  Monitor tmux session aol${LOOPNUMBER}-run" )



menuitems+=( " " " " )
stringcenter "LOOP SETTING "
menuitems+=( "5 ->" "\Zb\Zr$string\Zn" )

ConfReadParam loopgain "0.000"; loopgain="$paramvalue"
menuitems+=( "g" "loop gain         =   ${loopgain}" )

ConfReadParam loopmultcoeff "0.000"; loopmultcoeff="$paramvalue"
menuitems+=( "e" "mult coeff        =   ${loopmultcoeff}" )

ConfReadParam loopmaxlim "0.000"; loopmaxlim="$paramvalue"
menuitems+=( "m" "actuator max lim  =   ${loopmaxlim}" )



ConfReadParam DMprimWriteON "0"; DMprimWriteON="$paramvalue"
if [ "$DMprimWriteON" = "0" ]; then
menuitems+=( "DMpWon" " DM Primary Write is OFF - press to START" )
else
menuitems+=( "DMpWoff" "\Z1\Zr DM Primary Write is  ON - press to STOP\Zn  " )
fi




menuitems+=( " " " " )

menuitems+=( "limreset" "Reset mode limit coefficients to 1.0" )

ConfReadParam AUTOTUNELIMITS_ON "OFF"; AUTOTUNELIMITS_ON="$paramvalue"       
if [ "$AUTOTUNELIMITS_ON" = "OFF" ]; then
  menuitems+=( "ONatlim" "[$AUTOTUNELIMITS_ON]  \Zb\Zu ==== START AUTOTUNE LIMITS loop ====\ZB\ZU" )
else
  menuitems+=( "OFFatlim" "[$AUTOTUNELIMITS_ON] \Z1\ZrAUTOTUNE LIMITS running, press to STOP\Zn" )
fi

ConfReadParam AUTOTUNELIMITS_ON "OFF"; AUTOTUNELIMITS_ON="$paramvalue"
menuitems+=( "atlp" "AUTOTUNE_LIMIT_perc         =   ${AUTOTUNELIMITperc}" )

ConfReadParam AUTOTUNELIMITmcoeff "0.0"; AUTOTUNELIMITmcoeff="$paramvalue"
menuitems+=( "atlm" "AUTOTUNE_LIMIT_mcoeff       =   ${AUTOTUNELIMITmcoeff}" )

ConfReadParam AUTOTUNELIMITdelta "0.0"; AUTOTUNELIMITdelta="$paramvalue"
menuitems+=( "atld" "AUTOTUNE_LIMIT_delta        =   ${AUTOTUNELIMITdelta}" )




ConfReadParam AUTOTUNEGAINS_ON "OFF"; AUTOTUNEGAINS_ON="$paramvalue"
if [ "${AUTOTUNEGAINS_ON}" = "OFF" ];
  then
  menuitems+=( "ONatgain" "  \Zb\Zu ==== START AUTOTUNE GAINS loop ====\ZB\ZU" )
  else
  menuitems+=( "OFFatgain" "\Z1\ZrAUTOTUNE GAINS running, press to STOP\Zn" )
fi




menuitems+=( " " " " )

ConfReadParam ARPFon "OFF"; ARPFon="$paramvalue"
if [ "$ARPFon" = "OFF" ]; then
menuitems+=( "ARPFon" " Predictive control (ARPF) is OFF - press to START" )
else
menuitems+=( "ARPFoff" "\Z1\Zr Predictive control (ARPF) is  ON - press to STOP\Zn  " )
fi

ConfReadParam ARPFg "0.0"; ARPFg="$paramvalue"
menuitems+=( "ARPFg" "ARPF gain    =   ${ARPFgain}" )





menuitems+=( " " " " )
stringcenter "MODAL BLOCK GAINS AND LIMITS"
menuitems+=( "6 ->" "\Zb\Zr$string\Zn" )

if [ "$CMMODE" = "0" ]; then
	menuitems+=( "gball" "Set all block to same gain")
	menuitems+=( "gball01" "Custom gain set 01 (alpha = 0.1)")
	menuitems+=( "gball02" "Custom gain set 02 (alpha = 0.2)")
	menuitems+=( "gball04" "Custom gain set 04 (alpha = 0.4)")
	menuitems+=( "gball08" "Custom gain set 08 (alpha = 0.8)")
	menuitems+=( "gball12" "Custom gain set 12 (alpha = 1.2)")
	menuitems+=( "gball16" "Custom gain set 16 (alpha = 1.6)")
	menuitems+=( "gball20" "Custom gain set 20 (alpha = 2.0)")
	menuitems+=( " " " " )
	menuitems+=( "lball" "Set all block to same limit")
	menuitems+=( "mball" "Set all block to same multf")
	menuitems+=( " " " " )
	NBblocks=$( cat ./conf/param_NBmodeblocks.txt )

	for i in `seq 0 $(( $NBblocks - 1 ))`;
	do
	i2=$(printf "%02d" "$i")

	NBblockmodes=$( cat ./conf/block${i2}_NBmodes.txt )
	
	string=$( printf "% 3d" "${NBblockmodes}" )

	menuitems+=( " "       "         \Zb\Zr======= BLOCK #${i2}  - ($string modes) ============\Zn" )

	ConfReadParam gainb${i2} "0.100"; gainb[10#${i2}]="$paramvalue"	
	menuitems+=( "gb${i2}" "[ ${gainb[10#${i2}]} ]   Modal block ${i2} gain" )

	ConfReadParam limitb${i2} "0.100"; limitb[10#${i2}]="$paramvalue"
	menuitems+=( "lb${i2}" "[ ${limitb[10#${i2}]} ] Modal block ${i2} limit" )

	ConfReadParam multfb${i2} "0.990"; multfb[10#${i2}]="$paramvalue"
	menuitems+=( "mb${i2}" "[ ${multfb[10#${i2}]} ]   Modal block ${i2} multf" )

	done
	else
	menuitems+=( " " "LOOP CONTROL IS IN ZONAL MODE - NO ACCESS TO MODAL GAINS OR LIMITS" )
fi



menuitems+=( " " " " )
stringcenter "ZONAL ZERO POINT (slow CPU-BASED)"
menuitems+=( "7 ->" "\Zb\Zr$string\Zn" )












# Q: ? ConfReadParam zpmultcoeff "0.90"; zpmultceoff="$paramvalue"
menuitems+=( "zpmult" "[ ${zpmultcoeff} ] Multiply WFS reference by coefficient" )


if [ "${GPUzploopONstat0}" = "OFF" ]; then
if [ "${zploopONstat0}" = "OFF" ];
then
menuitems+=( "zplon0" "   START DM->WFS zero point offset loop #0 (\Z4${dmZP0}\Zn -> wfszpo0)" )
elif [ "${zploopONstat0}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 0 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "zploff0" "\Z1\Zr    STOP DM->WFS zero point offset loop #0\Zn (\Z4${dmZP0}\Zn -> wfszpo0)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 0 CURRENTLY USED FOR GPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${GPUzploopONstat1}" = "OFF" ]; then
if [ "${zploopONstat1}" = "OFF" ];
then
menuitems+=( "zplon1" "   START DM->WFS zero point offset loop #1 (\Z4${dmZP1}\Zn -> wfszpo1)" )
elif [ "${zploopONstat1}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 1 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "zploff1" "\Z1\Zr    STOP DM->WFS zero point offset loop #1\Zn (\Z4${dmZP1}\Zn -> wfszpo1)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 1 CURRENTLY USED FOR GPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${GPUzploopONstat2}" = "OFF" ]; then
if [ "${zploopONstat2}" = "OFF" ];
then
menuitems+=( "zplon2" "   START DM->WFS zero point offset loop #2 (\Z4${dmZP2}\Zn -> wfszpo2)" )
elif [ "${zploopONstat2}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 2 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "zploff2" "\Z1\Zr    STOP DM->WFS zero point offset loop #2\Zn (\Z4${dmZP2}\Zn -> wfszpo2)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 2 CURRENTLY USED FOR GPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${GPUzploopONstat3}" = "OFF" ]; then
if [ "${zploopONstat3}" = "OFF" ];
then
menuitems+=( "zplon3" "   START DM->WFS zero point offset loop #3 (\Z4${dmZP3}\Zn -> wfszpo3)" )
elif [ "${zploopONstat3}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 3 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "zploff3" "\Z1\Zr    STOP DM->WFS zero point offset loop #3\Zn (\Z4${dmZP3}\Zn -> wfszpo3)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 3 CURRENTLY USED FOR GPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${GPUzploopONstat4}" = "OFF" ]; then
if [ "${zploopONstat4}" = "OFF" ];
then
menuitems+=( "zplon4" "   START DM->WFS zero point offset loop #4 (\Z4${dmZP4}\Zn -> wfszpo4)" )
elif [ "${zploopONstat4}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 4 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "zploff4" "\Z1\Zr    STOP DM->WFS zero point offset loop #4\Zn (\Z4${dmZP4}\Zn -> wfszpo4)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 4 CURRENTLY USED FOR GPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${GPUzploopONstat5}" = "OFF" ]; then
if [ "${zploopONstat5}" = "OFF" ];
then
menuitems+=( "zplon5" "   START DM->WFS zero point offset loop #5 (\Z4${dmZP5}\Zn -> wfszpo5)" )
elif [ "${zploopONstat5}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 5 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "zploff5" "\Z1\Zr    STOP DM->WFS zero point offset loop #5\Zn (\Z4${dmZP5}\Zn -> wfszpo5)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 5 CURRENTLY USED FOR GPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${GPUzploopONstat6}" = "OFF" ]; then
if [ "${zploopONstat6}" = "OFF" ];
then
menuitems+=( "zplon6" "   START DM->WFS zero point offset loop #6 (\Z4${dmZP6}\Zn -> wfszpo6)" )
elif [ "${zploopONstat6}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 6 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "zploff6" "\Z1\Zr    STOP DM->WFS zero point offset loop #6\Zn (\Z4${dmZP6}\Zn -> wfszpo6)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 6 CURRENTLY USED FOR GPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${GPUzploopONstat7}" = "OFF" ]; then
if [ "${zploopONstat7}" = "OFF" ];
then
menuitems+=( "zplon7" "   START DM->WFS zero point offset loop #7 (\Z4${dmZP7}\Zn -> wfszpo7)" )
elif [ "${zploopONstat7}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 7 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "zploff7" "\Z1\Zr    STOP DM->WFS zero point offset loop #7\4n (\Z4${dmZP7}\Zn -> wfszpo7)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 7 CURRENTLY USED FOR GPU-BASED ZONAL ZERO POINT\Zn" )
fi




menuitems+=( "zpinj" "Inject Fourier mode to DM zero point" )
menuitems+=( "zpz" "Zero DM zero point" )




menuitems+=( " " " " )
stringcenter "ZONAL ZERO POINT (fast GPU-BASED)"
menuitems+=( "8 ->" "\Zb\Zr$string\Zn" )



if [ "${zploopONstat0}" = "OFF" ]; then
if [ "${GPUzploopONstat0}" = "OFF" ];
then
menuitems+=( "GPUzplon0" "   START DM->WFS zero point GPU offset loop #0 (\Z4${dmZP0}\Zn -> wfszpo0)" )
elif [ "${GPUzploopONstat0}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 0 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "GPUzploff0" "\Z1\Zr    STOP DM->WFS zero point GPU offset loop #0\Zn (\Z4${dmZP0}\Zn -> wfszpo0)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 0 CURRENTLY USED FOR CPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${zploopONstat1}" = "OFF" ]; then
if [ "${GPUzploopONstat1}" = "OFF" ];
then
menuitems+=( "GPUzplon1" "   START DM->WFS zero point GPU offset loop #1 (\Z4${dmZP1}\Zn -> wfszpo1)" )
elif [ "${GPUzploopONstat1}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 1 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "GPUzploff1" "\Z1\Zr    STOP DM->WFS zero point GPU offset loop #1\Zn (\Z4${dmZP1}\Zn -> wfszpo1)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 1 CURRENTLY USED FOR CPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${zploopONstat2}" = "OFF" ]; then
if [ "${GPUzploopONstat2}" = "OFF" ];
then
menuitems+=( "GPUzplon2" "   START DM->WFS zero point GPU offset loop #2 (\Z4${dmZP2}\Zn -> wfszpo2)" )
elif [ "${GPUzploopONstat2}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 2 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "GPUzploff2" "\Z1\Zr    STOP DM->WFS zero point GPU offset loop #2\Zn (\Z4${dmZP2}\Zn -> wfszpo2)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 2 CURRENTLY USED FOR CPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${zploopONstat3}" = "OFF" ]; then
if [ "${GPUzploopONstat3}" = "OFF" ];
then
menuitems+=( "GPUzplon3" "   START DM->WFS zero point GPU offset loop #3 (\Z4${dmZP3}\Zn -> wfszpo3)" )
elif [ "${GPUzploopONstat3}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 3 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "GPUzploff3" "\Z1\Zr    STOP DM->WFS zero point GPU offset loop #3\Zn (\Z4${dmZP3}\Zn -> wfszpo3)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 3 CURRENTLY USED FOR CPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${zploopONstat4}" = "OFF" ]; then
if [ "${GPUzploopONstat4}" = "OFF" ];
then
menuitems+=( "GPUzplon4" "   START DM->WFS zero point GPU offset loop #4 (\Z4${dmZP4}\Zn -> wfszpo4)" )
elif [ "${GPUzploopONstat4}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 4 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "GPUzploff4" "\Z1\Zr    STOP DM->WFS zero point GPU offset loop #4\Zn (\Z4${dmZP4}\Zn -> wfszpo4)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 4 CURRENTLY USED FOR CPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${zploopONstat5}" = "OFF" ]; then
if [ "${GPUzploopONstat5}" = "OFF" ];
then
menuitems+=( "GPUzplon5" "   START DM->WFS zero point GPU offset loop #5 (\Z4${dmZP5}\Zn -> wfszpo5)" )
elif [ "${GPUzploopONstat5}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 5 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "GPUzploff5" "\Z1\Zr    STOP DM->WFS zero point GPU offset loop #5\Zn (\Z4${dmZP5}\Zn -> wfszpo5)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 5 CURRENTLY USED FOR CPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${zploopONstat6}" = "OFF" ]; then
if [ "${GPUzploopONstat6}" = "OFF" ];
then
menuitems+=( "GPUzplon6" "   START DM->WFS zero point GPU offset loop #6 (\Z4${dmZP6}\Zn -> wfszpo6)" )
elif [ "${GPUzploopONstat6}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 6 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "GPUzploff6" "\Z1\Zr    STOP DM->WFS zero point GPU offset loop #6\Zn (\Z4${dmZP6}\Zn -> wfszpo6)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 6 CURRENTLY USED FOR CPU-BASED ZONAL ZERO POINT\Zn" )
fi


if [ "${zploopONstat7}" = "OFF" ]; then
if [ "${GPUzploopONstat7}" = "OFF" ];
then
menuitems+=( "GPUzplon7" "   START DM->WFS zero point GPU offset loop #7 (\Z4${dmZP7}\Zn -> wfszpo7)" )
elif [ "${GPUzploopONstat7}" = "WFS" ]; then
menuitems+=( " " "\Z1\ZrCHANNEL 7 CURRENTLY USED FOR DIRECT WFS OFFSET\Zn" )
else
menuitems+=( "GPUzploff7" "\Z1\Zr    STOP DM->WFS zero point offset GPU loop #7\4n (\Z4${dmZP7}\Zn -> wfszpo7)" )
fi
else
menuitems+=( " " "\Z1\ZrCHANNEL 7 CURRENTLY USED FOR CPU-BASED ZONAL ZERO POINT\Zn" )
fi




menuitems+=( " " " " )
stringcenter "MODAL ZERO POINT (fast GPU-BASED)"
menuitems+=( "9 ->" "\Zb\Zr$string\Zn" )


menuitems+=( " " " ")
if [ "${GPUdm2wfsrefM}" = "0" ];
then
menuitems+=( "GPUd2wMon" " [  OFF  ] Modal WFS offset [->dm05] is OFF (select for DM modes applied as WFS offset)" )
fi
if [ "${GPUdm2wfsrefM}" = "1" ];
then
menuitems+=( "GPUd2wMoff" " [\Z1\Zr   ON  \Zn] Modal WFS offset [->dm05] is ON (select to de-activate)" )
fi


#menuitems+=( " " " ")
#if [ "${GPUdm2wfsrefZ}" = "0" ];
#then
#menuitems+=( "GPUd2wZon" " [  OFF  ] Zonal WFS offset [dm07->] is OFF (select for DM ouput applied as WFS offset)" )
#fi
#if [ "${GPUdm2wfsrefZ}" = "1" ];
#then
#menuitems+=( "GPUd2wZoff" " [   ON  ] Zonal WFS offset [dm07->] is ON (select to de-activate)" )
#fi






state="menutop"


dialog --colors --title "LOOP CONTROL  - LOOP ${LOOPNAME} (${LOOPNUMBER}) - (CMMODE = $CMMODE)" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menucontrolloop_default}" \
 --menu "$menuname" \
 $nbwlines $nbwcols $nbwlines "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)
menucontrolloop_default="$choiceval"
state="menucontrolloop"
case $retval in
   0) # button
	case $choiceval in


# LOOP CONFIGURATION




	GPUsel)
exec 3>&1;
nbGPU=$(dialog --inputbox "Number of GPU(s) (0 = CPU mode)" 0 0 "$nbGPU" 2>&1 1>&3);
exec 3>&-;
echo "$nbGPU" > ./conf/param_GPU.txt
aoconflog "set nbGPU = ${nbGPU}"
;;


    GPU0)
exec 3>&1;
GPUset0dev0=$(dialog --inputbox "GPUset0dev0" 0 0 "$GPUset0dev0" 2>&1 1>&3);
exec 3>&-;
echo "$GPUset0dev0" > ./conf/param_GPUset0dev0.txt
aoconflog "set GPUset0dev0 = ${GPUset0dev0}"
menucontrolloop_default="GPU0"
;;

    GPU1)
exec 3>&1;
GPUset0dev1=$(dialog --inputbox "GPUset0dev1" 0 0 "$GPUset0dev1" 2>&1 1>&3);
exec 3>&-;
echo "$GPUset0dev1" > ./conf/param_GPUset0dev1.txt
aoconflog "set GPUset0dev1 = ${GPUset0dev1}"
menucontrolloop_default="GPU1"
;;

    GPU2)
exec 3>&1;
GPUset0dev2=$(dialog --inputbox "GPUset0dev2" 0 0 "$GPUset0dev2" 2>&1 1>&3);
exec 3>&-;
echo "$GPUset0dev2" > ./conf/param_GPUset0dev2.txt
aoconflog "set GPUset0dev2 = ${GPUset0dev2}"
menucontrolloop_default="GPU2"
;;

    GPU3)
exec 3>&1;
GPUset0dev3=$(dialog --inputbox "GPUset0dev3" 0 0 "$GPUset0dev3" 2>&1 1>&3);
exec 3>&-;
echo "$GPUset0dev3" > ./conf/param_GPUset0dev3.txt
aoconflog "set GPUset0dev3 = ${GPUset0dev3}"
menucontrolloop_default="GPU3"
;;

    GPU4)
exec 3>&1;
GPUset0dev4=$(dialog --inputbox "GPUset0dev4" 0 0 "$GPUset0dev4" 2>&1 1>&3);
exec 3>&-;
echo "$GPUset0dev4" > ./conf/param_GPUset0dev4.txt
aoconflog "set GPUset0dev4 = ${GPUset0dev4}"
menucontrolloop_default="GPU4"
;;

    GPU5)
exec 3>&1;
GPUset0dev5=$(dialog --inputbox "GPUset0dev5" 0 0 "$GPUset0dev5" 2>&1 1>&3);
exec 3>&-;
echo "$GPUset0dev5" > ./conf/param_GPUset0dev5.txt
aoconflog "set GPUset0dev5 = ${GPUset0dev5}"
menucontrolloop_default="GPU5"
;;

    GPU6)
exec 3>&1;
GPUset0dev6=$(dialog --inputbox "GPUset0dev6" 0 0 "$GPUset0dev6" 2>&1 1>&3);
exec 3>&-;
echo "$GPUset0dev6" > ./conf/param_GPUset0dev6.txt
aoconflog "set GPUset0dev6 = ${GPUset0dev6}"
menucontrolloop_default="GPU6"
;;

    GPU7)
exec 3>&1;
GPUset0dev7=$(dialog --inputbox "GPUset0dev7" 0 0 "$GPUset0dev7" 2>&1 1>&3);
exec 3>&-;
echo "$GPUset0dev7" > ./conf/param_GPUset0dev7.txt
aoconflog "set GPUset0dev7 = ${GPUset0dev7}"
menucontrolloop_default="GPU7"
;;

    GPU8)
exec 3>&1;
GPUsetdev8=$(dialog --inputbox "GPUset0dev8" 0 0 "$GPUset0dev8" 2>&1 1>&3);
exec 3>&-;
echo "$GPUset0dev8" > ./conf/param_GPUset0dev8.txt
aoconflog "set GPUset0dev8 = ${GPUset0dev8}"
menucontrolloop_default="GPU8"
;;

    GPU9)
exec 3>&1;
GPUset0dev9=$(dialog --inputbox "GPUset0dev8" 0 0 "$GPUset0dev9" 2>&1 1>&3);
exec 3>&-;
echo "$GPUset0dev9" > ./conf/param_GPUset0dev9.txt
aoconflog "set GPUset0dev9 = ${GPUset0dev9}"
menucontrolloop_default="GPU9"
;;





	GPUselARPF)
exec 3>&1;
nbGPUARPF=$(dialog --inputbox "Number of ARPF GPU(s) (0 = CPU mode)" 0 0 "$nbGPUARPF" 2>&1 1>&3);
exec 3>&-;
echo "$nbGPUARPF" > ./conf/param_GPU_ARPF.txt
aoconflog "set nbGPUARPF = ${nbGPUARPF}"
;;


    GPU0ARPF)
exec 3>&1;
GPU0ARPFdevice=$(dialog --inputbox "GPU0ARPF device" 0 0 "$GPU0ARPFdevice" 2>&1 1>&3);
exec 3>&-;
echo "$GPU0ARPFdevice" > ./conf/param_GPUsetARPF_dev0.txt
aoconflog "set GPU0ARPFdevice = ${GPU0ARPFdevice}"
menucontrolloop_default="GPU0ARPF"
;;

    GPU1ARPF)
exec 3>&1;
GPU1ARPFdevice=$(dialog --inputbox "GPU1ARPF device" 0 0 "$GPU1ARPFdevice" 2>&1 1>&3);
exec 3>&-;
echo "$GPU1ARPFdevice" > ./conf/param_GPUsetARPF_dev1.txt
aoconflog "set GPU1device = ${GPU1ARPFdevice}"
menucontrolloop_default="GPU1ARPF"
;;

    GPU2ARPF)
exec 3>&1;
GPU2ARPFdevice=$(dialog --inputbox "GPU2ARPF device" 0 0 "$GPU2ARPFdevice" 2>&1 1>&3);
exec 3>&-;
echo "$GPU2ARPFdevice" > ./conf/param_GPUsetARPF_dev2.txt
aoconflog "set GPU2device = ${GPU2ARPFdevice}"
menucontrolloop_default="GPU2ARPF"
;;

    GPU3ARPF)
exec 3>&1;
GPU3ARPFdevice=$(dialog --inputbox "GPU3ARPF device" 0 0 "$GPU3ARPFdevice" 2>&1 1>&3);
exec 3>&-;
echo "$GPU3ARPFdevice" > ./conf/param_GPUsetARPF_dev3.txt
aoconflog "set GPU3device = ${GPU3ARPFdevice}"
menucontrolloop_default="GPU3ARPF"
;;

    GPU4ARPF)
exec 3>&1;
GPU4ARPFdevice=$(dialog --inputbox "GPU4ARPF device" 0 0 "$GPU4ARPFdevice" 2>&1 1>&3);
exec 3>&-;
echo "$GPU4ARPFdevice" > ./conf/param_GPUsetARPF_dev4.txt
aoconflog "set GPU4device = ${GPU4ARPFdevice}"
menucontrolloop_default="GPU4ARPF"
;;

    GPU5ARPF)
exec 3>&1;
GPU5ARPFdevice=$(dialog --inputbox "GPU5ARPF device" 0 0 "$GPU5ARPFdevice" 2>&1 1>&3);
exec 3>&-;
echo "$GPU5ARPFdevice" > ./conf/param_GPUsetARPF_dev5.txt
aoconflog "set GPU5device = ${GPU5ARPFdevice}"
menucontrolloop_default="GPU5ARPF"
;;

    GPU6ARPF)
exec 3>&1;
GPU6ARPFdevice=$(dialog --inputbox "GPU6ARPF device" 0 0 "$GPU6ARPFdevice" 2>&1 1>&3);
exec 3>&-;
echo "$GPU6ARPFdevice" > ./conf/param_GPUsetARPF_dev6.txt
aoconflog "set GPU6device = ${GPU6ARPFdevice}"
menucontrolloop_default="GPU6ARPF"
;;

    GPU7ARPF)
exec 3>&1;
GPU7ARPFdevice=$(dialog --inputbox "GPU7ARPF device" 0 0 "$GPU7ARPFdevice" 2>&1 1>&3);
exec 3>&-;
echo "$GPU7ARPFdevice" > ./conf/param_GPUsetARPF_dev7.txt
aoconflog "set GPU7device = ${GPU7ARPFdevice}"
menucontrolloop_default="GPU7ARPF"
;;

    GPU8ARPF)
exec 3>&1;
GPU8ARPFdevice=$(dialog --inputbox "GPU8ARPF device" 0 0 "$GPU8ARPFdevice" 2>&1 1>&3);
exec 3>&-;
echo "$GPU8ARPFdevice" > ./conf/param_GPUsetARPF_dev8.txt
aoconflog "set GPU8device = ${GPU8ARPFdevice}"
menucontrolloop_default="GPU8ARPF"
;;

    GPU9ARPF)
exec 3>&1;
GPU9ARPFdevice=$(dialog --inputbox "GPU9ARPF device" 0 0 "$GPU9ARPFdevice" 2>&1 1>&3);
exec 3>&-;
echo "$GPU9ARPFdevice" > ./conf/param_GPUsetARPF_dev9.txt
aoconflog "set GPU9device = ${GPU9ARPFdevice}"
menucontrolloop_default="GPU9ARPF"
;;








	GPUon)
echo "1" > ./conf/param_GPU.txt
aoconflog "set GPU ON"
menucontrolloop_default="GPUoff"
;;
	GPUoff)
echo "0" > ./conf/param_GPU.txt
aoconflog "set GPU OFF"
menucontrolloop_default="GPUon"
;;

 
 
    GPUmewfs)
file="./conf/param_GPUmodesextrwfs.txt"
exec 3>&1;
GPUmodesextrwfs=$(dialog --inputbox "GPU modes extract 0 device" 0 0 "$GPUmodesextrwfs" 2>&1 1>&3);
exec 3>&-;
echo "$GPUmodesextrwfs" > $file
aoconflog "set GPUmodesextrwfs = ${GPUmodesextrwfs}"
menucontrolloop_default="GPUmewfs"
;;



    GPUdmfwb)
file="./conf/param_GPUdmfwb.txt"
exec 3>&1;
GPUdmfwb=$(dialog --inputbox "GPU DM modal write device" 0 0 "$GPUdmfwb" 2>&1 1>&3);
exec 3>&-;
echo "$GPUdmfwb" > $file
aoconflog "set GPUdmfwb = ${GPUdmfwb}"
menucontrolloop_default="GPUdmfwb"
;;




    GPUzpM)
file="./conf/param_GPUzpoffsetM.txt"
exec 3>&1;
GPUzpoffsetM=$(dialog --inputbox "Modal GPU zero pt offset device" 0 0 "$GPUzpoffsetM" 2>&1 1>&3);
exec 3>&-;
echo "$GPUzpoffsetM" > $file
aoconflog "set GPUzpoffsetM = ${GPUzpoffsetM}"
menucontrolloop_default="GPUzpM"
;;
 
    GPUzpZ)
file="./conf/param_GPUzpoffsetZ.txt"
exec 3>&1;
GPUzpoffsetZ=$(dialog --inputbox "Zonal GPU zero pt offset device" 0 0 "$GPUzpoffsetZ" 2>&1 1>&3);
exec 3>&-;
echo "$GPUzpoffsetZ" > $file
aoconflog "set GPUzpoffsetZ = ${GPUzpoffsetZ}"
menucontrolloop_default="GPUzpZ"
;;
 

 
 
 
 
    GPUaon)
echo "1" > ./conf/param_GPUall.txt
aoconflog "set GPUall ON"
menucontrolloop_default="GPUaoff"
;;
    GPUaoff)
echo "0" > ./conf/param_GPUall.txt
aoconflog "set GPUall OFF"
menucontrolloop_default="GPUaon"
;;


	CMm1)
echo "1" > ./conf/param_CMMODE.txt
aoconflog "set CMMODE 1"
menucontrolloop_default="CMm0"
;;
	CMm0)
echo "0" > ./conf/param_CMMODE.txt
aoconflog "set CMMODE 0"
menucontrolloop_default="CMm1"
;;






# LOOP PROCESSES
   	 S)  	 
function_AOloopProcess_ON "NULL"
menucontrolloop_default="K"
;; 

	K)
function_AOloopProcess_OFF "NULL"
menucontrolloop_default="S"
;;


LPmewfs)
	if [ "$LOOPPROCESS_EXTRWFSMODES" -eq "1" ]; then
	LOOPPROCESS_EXTRWFSMODES="0"
	echo "0" > ./conf/param_LOOPPROCESS_EXTRWFSMODES.txt
	echo "0" > ./conf/param_LOOPPROCESS_EXTROLMODES.txt
	else
	LOOPPROCESS_EXTRWFSMODES="1"
	echo "1" > ./conf/param_LOOPPROCESS_EXTRWFSMODES.txt
	fi
menucontrolloop_default="LPmewfs"
;;


LPmeol)
	if [ "$LOOPPROCESS_EXTROLMODES" -eq "1" ]; then
	LOOPPROCESS_EXTROLMODES="0"
	echo "0" > ./conf/param_LOOPPROCESS_EXTROLMODES.txt
	else
	LOOPPROCESS_EXTROLMODES="1"
	echo "1" > ./conf/param_LOOPPROCESS_EXTRWFSMODES.txt
	echo "1" > ./conf/param_LOOPPROCESS_EXTROLMODES.txt
	fi
menucontrolloop_default="LPmeol"
;;


DMfWB)
	if [ "$LOOPPROCESS_DMFILTWB" -eq "1" ]; then
	LOOPPROCESS_DMFILTWB="0"
	echo "0" > ./conf/param_LOOPPROCESS_DMFILTWB.txt
	else
	LOOPPROCESS_DMFILTWB="1"
	echo "1" > ./conf/param_LOOPPROCESS_DMFILTWB.txt
	echo "1" > ./conf/param_LOOPPROCESS_EXTRWFSMODES.txt
	echo "1" > ./conf/param_LOOPPROCESS_EXTROLMODES.txt
	fi
menucontrolloop_default="DMfWB"
;;


LPzpo)
	if [ "$LOOPPROCESS_ZPO" -eq "1" ]; then
	LOOPPROCESS_ZPO="0"
	echo "0" > ./conf/param_LOOPPROCESS_ZPO.txt
	else
	LOOPPROCESS_ZPO="1"
	echo "1" > ./conf/param_LOOPPROCESS_ZPO.txt
	fi
menucontrolloop_default="LPzpo"
;;

LPdmCa)
	if [ "$LOOPPROCESS_DMCAVE" -eq "1" ]; then
	LOOPPROCESS_DMCAVE="0"
	echo "0" > ./conf/param_LOOPPROCESS_DMCAVE.txt
	else
	LOOPPROCESS_DMCAVE="1"
	echo "1" > ./conf/param_LOOPPROCESS_DMCAVE.txt
	fi
menucontrolloop_default="LPdmCa"
;;

LPwfsresa)
	if [ "$LOOPPROCESS_WFSRESAVE" -eq "1" ]; then
	LOOPPROCESS_WFSRESAVE="0"
	echo "0" > ./conf/param_LOOPPROCESS_WFSRESAVE.txt
	else
	LOOPPROCESS_WFSRESAVE="1"
	echo "1" > ./conf/param_LOOPPROCESS_WFSRESAVE.txt
	fi
menucontrolloop_default="LPwfsresa"
;;



   	 Nloopon)
function_LOOP_ON "NULL"
menucontrolloop_default="Floopoff"
;; 

   	 Floopoff)
function_LOOP_OFF "NULL"
menucontrolloop_default="Nloopon"
;;




 
  	 Z)
./AOloopControl << EOF
readshmim aol${LOOPNUMBER}_DMmode_cmd
imzero aol${LOOPNUMBER}_DMmode_cmd
readshmim aol${LOOPNUMBER}_dmC
imzero aol${LOOPNUMBER}_dmC
readshmim aol${LOOPNUMBER}_dmC
imzero aol${LOOPNUMBER}_dmC

readshmim aol${LOOPNUMBER}_modeval
imzero aol${LOOPNUMBER}_modeval

readshmim aol${LOOPNUMBER}_modeval_dm
imzero aol${LOOPNUMBER}_modeval_dm

readshmim aol${LOOPNUMBER}_modeval_dm_C
imzero aol${LOOPNUMBER}_modeval_dm_C

readshmim aol${LOOPNUMBER}_modeval_ol
imzero aol${LOOPNUMBER}_modeval_ol

readshmim aol${LOOPNUMBER}_modeval_dm_now
imzero aol${LOOPNUMBER}_modeval_dm_now

readshmim aol${LOOPNUMBER}_modeval_dm_now_filt
imzero aol${LOOPNUMBER}_modeval_dm_now_filt

exit
EOF
aoconflogext "zeroing DM correction"
;;



    nbstep)
exec 3>&1;
loopNBstep=$(dialog --inputbox "Number of loop steps" 0 0 "$loopNBstep" 2>&1 1>&3);
exec 3>&-;
echo "$loopNBstep" > ./conf/param_loopNBstep.txt
aoconflog "set loopNBstep = ${loopNBstep}"
menucontrolloop_default="nbstep"
;;


	tstep)
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolstep $loopNBstep" C-m 
aoconflogext "aolstep $loopNBstep"
;;



	wresolON)
# WFS residual offload to aolN_wfszpo6
tmuxname="aol${LOOPNUMBER}wfsresoffl"
file="./status/stat_procWFSres2refON.txt"
echo " ON" > $file
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "./auxscripts/aolWFSresoffloadloop 2.0 0.1 6" C-m

echo "WFS" > ./status/stat_zploopON6.txt
tmuxname="aol${LOOPNUMBER}zploop6"
tmux kill-session -t $tmuxname 
menucontrolloop_default="zplon6"
aoconflogext "stop zero-point offset loop 6"
menucontrolloop_default="wresolOFF"
;;

	wresolOFF)
# WFS residual offload to aolN_wfszpo6
tmuxname="aol${LOOPNUMBER}wfsresoffl"
file="./status/stat_procWFSres2refON.txt"
echo "OFF" > $file
tmux send-keys -t $tmuxname C-c
tmux kill-session -t $tmuxname
echo "OFF" > ./status/stat_zploopON6.txt
menucontrolloop_default="wresolON"
;;

	wresolinit)
WFSresidualOffsetLoop_init "NULL"
menucontrolloop_default="wresolinit"
;;

wzpoinit)
./AOloopControl << EOF
readshmim aol${LOOPNUMBER}_wfszpo0
imzero aol${LOOPNUMBER}_wfszpo0
readshmim aol${LOOPNUMBER}_wfszpo1
imzero aol${LOOPNUMBER}_wfszpo1
readshmim aol${LOOPNUMBER}_wfszpo2
imzero aol${LOOPNUMBER}_wfszpo2
readshmim aol${LOOPNUMBER}_wfszpo3
imzero aol${LOOPNUMBER}_wfszpo3
readshmim aol${LOOPNUMBER}_wfszpo4
imzero aol${LOOPNUMBER}_wfszpo4
readshmim aol${LOOPNUMBER}_wfszpo5
imzero aol${LOOPNUMBER}_wfszpo5
readshmim aol${LOOPNUMBER}_wfszpo6
imzero aol${LOOPNUMBER}_wfszpo6
readshmim aol${LOOPNUMBER}_wfszpo7
imzero aol${LOOPNUMBER}_wfszpo7
exit
EOF
menucontrolloop_default="wzpoinit"
;;







	ctrmon) tmux a -t aol${LOOPNUMBER}-ctr ;;
	runmon) tmux a -t aol${LOOPNUMBER}-run ;;

  	 g)
  	 value=${loopgain}
	 SelectValue01 100 1200 50
  	 loopgain=${value}
  	 echo "$loopgain" > ./conf/param_loopgain.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetgain ${loopgain}" C-m
	 ./statusext "gain" "${loopgain}" &
	 aoconflogext "set gain ${loopgain}"
  	 ;; 
   	 
   	 m)
   	 value=${loopmaxlim}
   	 SelectValue01 100 1200 50
 	 loopmaxlim=${value}
 	 echo "$loopmaxlim" > ./conf/param_loopmaxlim.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmaxlim ${loopmaxlim}" C-m
	 aoconflogext "set max limit ${loopmaxlim}"
   	 ;; 
   	  
   	 e) 
   	 value=${loopmultcoeff}
   	 SelectValue01 900 1001 2
 	 loopmultcoeff=${value}
 	 echo "$loopmultcoeff" > ./conf/param_loopmultcoeff.txt
	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmult ${loopmultcoeff}" C-m
	 ./statusext "leak" "${loopmultcoeff}" &
	 aoconflogext "set mult coeff ${loopmultcoeff}"
     	 ;;  


	DMpWon)
	DMprimWriteON="1"
	echo "$DMprimWriteON" > ./conf/param_DMprimWriteON.txt
	tmux send-keys -t aol${LOOPNUMBER}-ctr "aolDMprimWon" C-m
	menucontrolloop_default="DMpWoff"
	;;

	DMpWoff)
	DMprimWriteON="0"
	echo "$DMprimWriteON" > ./conf/param_DMprimWriteON.txt
	tmux send-keys -t aol${LOOPNUMBER}-ctr "aolDMprimWoff" C-m
	menucontrolloop_default="DMpWon"
	;;


	limreset)
./AOloopControl << EOF
readshmim aol${LOOPNUMBER}_DMmode_LIMIT
im=1.0+0*aol${LOOPNUMBER}_DMmode_LIMIT
cpsh im aol${LOOPNUMBER}_DMmode_LIMIT
exit
EOF
	;;
	
	ONatlim)
	AUTOTUNELIMITS_ON=" ON"
	echo " ON" > ./status/stat_AUTOTUNELIMITS_ON.txt
	tmux send-keys -t aol${LOOPNUMBER}-ctr "aolAUTOTUNELIMon" C-m
	menucontrolloop_default="OFFatlim"
	;;

	OFFatlim)
	AUTOTUNELIMITS_ON="OFF"
	echo "OFF" > ./status/stat_AUTOTUNELIMITS_ON.txt
	tmux send-keys -t aol${LOOPNUMBER}-ctr "aolAUTOTUNELIMoff" C-m
	menucontrolloop_default="ONatlim"
	;;

	ONatgain)
	AUTOTUNEGAINS_ON=" ON"
	echo "$AUTOTUNEGAINS_ON" > ./status/stat_AUTOTUNEGAINS_ON.txt
	tmux send-keys -t aol${LOOPNUMBER}-ctr "aolAUTOTUNEGAINon" C-m
	menucontrolloop_default="OFFatgain"
	;;

	OFFatgain)
	AUTOTUNEGAINS_ON="OFF"
	echo "$AUTOTUNEGAINS_ON" > ./status/stat_AUTOTUNEGAINS_ON.txt
	tmux send-keys -t aol${LOOPNUMBER}-ctr "aolAUTOTUNEGAINoff" C-m
	menucontrolloop_default="ONatgain"
	;;


	atlp)
	exec 3>&1;
	AUTOTUNELIMITperc=$(dialog --inputbox "AUTOTUNELIMITperc" 0 0 "$AUTOTUNELIMITperc" 2>&1 1>&3);
	exec 3>&-;
	tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetATlimp $AUTOTUNELIMITperc" C-m
	echo "$AUTOTUNELIMITperc" > ./conf/param_AUTOTUNELIMITperc.txt
	aoconflogext "set AUTOTUNELIMITperc ${AUTOTUNELIMITperc}"
	;;
	
	atlm)
	exec 3>&1;
	AUTOTUNELIMITmcoeff=$(dialog --inputbox "AUTOTUNELIMITmcoeff" 0 0 "$AUTOTUNELIMITmcoeff" 2>&1 1>&3);
	exec 3>&-;
	tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetATlimm $AUTOTUNELIMITmcoeff" C-m
	echo "$AUTOTUNELIMITmcoeff" > ./conf/param_AUTOTUNELIMITmcoeff.txt
	aoconflogext "set AUTOTUNELIMITmcoeff ${AUTOTUNELIMITmcoeff}"
	;;

	atld)
	exec 3>&1;
	AUTOTUNELIMITdelta=$(dialog --inputbox "AUTOTUNELIMITdelta" 0 0 "$AUTOTUNELIMITdelta" 2>&1 1>&3);
	exec 3>&-;
	echo "$AUTOTUNELIMITdelta" > ./conf/param_AUTOTUNELIMITdelta.txt
	tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetATlimd $AUTOTUNELIMITdelta" C-m
	aoconflogext "set AUTOTUNELIMITdelta ${AUTOTUNELIMITdelta}"
	;;








	ARPFon)
	ARPFon=" ON"
	echo "$ARPFon" > ./conf/param_ARPFon.txt
	tmux send-keys -t aol${LOOPNUMBER}-ctr "aolARPFon" C-m
	menucontrolloop_default="ARPFoff"
	;;
	 
	ARPFoff)
	ARPFon="OFF"
	echo "$ARPFon" > ./conf/param_ARPFon.txt
	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolARPFoff" C-m
	menucontrolloop_default="ARPFon"
	;;
	 
	 ARPFg)
  	 value=${loopgain}
	 SelectValue01 100 1200 50
  	 ARPFgain=${value}
  	 echo "$ARPFgain" > ./conf/param_ARPFgain.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetARPFgain ${ARPFgain}" C-m
	 aoconflogext "set ARPF gain ${ARPFgain}"
  	 ;; 
	 
	 gball) 
	 value=${gainallb}
	 SelectValue01 100 1200 50 
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=${value}
	     echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "set all gains to ${value}"
	 ;;
	 
	 lball) 
	 value=${limitallb}
	 SelectValue02 10000 120000 5000 
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     limitb[10#${gi}]=${value}
	     echo "${limitb[10#${gi}]}" > ./conf/param_limitb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[10#${gi}]}" C-m
	 done
	 aoconflogext "set all limits to ${value}"
	 ;;
	 
	 mball) 
	 value=${multfallb}
	 SelectValue03 100 1001 50 
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     multfb[10#${gi}]=${value}
	     echo "${multfb[10#${gi}]}" > ./conf/param_multfb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[10#${gi}]}" C-m
	 done
	 aoconflogext "set all limits to ${value}"
	 ;;
	
	 
    gball01)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^0.1)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "set all gains to custom set 01 (alpha = 0.1)"
	 ;;
   gball02)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^0.2)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "set all gains to custom set 02 (alpha = 0.2)"
	 ;;
   gball04)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^0.4)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "set all gains to custom set 04 (alpha = 0.4)"
	 ;;
   gball08)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^0.8)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "set all gains to custom set 08 (alpha = 0.8)"
	 ;;
   gball12)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^1.2)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "set all gains to custom set 12 (alpha = 1.2)"
	 ;;
   gball16)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^1.6)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "set all gains to custom set 16 (alpha = 1.6)"
	 ;;
   gball20)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^2.0)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "set all gains to custom set 20 (alpha = 2.0)"
	 ;;






    gball2)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^2.0)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "set all gains to custom set 2 (alpha = 2)"
	 ;;

    gball3)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^0.5)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "set all gains to custom set 3 (alpha = 0.5)"
	 ;;
     



  	 gb00)
  	 gi="00"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1800 50
  	 gainb[${10#gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 

  	 lb00)
  	 gi="00"
  	 value=${limitb[${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[${10#gi}]=${value}
  	 echo "${limitb[10#${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 
 
  	 mb00)
  	 gi="00"
  	 value=${multfb[${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[${10#gi}]=${value}
  	 echo "${multfb[10#${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 





  	 gb01)
  	 gi="01"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 

 	 lb01)
  	 gi="01"
  	 value=${limitb[${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[${gi}]=${value}
  	 echo "${limitb[${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 

 	 mb01)
  	 gi="01"
  	 value=${multfb[${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[${gi}]=${value}
  	 echo "${multfb[${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 




  	 gb02)
  	 gi="02"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 

 	 lb02)
  	 gi="02"
  	 value=${limitb[${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[${gi}]=${value}
  	 echo "${limitb[${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 

 	 mb02)
  	 gi="02"
  	 value=${limitb[${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[${gi}]=${value}
  	 echo "${multfb[${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 



  	 gb03)
  	 gi="03"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 
  	 
 	 lb03)
  	 gi="03"
  	 value=${limitb[${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[${gi}]=${value}
  	 echo "${limitb[${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 
  	 
 	 mb03)
  	 gi="03"
  	 value=${multfb[${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[${gi}]=${value}
  	 echo "${multfb[${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 
  	 
  	 
  	 
  	 

  	 gb04)
  	 gi="04"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;;
  	 
 	 lb04)
  	 gi="04"
  	 value=${limitb[${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[${gi}]=${value}
  	 echo "${limitb[${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 
  	 
  	 mb04)
  	 gi="04"
  	 value=${limitb[${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[${gi}]=${value}
  	 echo "${multfb[${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 
  	 
 	  

  	 gb05)
  	 gi="05"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 
  	 
 	 lb05)
  	 gi="05"
  	 value=${limitb[10#${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[${gi}]=${value}
  	 echo "${limitb[10#${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 
  	 
   	 mb05)
  	 gi="05"
  	 value=${multfb[10#${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[${gi}]=${value}
  	 echo "${multfb[10#${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 
  	 
	 
  	 
  	 

  	 gb06)
  	 gi="06"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 
  	 
 	 lb06)
  	 gi="06"
  	 value=${limitb[10#${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[${gi}]=${value}
  	 echo "${limitb[10#${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 
 
 	 mb06)
  	 gi="06"
  	 value=${multfb[10#${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[${gi}]=${value}
  	 echo "${multfb[10#${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 




  	 gb07)
  	 gi="07"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[10#${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 

 	 lb07)
  	 gi="07"
  	 value=${limitb[10#${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[10#${gi}]=${value}
  	 echo "${limitb[10#${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 
 
 	 mb07)
  	 gi="07"
  	 value=${multfb[10#${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[10#${gi}]=${value}
  	 echo "${multfb[10#${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 





  	 gb08)
  	 gi="08"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[10#${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 

 	 lb08)
  	 gi="08"
  	 value=${limitb[10#${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[10#${gi}]=${value}
  	 echo "${limitb[10#${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 
 
 	 mb08)
  	 gi="08"
  	 value=${multfb[10#${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[10#${gi}]=${value}
  	 echo "${multfb[10#${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 
 




  	 gb09)
  	 gi="09"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[10#${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 
  	 
 	 lb09)
  	 gi="09"
  	 value=${limitb[10#${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[10#${gi}]=${value}
  	 echo "${limitb[10#${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 
  	 
 	 mb09)
  	 gi="09"
  	 value=${multfb[10#${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[10#${gi}]=${value}
  	 echo "${multfb[10#${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 
  	 
    	 
  	 
  	 

  	 gb10)
  	 gi="10"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 

	 lb10)
  	 gi="10"
  	 value=${limitb[10#${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[${gi}]=${value}
  	 echo "${limitb[10#${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 

	 mb10)
  	 gi="10"
  	 value=${multfb[10#${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[${gi}]=${value}
  	 echo "${multfb[10#${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 


  



  	 gb11)
  	 gi="11"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 

	 lb11)
  	 gi="11"
  	 value=${limitb[10#${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[${gi}]=${value}
  	 echo "${limitb[10#${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 

	 mb11)
  	 gi="11"
  	 value=${multfb[10#${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[${gi}]=${value}
  	 echo "${multfb[10#${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 






  	 gb12)
  	 gi="12"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 

	 lb12)
  	 gi="12"
  	 value=${limitb[10#${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[${gi}]=${value}
  	 echo "${limitb[10#${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 

	 mb12)
  	 gi="12"
  	 value=${multfb[10#${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[${gi}]=${value}
  	 echo "${multfb[10#${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 





  	 gb13)
  	 gi="13"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 

	 lb13)
  	 gi="13"
  	 value=${limitb[10#${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[${gi}]=${value}
  	 echo "${limitb[10#${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 

	 mb13)
  	 gi="13"
  	 value=${multfb[10#${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[${gi}]=${value}
  	 echo "${multfb[10#${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 





  	 gb14)
  	 gi="14"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/param_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflogext "block ${gi} set gain to ${value}"
  	 ;; 

	 lb14)
  	 gi="14"
  	 value=${limitb[10#${gi}]}
	 SelectValue02 10000 120000 5000
  	 limitb[${gi}]=${value}
  	 echo "${limitb[10#${gi}]}" > ./conf/param_limitb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetlimitb ${gi} ${limitb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set limit to ${value}"
  	 ;; 
  	 
	 mb14)
  	 gi="14"
  	 value=${multfb[10#${gi}]}
	 SelectValue03 100 1001 50
  	 multfb[${gi}]=${value}
  	 echo "${multfb[10#${gi}]}" > ./conf/param_multfb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmultfb ${gi} ${multfb[10#${gi}]}" C-m
	 aoconflogext "block ${gi} set multf to ${value}"
  	 ;; 






    zpmult)
value=${zpmultcoeff}
SelectValue01 100 1001 50
zpmultcoeff=${value}
echo "${zpmultcoeff}" > ./conf/param_zpmultcoeff.txt
tmuxname="aol${LOOPNUMBER}zpmult"
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n ${tmuxname}" C-m
if [ "$CPUconfRT" -eq "1" ];then
tmux send-keys -t $tmuxname "csetpmove system" C-m
fi
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfsref" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfsref0" C-m
tmux send-keys -t $tmuxname "wfsref=${zpmult}*wfsref0"
tmux send-keys -t $tmuxname "exit" C-m
aoconflogext "multiply ref by ${value}"
;;


	zplon0)
function_zplon 0
menucontrolloop_default="zploff0"
aoconflogext "start zero-point offset loop 0"
;; 

	zploff0)
function_zploff 0
menucontrolloop_default="zplon0"
aoconflogext "stop zero-point offset loop 0"
	;;


	zplon1)
function_zplon 1
menucontrolloop_default="zploff1"
aoconflogext "start zero-point offset loop 1"
;; 

	zploff1)
function_zploff 1
menucontrolloop_default="zplon1"
aoconflogext "stop zero-point offset loop 1"
	;;


	zplon2)
function_zplon 2
menucontrolloop_default="zploff2"
aoconflogext "start zero-point offset loop 2"
;; 

	zploff2)
function_zploff 2
menucontrolloop_default="zplon2"
aoconflogext "stop zero-point offset loop 2"
	;;

	zplon3)
function_zplon 3
menucontrolloop_default="zploff3"
aoconflogext "start zero-point offset loop 3"
;; 

	zploff3)
function_zploff 3
menucontrolloop_default="zplon3"
aoconflogext "stop zero-point offset loop 3"
	;;

	zplon4)
function_zplon 4
menucontrolloop_default="zploff4"
aoconflogext "start zero-point offset loop 4"
;; 

	zploff4)
function_zploff 4
menucontrolloop_default="zplon4"
aoconflogext "stop zero-point offset loop 4"
	;;


	zplon5)
function_zplon 5
menucontrolloop_default="zploff5"
aoconflogext "start zero-point offset loop 5"
;; 

	zploff5)
function_zploff 5
menucontrolloop_default="zplon5"
aoconflogext "stop zero-point offset loop 5"
	;;


	zplon6)
function_zplon 6
menucontrolloop_default="zploff6"
aoconflogext "start zero-point offset loop 6"
;; 

	zploff6)
function_zploff 6
menucontrolloop_default="zplon6"
aoconflogext "stop zero-point offset loop 6"
	;;

	zplon7)
function_zplon 7
menucontrolloop_default="zploff7"
aoconflogext "start zero-point offset loop 7"
;; 

	zploff7)
function_zploff 7
menucontrolloop_default="zplon7"
aoconflogext "stop zero-point offset loop 7"
	;;




    
	zpinj)
ampl="0.03"
modenb="00030"
tmuxname="aol${LOOPNUMBER}zpinject3"
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}zpin" C-m
if [ "$CPUconfRT" -eq "1" ];then
tmux send-keys -t $tmuxname "csetpmove system" C-m
fi
tmux send-keys -t $tmuxname "loadfits \"mkmodestmp/fmodes0all.fits\" modec" C-m
tmux send-keys -t $tmuxname "breakcube modec" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP3" C-m
tmux send-keys -t $tmuxname "dmo=$ampl*modec_$modenb" C-m
tmux send-keys -t $tmuxname "cp dmo aol${LOOPNUMBER}_dmZP3" C-m
tmux send-keys -t $tmuxname "exit" C-m
aoconflogext "inject fourier mode to zero-point"
	;;


	zpz)
tmuxname="aol${LOOPNUMBER}zpzero3"
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n $tmuxname" C-m
if [ "$CPUconfRT" -eq "1" ];then
tmux send-keys -t $tmuxname "csetpmove system" C-m
fi
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP3" C-m
tmux send-keys -t $tmuxname "imzero aol${LOOPNUMBER}_dmZP3" C-m
tmux send-keys -t $tmuxname "exit" C-m
aoconflogext "zero the zero-point offset"
	;;
	











    GPUzplon0)
echo " ON" > ./status/stat_GPUzploopON0.txt
aoconflogext "STARTING GPU-based DM -> WFSref loop 0"
tmuxname="aol${LOOPNUMBER}GPUzploop0"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}GPUzploop0" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP0" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_zrespM" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo0" C-m
tmux send-keys -t $tmuxname "listim" C-m
tmux send-keys -t $tmuxname "cudacoeff2map aol${LOOPNUMBER}_zrespM aol${LOOPNUMBER}_dmZP0 ${GPUzpoffsetZ} aol${LOOPNUMBER}_wfszpo0 0 bogusname" C-m
menucontrolloop_default="GPUzploff0"
;;

    GPUzploff0)
echo "OFF" > ./status/stat_GPUzploopON0.txt
aoconflogext "STOPPING GPU-based DM -> WFSref loop 0"
tmuxname="aol${LOOPNUMBER}GPUzploop0"
tmux send-keys -t $tmuxname "" C-c
sleep 0.1
tmux send-keys -t $tmuxname "exit" C-m
sleep 0.1
tmux kill-session -t $tmuxname

tmuxname="aol${LOOPNUMBER}GPUzploop0z"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n $tmuxname" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo0" C-m
tmux send-keys -t $tmuxname "imzero aol${LOOPNUMBER}_wfszpo0" C-m
tmux send-keys -t $tmuxname "exit" C-m
tmux kill-session -t $tmuxname

menucontrolloop_default="GPUzplon0"
;;




    GPUzplon1)
echo " ON" > ./status/stat_GPUzploopON1.txt
aoconflogext "STARTING GPU-based DM -> WFSref loop 1"
tmuxname="aol${LOOPNUMBER}GPUzploop1"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}GPUzploop1" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP1" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_zrespM" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo1" C-m
tmux send-keys -t $tmuxname "listim" C-m
tmux send-keys -t $tmuxname "cudacoeff2map aol${LOOPNUMBER}_zrespM aol${LOOPNUMBER}_dmZP1 ${GPUzpoffsetZ} aol${LOOPNUMBER}_wfszpo1 0 bogusname" C-m
menucontrolloop_default="GPUzploff0"
;;

    GPUzploff1)
echo "OFF" > ./status/stat_GPUzploopON1.txt
aoconflogext "STOPPING GPU-based DM -> WFSref loop 1"
tmuxname="aol${LOOPNUMBER}GPUzploop1"
tmux send-keys -t $tmuxname "" C-c
sleep 0.1
tmux send-keys -t $tmuxname "exit" C-m
sleep 0.1
tmux kill-session -t $tmuxname

tmuxname="aol${LOOPNUMBER}GPUzploop1z"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n $tmuxname" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo1" C-m
tmux send-keys -t $tmuxname "imzero aol${LOOPNUMBER}_wfszpo1" C-m
tmux send-keys -t $tmuxname "exit" C-m
tmux kill-session -t $tmuxname

menucontrolloop_default="GPUzplon1"
;;



    GPUzplon2)
echo " ON" > ./status/stat_GPUzploopON2.txt
aoconflogext "STARTING GPU-based DM -> WFSref loop 2"
tmuxname="aol${LOOPNUMBER}GPUzploop2"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}GPUzploop2" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP2" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_zrespM" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo2" C-m
tmux send-keys -t $tmuxname "listim" C-m
tmux send-keys -t $tmuxname "cudacoeff2map aol${LOOPNUMBER}_zrespM aol${LOOPNUMBER}_dmZP2 ${GPUzpoffsetZ} aol${LOOPNUMBER}_wfszpo2 0 bogusname" C-m
menucontrolloop_default="GPUzploff2"
;;

    GPUzploff2)
echo "OFF" > ./status/stat_GPUzploopON2.txt
aoconflogext "STOPPING GPU-based DM -> WFSref loop 2"
tmuxname="aol${LOOPNUMBER}GPUzploop2"
tmux send-keys -t $tmuxname "" C-c
sleep 0.1
tmux send-keys -t $tmuxname "exit" C-m
sleep 0.1
tmux kill-session -t $tmuxname

tmuxname="aol${LOOPNUMBER}GPUzploop2z"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n $tmuxname" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo2" C-m
tmux send-keys -t $tmuxname "imzero aol${LOOPNUMBER}_wfszpo2" C-m
tmux send-keys -t $tmuxname "exit" C-m
tmux kill-session -t $tmuxname

menucontrolloop_default="GPUzplon2"
;;



    GPUzplon3)
echo " ON" > ./status/stat_GPUzploopON3.txt
aoconflogext "STARTING GPU-based DM -> WFSref loop 3"
tmuxname="aol${LOOPNUMBER}GPUzploop3"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}GPUzploop3" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP3" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_zrespM" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo3" C-m
tmux send-keys -t $tmuxname "listim" C-m
tmux send-keys -t $tmuxname "cudacoeff2map aol${LOOPNUMBER}_zrespM aol${LOOPNUMBER}_dmZP3 ${GPUzpoffsetZ} aol${LOOPNUMBER}_wfszpo3 0 bogusname" C-m
menucontrolloop_default="GPUzploff3"
;;

    GPUzploff3)
echo "OFF" > ./status/stat_GPUzploopON3.txt
aoconflogext "STOPPING GPU-based DM -> WFSref loop 3"
tmuxname="aol${LOOPNUMBER}GPUzploop3"
tmux send-keys -t $tmuxname "" C-c
sleep 0.1
tmux send-keys -t $tmuxname "exit" C-m
sleep 0.1
tmux kill-session -t $tmuxname

tmuxname="aol${LOOPNUMBER}GPUzploop3z"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n $tmuxname" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo3" C-m
tmux send-keys -t $tmuxname "imzero aol${LOOPNUMBER}_wfszpo3" C-m
tmux send-keys -t $tmuxname "exit" C-m
tmux kill-session -t $tmuxname

menucontrolloop_default="GPUzplon3"
;;



    GPUzplon4)
echo " ON" > ./status/stat_GPUzploopON4.txt
aoconflogext "STARTING GPU-based DM -> WFSref loop 4"
tmuxname="aol${LOOPNUMBER}GPUzploop4"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}GPUzploop4" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP4" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_zrespM" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo4" C-m
tmux send-keys -t $tmuxname "listim" C-m
tmux send-keys -t $tmuxname "cudacoeff2map aol${LOOPNUMBER}_zrespM aol${LOOPNUMBER}_dmZP0 ${GPUzpoffsetZ} aol${LOOPNUMBER}_wfszpo0 0 bogusname" C-m
menucontrolloop_default="GPUzploff0"
;;

    GPUzploff4)
echo "OFF" > ./status/stat_GPUzploopON4.txt
aoconflogext "STOPPING GPU-based DM -> WFSref loop 4"
tmuxname="aol${LOOPNUMBER}GPUzploop4"
tmux send-keys -t $tmuxname "" C-c
sleep 0.1
tmux send-keys -t $tmuxname "exit" C-m
sleep 0.1
tmux kill-session -t $tmuxname

tmuxname="aol${LOOPNUMBER}GPUzploop4z"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n $tmuxname" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo4" C-m
tmux send-keys -t $tmuxname "imzero aol${LOOPNUMBER}_wfszpo4" C-m
tmux send-keys -t $tmuxname "exit" C-m
tmux kill-session -t $tmuxname

menucontrolloop_default="GPUzplon4"
;;



    GPUzplon5)
echo " ON" > ./status/stat_GPUzploopON5.txt
aoconflogext "STARTING GPU-based DM -> WFSref loop 5"
tmuxname="aol${LOOPNUMBER}GPUzploop0"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}GPUzploop5" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP5" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_zrespM" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo5" C-m
tmux send-keys -t $tmuxname "listim" C-m
tmux send-keys -t $tmuxname "cudacoeff2map aol${LOOPNUMBER}_zrespM aol${LOOPNUMBER}_dmZP5 ${GPUzpoffsetZ} aol${LOOPNUMBER}_wfszpo5 0 bogusname" C-m
menucontrolloop_default="GPUzploff5"
;;

    GPUzploff5)
echo "OFF" > ./status/stat_GPUzploopON5.txt
aoconflogext "STOPPING GPU-based DM -> WFSref loop 5"
tmuxname="aol${LOOPNUMBER}GPUzploop5"
tmux send-keys -t $tmuxname "" C-c
sleep 0.1
tmux send-keys -t $tmuxname "exit" C-m
sleep 0.1
tmux kill-session -t $tmuxname

tmuxname="aol${LOOPNUMBER}GPUzploop5z"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n $tmuxname" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo5" C-m
tmux send-keys -t $tmuxname "imzero aol${LOOPNUMBER}_wfszpo5" C-m
tmux send-keys -t $tmuxname "exit" C-m
tmux kill-session -t $tmuxname

menucontrolloop_default="GPUzplon5"
;;



    GPUzplon6)
echo " ON" > ./status/stat_GPUzploopON6.txt
aoconflogext "STARTING GPU-based DM -> WFSref loop 6"
tmuxname="aol${LOOPNUMBER}GPUzploop6"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}GPUzploop6" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP6" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_zrespM" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo6" C-m
tmux send-keys -t $tmuxname "listim" C-m
tmux send-keys -t $tmuxname "cudacoeff2map aol${LOOPNUMBER}_zrespM aol${LOOPNUMBER}_dmZP6 ${GPUzpoffsetZ} aol${LOOPNUMBER}_wfszpo6 0 bogusname" C-m
menucontrolloop_default="GPUzploff6"
;;

    GPUzploff6)
echo "OFF" > ./status/stat_GPUzploopON6.txt
aoconflogext "STOPPING GPU-based DM -> WFSref loop 6"
tmuxname="aol${LOOPNUMBER}GPUzploop6"
tmux send-keys -t $tmuxname "" C-c
sleep 0.1
tmux send-keys -t $tmuxname "exit" C-m
sleep 0.1
tmux kill-session -t $tmuxname

tmuxname="aol${LOOPNUMBER}GPUzploop6z"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n $tmuxname" C-m
sleep 0.2
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo6" C-m
tmux send-keys -t $tmuxname "imzero aol${LOOPNUMBER}_wfszpo6" C-m
tmux send-keys -t $tmuxname "exit" C-m
tmux kill-session -t $tmuxname

menucontrolloop_default="GPUzplon6"
;;



    GPUzplon7)
echo " ON" > ./status/stat_GPUzploopON7.txt
aoconflogext "STARTING GPU-based DM -> WFSref loop 7"
tmuxname="aol${LOOPNUMBER}GPUzploop7"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}GPUzploop7" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP7" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_zrespM" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo7" C-m
tmux send-keys -t $tmuxname "listim" C-m
tmux send-keys -t $tmuxname "cudacoeff2map aol${LOOPNUMBER}_zrespM aol${LOOPNUMBER}_dmZP7 ${GPUzpoffsetZ} aol${LOOPNUMBER}_wfszpo7 0 bogusname" C-m
menucontrolloop_default="GPUzploff7"
;;

    GPUzploff7)
echo "OFF" > ./status/stat_GPUzploopON7.txt
aoconflogext "STOPPING GPU-based DM -> WFSref loop 7"
tmuxname="aol${LOOPNUMBER}GPUzploop7"
tmux send-keys -t $tmuxname "" C-c
sleep 0.1
tmux send-keys -t $tmuxname "exit" C-m
sleep 0.1
tmux kill-session -t $tmuxname

tmuxname="aol${LOOPNUMBER}GPUzploop7z"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n $tmuxname" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo7" C-m
tmux send-keys -t $tmuxname "imzero aol${LOOPNUMBER}_wfszpo7" C-m
tmux send-keys -t $tmuxname "exit" C-m
tmux kill-session -t $tmuxname

menucontrolloop_default="GPUzplon7"
;;



















	
	
    GPUd2wMon)
aoconflogext "(re) STARTING GPU-based Modal WFSref offset loop"
file="./conf/param_GPUdm2wfsrefM.txt"
echo "1" > $file
wfrefO=$( cat conf/conf_dmwrefO_name.txt )
tmuxname="GPUdm2wfsrefM_dm${LOOPNUMBER}"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n GPUdm2wfsref${LOOPNUMBER}" C-m
tmux send-keys -t $tmuxname "readshmim dm${DMindex}disp" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmwfrefRM" C-m
tmux send-keys -t $tmuxname "readshmim $wfrefO" C-m
tmux send-keys -t $tmuxname "listim" C-m
tmux send-keys -t $tmuxname "cudacoeff2map aol${LOOPNUMBER}_dmwfrefRM dm${DMindex}disp ${GPUzpoffsetM} $wfrefO 0 bogus" C-m
menucontrolloop_default="GPUd2wMoff"
;;

    GPUd2wMoff)
aoconflogext "STOPPING GPU-based Modal WFSref offset loop"
file="./conf/conf_GPUdm2wfsrefM.txt"
echo "0" > $file
wfrefO=$( cat conf/conf_dmwrefO_name.txt )
tmuxname="GPUdm2wfsrefM_dm${LOOPNUMBER}"
tmux send-keys -t $tmuxname "" C-c
sleep 0.1
tmux send-keys -t $tmuxname "exit" C-m
sleep 0.1
tmux kill-session -t $tmuxname

tmuxname="GPUdm2wfsrefM_dm${LOOPNUMBER}z"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n $tmuxname" C-m
tmux send-keys -t $tmuxname "readshmim $wfrefO" C-m
tmux send-keys -t $tmuxname "imzero $wfrefO" C-m
tmux send-keys -t $tmuxname "exit" C-m
tmux kill-session -t $tmuxname

menucontrolloop_default="GPUd2wMon"
;;






	
    GPUd2wZon)
aoconflogext "(re) STARTING GPU-based DM -> WFSref loop"
file="./conf/conf_GPUdm2wfsrefZ.txt"
echo "1" > $file
tmuxname="GPUdm2wfsrefZ_dm${LOOPNUMBER}"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n GPUdm2wfsref${DMindex}" C-m
tmux send-keys -t $tmuxname "readshmim dm${LOOPNUMBER}disp07" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_respM" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo3" C-m
tmux send-keys -t $tmuxname "listim" C-m
tmux send-keys -t $tmuxname "cudacoeff2map aol${LOOPNUMBER}_respM dm${LOOPNUMBER}disp07 ${GPUzpoffsetZ} aol${LOOPNUMBER}_wfszpo3 0 bogusname" C-m
menucontrolloop_default="GPUd2wZoff"
;;

    GPUd2wZoff)
aoconflogext "STOPPING GPU-based DM -> WFSref loop"
file="./conf/conf_GPUdm2wfsrefZ.txt"
echo "0" > $file
tmuxname="GPUdm2wfsrefZ_dm${LOOPNUMBER}"
tmux send-keys -t $tmuxname "" C-c
sleep 0.1
tmux send-keys -t $tmuxname "exit" C-m
sleep 0.1
tmux kill-session -t $tmuxname

tmuxname="GPUdm2wfsrefZ_dm${LOOPNUMBER}z"
tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2
tmux send-keys -t $tmuxname "$execname -n $tmuxname" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo3" C-m
tmux send-keys -t $tmuxname "imzero aol${LOOPNUMBER}_wfszpo3" C-m
tmux send-keys -t $tmuxname "exit" C-m
tmux kill-session -t $tmuxname

menucontrolloop_default="GPUd2wZon"
;;


	
	
esac
;;
   1) state="menutop";;   
   2) state="menuexit";;
   255) state="menuexit";;
esac


fi











