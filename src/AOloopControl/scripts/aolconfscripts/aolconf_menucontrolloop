#!/bin/bash


if [ ! -v aolconfFLAG ]; then
echo "ERROR: This script should be called from aolconf main script"
exit
fi




# =====================================================
# ======== CONTROL AO LOOP ============================
# =====================================================
if [ $state = "menucontrolloop" ]; then
stateok=1
menuname="CONTROL LOOP"


loopgain=$(echo "$(cat ./conf/conf_loopgain.txt)")
loopmaxlim=$(echo "$(cat ./conf/conf_loopmaxlim.txt)")
loopmultcoeff=$(echo "$(cat ./conf/conf_loopmultcoeff.txt)")



if [ -f "./conf/conf_WFSnormalize.txt" ]; then
WFSnorm=$( cat ./conf/conf_WFSnormalize.txt )
else
WFSnorm="0" # default
fi



stringcenter "LOOP CONFIGURATION"
menuitems=( "1 ->" "\Zb\Zr$string\Zn" )



GPUmode=$( cat ./conf/conf_GPU.txt )
if [[ -f "./conf/conf_GPU.txt" && ( "$GPUmode" = "0" || "$GPUmode" = "1" || "$GPUmode" = "2" || "$GPUmode" = "3" || "$GPUmode" = "4" || "$GPUmode" = "5" ) ]]; then
echo "OK"
else
echo "0" > ./conf/conf_GPU.txt
fi

echo "GPU mode = $GPUmode"

if [ "${GPUmode}" = "0" ];
then
menuitems+=( "GPUsel" "[ GPU is OFF  ]    CURRENTLY USING CPU(s)                -> Turn on GPU mode" )
else
menuitems+=( "GPUsel" "\Z5\Zr[Using $GPUmode GPUs ]\Zn    CURRENTLY USING GPU(S)" )
fi



if [ "0" -lt "$GPUmode" ]; then
file="./conf/conf_GPUset0_dev0.txt"
GPU0device=$( cat $file )
if [[ -f "$file" && ${GPU0device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "0" > $file
GPU0device="0"
fi
menuitems+=( "GPU0" "[ $GPU0device ]    GPU #0 device" )
fi


if [ "1" -lt "$GPUmode" ]; then
file="./conf/conf_GPUset0_dev1.txt"
GPU1device=$( cat $file )
if [[ -f "$file" && ${GPU1device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "1" > $file
GPU1device="1"
fi
menuitems+=( "GPU1" "[ $GPU1device ]    GPU #1 device" )
fi


if [ "2" -lt "$GPUmode" ]; then
file="./conf/conf_GPUset0_dev2.txt"
GPU2device=$( cat $file )
if [[ -f "$file" && ${GPU2device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "2" > $file
GPU2device="2"
fi
menuitems+=( "GPU2" "[ $GPU2device ]    GPU #2 device" )
fi


if [ "3" -lt "$GPUmode" ]; then
file="./conf/conf_GPUset0_dev3.txt"
GPU3device=$( cat $file )
if [[ -f "$file" && ${GPU3device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "3" > $file
GPU3device="3"
fi
menuitems+=( "GPU3" "[ $GPU3device ]    GPU #3 device" )
fi


if [ "4" -lt "$GPUmode" ]; then
file="./conf/conf_GPUset0_dev4.txt"
GPU4device=$( cat $file )
if [[ -f "$file" && ${GPU4device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "4" >  $file
GPU4device="4"
fi
menuitems+=( "GPU4" "[ $GPU4device ]    GPU #4 device" )
fi


if [ "5" -lt "$GPUmode" ]; then
file="./conf/conf_GPUset0_dev5.txt"
GPU5device=$( cat $file )
if [[ -f "$file" && ${GPU5device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "5" > $file
GPU5device="5"
fi
menuitems+=( "GPU5" "[ $GPU5device ]    GPU #5 device" )
fi


if [ "6" -lt "$GPUmode" ]; then
file="./conf/conf_GPUset0_dev6.txt"
GPU6device=$( cat $file )
if [[ -f "$file" && ${GPU6device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "6" > $file
GPU6device="6"
fi
menuitems+=( "GPU6" "[ $GPU6device ]    GPU #6 device" )
fi


if [ "7" -lt "$GPUmode" ]; then
file="./conf/conf_GPUset0_dev7.txt"
GPU7device=$( cat $file )
if [[ -f "$file" && ${GPU0device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "7" > $file
GPU7device="7"
fi
menuitems+=( "GPU7" "[ $GPU7device ]    GPU #7 device" )
fi


if [ "8" -lt "$GPUmode" ]; then
file="./conf/conf_GPUset0_dev8.txt"
GPU8device=$( cat $file )
if [[ -f "$file" && ${GPU8device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "8" > $file
GPU8device="8"
fi
menuitems+=( "GPU8" "[ $GPU8device ]    GPU #8 device" )
fi


if [ "9" -lt "$GPUmode" ]; then
file="./conf/conf_GPUset0_dev9.txt"
GPU9device=$( cat $file )
if [[ -f "$file" && ${GPU0device} =~ [0-9]$ ]]; then
echo "OK"
else
echo "9" > $file
GPU9device="9"
fi
menuitems+=( "GPU9" "[ $GPU9device ]    GPU #9 device" )
fi




if [ "${dm2dm_mode}" = "0" ]; then

file="./conf/conf_GPUmodesextr0.txt"
GPUmodesextr0=$( cat $file )
if [[ -f "$file" && ${GPUmodesextr0} =~ [0-9]$ ]]; then
echo "OK"
else
echo "5" > $file
GPUmodesextr0="5"
fi
menuitems+=( "GPUme0" "[ $GPUmodesextr0 ]    Mode coefficient CM extraction  : GPU device" )


file="./conf/conf_GPUmodesextr1.txt"
GPUmodesextr1=$( cat $file )
if [[ -f "$file" && ${GPUmodesextr1} =~ [0-9]$ ]]; then
echo "OK"
else
echo "6" > $file
GPUmodesextr1="6"
fi
menuitems+=( "GPUme1" "[ $GPUmodesextr1 ]    Mode coefficient dmC extraction : GPU device" )

fi





CMmode=$( cat ./conf/conf_CMmode.txt )


if [[ "${GPUmode}" -ne "0" && "${CMmode}" = "1" ]]; then
GPUallmode=$( cat ./conf/conf_GPUall.txt )

if [[ -f "./conf/conf_GPUall.txt" && ( "$GPUallmode" = "1" || "$GPUallmode" = "0" ) ]]; then
echo "OK"
else
echo "0" > ./conf/conf_GPUall.txt
fi

echo "GPUsll mode = $GPUallmode"

if [ "${GPUallmode}" = "0" ];
then
menuitems+=( "GPUaon" "[GPUall is OFF]    CURRENTLY USING CPU(s) + GPU(s)       -> Turn on GPUall mode" )
else
menuitems+=( "GPUaoff" "\Z5\Zr[GPUall is  ON]\Zn    CURRENTLY USING GPU(S) FOR ALL        -> Turn off GPUall mode" )
fi
else
menuitems+=( " " " GPUall = 0" )
echo "0" > ./conf/conf_GPUall.txt
fi




if [[ -f "./conf/conf_CMmode.txt" && ( "$CMmode" = "1" || "$CMmode" = "0" ) ]]; then
echo "OK"
else
echo "0" > ./conf/conf_CMmode.txt
fi
echo "CM mode = $CMmode"

if [ "${CMmode}" = "0" ];
then
menuitems+=( "CMm1" "[CMmode is OFF]    CURRENTLY USING SEPARATE MATRICES     -> Switch to combined control matrix" )
else
menuitems+=( "CMm0" "\Z5\Zr[CMmode is  ON]\Zn    CURRENTLY USING COMBINED MATRIX       -> Switch to separate control matrices" )
fi




menuitems+=( " " " " )
stringcenter "LOOP PROCESSES"
menuitems+=( "2 ->" "\Zb\Zr$string\Zn" )

procONstat=$( cat ./status/stat_procON.txt )
if [[ -f "./status/stat_procON.txt" && ( "$procONstat" = " ON" || "$procONstat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_procON.txt
fi

if [ "${procONstat}" = "OFF" ];
then
menuitems+=( "S" "START loop processes" )
else
menuitems+=( "K" "\Z1\ZrSTOP loop processes\Zn" )
fi




menuitems+=( " " " " )
stringcenter "LOOP CONTROL "
menuitems+=( "3 ->" "\Zb\Zr$string\Zn" )

if [ "$procONstat" = " ON" ]; then
loopONstat=$( cat ./status/stat_loopON.txt )
if [[ -f "./status/stat_loopON.txt" && ( "$loopONstat" = " ON" || "$loopONstat" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_loopON.txt
fi

 if [ "${loopONstat}" = "OFF" ];
 then
 menuitems+=( "Nloopon" "   START control loop" )
 else
 menuitems+=( "Floopoff" "\Z1\ZrSTOP control loop\Zn" )
 fi
menuitems+=( "Z" "LOOP Zero" )
menuitems+=( "t1" "step 1" )
menuitems+=( "t3" "step 3" )
menuitems+=( "t10" "step 10" )
menuitems+=( "t30" "step 30" )
menuitems+=( "t100" "step 100" )
menuitems+=( "t300" "step 300" )
menuitems+=( "t1000" "step 1000" )



else
menuitems+=( " " "\Z1 Processes need to be ON to turn loop ON/OFF \Zn")
menuitems+=( "" "\Z1 LOOP Zero \Zn" )
menuitems+=( "" "\Z1 step 1 \Zn" )
menuitems+=( "" "\Z1 step 3 \Zn" )
menuitems+=( "" "\Z1 step 10 \Zn" )
menuitems+=( "" "\Z1 step 30 \Zn" )
menuitems+=( "" "\Z1 step 100 \Zn" )
menuitems+=( "" "\Z1 step 300 \Zn" )
menuitems+=( "" "\Z1 step 1000 \Zn" )
fi


menuitems+=( " " " " )
stringcenter "LOOP MONITORING "
menuitems+=( "4 ->" "\Zb\Zr$string\Zn" )

menuitems+=( "ctrmon" "  Enter tmux session aol${LOOPNUMBER}-ctr" )
menuitems+=( "runmon" "  Monitor tmux session aol${LOOPNUMBER}-run" )



menuitems+=( " " " " )
stringcenter "LOOP SETTING "
menuitems+=( "5 ->" "\Zb\Zr$string\Zn" )
menuitems+=( "g" "loop gain    =   ${loopgain}" )
menuitems+=( "m" "loop max lim =   ${loopmaxlim}" )
menuitems+=( "e" "mult coeff   =   ${loopmultcoeff}" )


menuitems+=( " " " " )
stringcenter "CONTROL MATRIX MODAL BLOCK GAINS"
menuitems+=( "6 ->" "\Zb\Zr$string\Zn" )


menuitems+=( "gball" "Set all block to same gain")
menuitems+=( "gball01" "Custom gain set 01 (alpha = 0.1)")
menuitems+=( "gball02" "Custom gain set 02 (alpha = 0.2)")
menuitems+=( "gball04" "Custom gain set 04 (alpha = 0.4)")
menuitems+=( "gball08" "Custom gain set 08 (alpha = 0.8)")
menuitems+=( "gball12" "Custom gain set 12 (alpha = 1.2)")
menuitems+=( "gball16" "Custom gain set 16 (alpha = 1.6)")
menuitems+=( "gball20" "Custom gain set 20 (alpha = 2.0)")

NBblocks=$( cat ./conf/conf_NBmodeblocks.txt )

for i in `seq 0 $(( $NBblocks - 1 ))`;
do
i2=$(printf "%02d" "$i")

NBblockmodes=$( cat ./conf/block${i2}_NBmodes.txt )
#menuitems+=( " " "\Zb\ZrBLOCK $i2 - ${NBblockmodes} modes\Zn")

fname="conf/conf_gainb${i2}.txt"
if [ -f "$fname" ]; then
gainb[10#${i2}]=$( cat ${fname} )
else
gainb[10#${i2}]="1.000"
fi
string=$( printf "% 3d" "${NBblockmodes}" )
menuitems+=( "gb${i2}" "[ ${gainb[10#${i2}]} ] Modal block ${i2} gain  ($string modes)" )
done


menuitems+=( " " " " )
stringcenter "ZERO POINT"
menuitems+=( "7 ->" "\Zb\Zr$string\Zn" )

zploopONstat2=$( cat ./status/stat_zploopON2.txt )
if [[ -f "./status/stat_zploopON2.txt" && ( "$zploopONstat2" = " ON" || "$zploopONstat2" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_zploopON2.txt
fi


zploopONstat3=$( cat ./status/stat_zploopON3.txt )
if [[ -f "./status/stat_zploopON3.txt" && ( "$zploopONstat3" = " ON" || "$zploopONstat3" = "OFF" ) ]]; then
echo "OK"
else
echo "OFF" > ./status/stat_zploopON3.txt
fi



fname="./conf/conf_zpmultcoeff.txt"
if [ -f "$fname" ]; then
zpmultcoeff=$( cat ${fname} )
else
zpmultcoeff="1.000"
fi
menuitems+=( "zpmult" "[ ${zpmultcoeff} ] Multiply WFS reference by coefficient" )



if [ "${zploopONstat2}" = "OFF" ];
then
menuitems+=( "zplon2" "   START DM-space zero point offset loop #2 (wfszpo2)" )
else
menuitems+=( "zploff2" "\Z1\ZrSTOP DM-space zero point offset loop #2\Zn" )
fi


if [ "${zploopONstat3}" = "OFF" ];
then
menuitems+=( "zplon3" "   START DM-space zero point offset loop #3 (wfszpo3)" )
else
menuitems+=( "zploff3" "\Z1\ZrSTOP SM-space zero point offset loop #3\Zn" )
fi






menuitems+=( "zpinj" "Inject Fourier mode to DM zero point" )
menuitems+=( "zpz" "Zero DM zero point" )


state="menutop"


dialog --colors --title "LOOP CONTROL  - LOOP ${LOOPNUMBER}" \
--ok-label "Select" \
--cancel-label "Top" \
--help-button --help-label "Exit" \
--default-item "${menucontrolloop_default}" \
 --menu "$menuname" \
 $nbwlines $nbwcols  100 "${menuitems[@]}"  2> $tempfile

retval=$?
choiceval=$(cat $tempfile)
menucontrolloop_default="$choiceval"
state="menucontrolloop"
case $retval in
   0) # button
	case $choiceval in


# LOOP CONFIGURATION




	GPUsel)
exec 3>&1;
nbGPU=$(dialog --inputbox "Number of GPU(s) (0 = CPU mode)" 0 0 "$nbGPU" 2>&1 1>&3);
exec 3>&-;
echo "$nbGPU" > ./conf/conf_GPU.txt
aoconflog "set nbGPU = ${nbGPU}"
;;


    GPU0)
exec 3>&1;
GPU0device=$(dialog --inputbox "GPU0 device" 0 0 "$GPU0device" 2>&1 1>&3);
exec 3>&-;
echo "$GPU0device" > ./conf/conf_GPUset0_dev0.txt
aoconflog "set GPU0device = ${GPU0device}"
menucontrolloop_default="GPU0"
;;

    GPU1)
exec 3>&1;
GPU1device=$(dialog --inputbox "GPU1 device" 0 0 "$GPU1device" 2>&1 1>&3);
exec 3>&-;
echo "$GPU1device" > ./conf/conf_GPUset0_dev1.txt
aoconflog "set GPU1device = ${GPU1device}"
menucontrolloop_default="GPU1"
;;

    GPU2)
exec 3>&1;
GPU2device=$(dialog --inputbox "GPU2 device" 0 0 "$GPU2device" 2>&1 1>&3);
exec 3>&-;
echo "$GPU2device" > ./conf/conf_GPUset0_dev2.txt
aoconflog "set GPU2device = ${GPU2device}"
menucontrolloop_default="GPU2"
;;

    GPU3)
exec 3>&1;
GPU3device=$(dialog --inputbox "GPU3 device" 0 0 "$GPU3device" 2>&1 1>&3);
exec 3>&-;
echo "$GPU3device" > ./conf/conf_GPUset0_dev3.txt
aoconflog "set GPU3device = ${GPU3device}"
menucontrolloop_default="GPU3"
;;

    GPU4)
exec 3>&1;
GPU4device=$(dialog --inputbox "GPU4 device" 0 0 "$GPU4device" 2>&1 1>&3);
exec 3>&-;
echo "$GPU4device" > ./conf/conf_GPUset0_dev4.txt
aoconflog "set GPU4device = ${GPU4device}"
menucontrolloop_default="GPU4"
;;

    GPU5)
exec 3>&1;
GPU5device=$(dialog --inputbox "GPU5 device" 0 0 "$GPU5device" 2>&1 1>&3);
exec 3>&-;
echo "$GPU5device" > ./conf/conf_GPUset0_dev5.txt
aoconflog "set GPU5device = ${GPU5device}"
menucontrolloop_default="GPU5"
;;

    GPU6)
exec 3>&1;
GPU6device=$(dialog --inputbox "GPU6 device" 0 0 "$GPU6device" 2>&1 1>&3);
exec 3>&-;
echo "$GPU6device" > ./conf/conf_GPUset0_dev6.txt
aoconflog "set GPU6device = ${GPU6device}"
menucontrolloop_default="GPU6"
;;

    GPU7)
exec 3>&1;
GPU7device=$(dialog --inputbox "GPU7 device" 0 0 "$GPU7device" 2>&1 1>&3);
exec 3>&-;
echo "$GPU7device" > ./conf/conf_GPUset0_dev7.txt
aoconflog "set GPU7device = ${GPU7device}"
menucontrolloop_default="GPU7"
;;

    GPU8)
exec 3>&1;
GPU8device=$(dialog --inputbox "GPU8 device" 0 0 "$GPU8device" 2>&1 1>&3);
exec 3>&-;
echo "$GPU8device" > ./conf/conf_GPUset0_dev8.txt
aoconflog "set GPU8device = ${GPU8device}"
menucontrolloop_default="GPU8"
;;

    GPU9)
exec 3>&1;
GPU9device=$(dialog --inputbox "GPU9 device" 0 0 "$GPU9device" 2>&1 1>&3);
exec 3>&-;
echo "$GPU9device" > ./conf/conf_GPUset0_dev9.txt
aoconflog "set GPU9device = ${GPU9device}"
menucontrolloop_default="GPU9"
;;


	GPUon)
echo "1" > ./conf/conf_GPU.txt
aoconflog "set GPU ON"
menucontrolloop_default="GPUoff"
;;
	GPUoff)
echo "0" > ./conf/conf_GPU.txt
aoconflog "set GPU OFF"
menucontrolloop_default="GPUon"
;;

 
 
    GPUme0)
file="./conf/conf_GPUmodesextr0.txt"
exec 3>&1;
GPUmodesextr0=$(dialog --inputbox "GPU modes extract 0 device" 0 0 "$GPUmodesextr0" 2>&1 1>&3);
exec 3>&-;
echo "$GPUmodesextr0" > $file
aoconflog "set GPUmodesextr0 = ${GPUmodesextr0}"
menucontrolloop_default="GPUme0"
;;

    GPUme1)
file="./conf/conf_GPUmodesextr1.txt"
exec 3>&1;
GPUmodesextr1=$(dialog --inputbox "GPU modes extract 1 device" 0 0 "$GPUmodesextr1" 2>&1 1>&3);
exec 3>&-;
echo "$GPUmodesextr1" > $file
aoconflog "set GPUmodesextr1 = ${GPUmodesextr1}"
menucontrolloop_default="GPUme1"
;;

 
 
 
 
 
 
    GPUaon)
echo "1" > ./conf/conf_GPUall.txt
aoconflog "set GPUall ON"
menucontrolloop_default="GPUaoff"
;;
    GPUaoff)
echo "0" > ./conf/conf_GPUall.txt
aoconflog "set GPUall OFF"
menucontrolloop_default="GPUaon"
;;


	CMm1)
echo "1" > ./conf/conf_CMmode.txt
aoconflog "set CMmode 1"
menucontrolloop_default="CMm0"
;;
	CMm0)
echo "0" > ./conf/conf_CMmode.txt
aoconflog "set CMmode 0"
menucontrolloop_default="CMm1"
;;






# LOOP PROCESSES
   	 S)
echo " ON" > ./status/stat_procON.txt
#rm aolctr-${LOOPNUMBER}-fifo
aoconflog "START LOOP PROCESSES"
tmux new-session -d -s aol${LOOPNUMBER}-ctr
tmux send-keys -t aol${LOOPNUMBER}-ctr "./auxscripts/aolctr" C-m


sleep 1
tmux new-session -d -s aol${LOOPNUMBER}-run
tmux send-keys -t aol${LOOPNUMBER}-run "./auxscripts/aolrun" C-m
echo "./aolrun" > cmd00.txt

sleep 1
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetgain 0.0" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolon" C-m
sleep 2
tmux send-keys -t aol${LOOPNUMBER}-ctr "aoloff" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetgain ${loopgain}" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmaxlim ${loopmaxlim}" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmult ${loopmultcoeff}" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolloadconf ${LOOPNUMBER}" C-m
sleep 2

tmuxname="aol${LOOPNUMBER}wfszpo"
tmux kill-session -t $tmuxname
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}wfszpo" C-m
if [ "$CPUconfRT" -eq "1" ];then
tmux send-keys -t $tmuxname "csetpmove aolRT" C-m
fi
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfsref" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfsref0" C-m
tmux send-keys -t $tmuxname "aolzpwfscloop aol${LOOPNUMBER}_wfszpo 4 aol${LOOPNUMBER}_wfsref0 aol${LOOPNUMBER}_wfsref" C-m


if [ "${dm2dm_mode}" = "0" ]; then
# start analysis processes
tmuxname="aol${LOOPNUMBER}mex0"
tmux kill-session -t $tmuxname
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "./auxscripts/modesextract0 ${GPUmodesextr0}" C-m

tmuxname="aol${LOOPNUMBER}mex1"
tmux kill-session -t $tmuxname
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "./auxscripts/modesextract1 ${GPUmodesextr1}" C-m
fi

menucontrolloop_default="K"
;; 
   	 K)
echo "OFF" > ./status/stat_procON.txt
aoconflog "STOP LOOP PROCESSES"
tmux send-keys -t aol${LOOPNUMBER}-ctr "aoloff" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolkill" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "exit" C-m
pkill -9 aolrun-${LOOPNUMBER}

pkill -9 aol${LOOPNUMBER}wfszpo
tmuxname="aol${LOOPNUMBER}wfszpo"
tmux kill-session -t $tmuxname

if [ "${dm2dm_mode}" = "0" ]; then
tmuxname="aol${LOOPNUMBER}mex0"
tmux send-keys -t $tmuxname C-c
tmux kill-session -t $tmuxname

tmuxname="aol${LOOPNUMBER}mex1"
tmux send-keys -t $tmuxname C-c
tmux kill-session -t $tmuxname

stopstreamlog aol${LOOPNUMBER}_modeval
echo "0" > "./status/stat_log_modeval.txt"
stopstreamlog aol${LOOPNUMBER}_modevalc
echo "0" > "./status/stat_log_modevalc.txt"
fi

menucontrolloop_default="S"
;;

   	 Nloopon)
echo " ON" > ./status/stat_loopON.txt
aoconflog "LOOP ON"
customfunction_startloop

file="./conf/conf_logmode.txt"
logMode=$( cat $file )
if [[ -f "$file" && ( "$logMode" = "0" || "$logMode" = "1" || "$logMode" = "2" ) ]]; then
echo "OK"
else
echo "0" > $file
logMode=0
fi
if [ "$logMode" = "1" ] || [ "$logMode" =  "2" ] ;
then
start_Telemetrylog_all
fi

tmux send-keys -t aol${LOOPNUMBER}-ctr "aolon" C-m
menucontrolloop_default="Floopoff"
;; 

   	 Floopoff)
echo "OFF" > ./status/stat_loopON.txt
aoconflog "LOOP OFF"
customfunction_stoploop
tmux send-keys -t aol${LOOPNUMBER}-ctr "aoloff" C-m
file="./conf/conf_logmode.txt"
logMode=$( cat $file )
if [[ -f "$file" && ( "$logMode" = "0" || "$logMode" = "1" || "$logMode" = "2" ) ]]; then
echo "OK"
else
echo "0" > $file
logMode=0
fi
if [ "$logMode" = "0" ] || [ "$logMode" =  "1" ] ;
then
stop_Telemetrylog_all
fi
menucontrolloop_default="Nloopon"
;;

 
  	 Z)
tmux send-keys -t aol${LOOPNUMBER}-ctr "imzero aol${LOOPNUMBER}_DMmode_cmd" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "readshmim aol${LOOPNUMBER}_dmC" C-m
tmux send-keys -t aol${LOOPNUMBER}-ctr "imzero aol${LOOPNUMBER}_dmC" C-m
aoconflog "zeroing loop"
#echo "imzero aol${LOOPNUMBER}_DMmode_cmd" >> aolctr-${LOOPNUMBER}-fifo
#echo "readshmim aol${LOOPNUMBER}_dmC" >> aolctr-${LOOPNUMBER}-fifo
#echo "imzero aol${LOOPNUMBER}_dmC" >> aolctr-${LOOPNUMBER}-fifo

;;
   	 t1) 
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolstep 1" C-m 
aoconflog "aolstep 1"
;;   
   	 t3) 
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolstep 3" C-m
aoconflog "aolstep 3"
;;   
   	 t10) 
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolstep 10" C-m 
aoconflog "aolstep 10"
;;   
   	 t30) 
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolstep 30" C-m
aoconflog "aolstep 30"
;;   
   	 t100) 
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolstep 100" C-m
aoconflog "aolstep 100"
;;   
   	 t300) 
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolstep 300" C-m
aoconflog "aolstep 300"
;;   
   	 t1000) 
tmux send-keys -t aol${LOOPNUMBER}-ctr "aolstep 1000" C-m 
aoconflog "aolstep 1000"
;;   

	ctrmon) tmux a -t aol${LOOPNUMBER}-ctr ;;
	runmon) tmux a -t aol${LOOPNUMBER}-run ;;

  	 g)
  	 value=${loopgain}
	 SelectValue01 100 1200 50
  	 loopgain=${value}
  	 echo "$loopgain" > ./conf/conf_loopgain.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetgain ${loopgain}" C-m
	 aoconflog "set gain ${loopgain}"
  	 ;; 
   	 m)
   	 value=${loopmaxlim}
   	 SelectValue01 0 1200 50
 	 loopmaxlim=${value}
 	 echo "$loopmaxlim" > ./conf/conf_loopmaxlim.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmaxlim ${loopmaxlim}" C-m
	 aoconflog "set max limit ${loopmaxlim}"
   	 ;;  
   	 e) 
   	 value=${loopmultcoeff}
   	 SelectValue01 900 1001 2
 	 loopmultcoeff=${value}
 	 echo "$loopmultcoeff" > ./conf/conf_loopmultcoeff.txt
	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmult ${loopmultcoeff}" C-m
	 aoconflog "set mult coeff ${loopmultcoeff}"
     	 ;;  

	 gball) 
	 value=${gainallb}
	 SelectValue01 100 1200 50 
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=${value}
	     echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "set all gains to ${value}"
	 ;;
	 
    gball01)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^0.1)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "set all gains to custom set 01 (alpha = 0.1)"
	 ;;
   gball02)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^0.2)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "set all gains to custom set 02 (alpha = 0.2)"
	 ;;
   gball04)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^0.4)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "set all gains to custom set 04 (alpha = 0.4)"
	 ;;
   gball08)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^0.8)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "set all gains to custom set 08 (alpha = 0.8)"
	 ;;
   gball12)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^1.2)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "set all gains to custom set 12 (alpha = 1.2)"
	 ;;
   gball16)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^1.6)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "set all gains to custom set 16 (alpha = 1.6)"
	 ;;
   gball20)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^2.0)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "set all gains to custom set 20 (alpha = 2.0)"
	 ;;






    gball2)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^2.0)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "set all gains to custom set 2 (alpha = 2)"
	 ;;

    gball3)
	 for i in `seq 0 $(( $NBblocks - 1 ))`;
      	 do
	     gi=$(printf "%02d" "$i")
	     gainb[10#${gi}]=$( echo $i $NBblocks| awk '{printf("%5.3f",1.0/(1+10.0*$1/$2)^0.5)}' )
	     echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
	     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 0" C-m
	 done
     gi="00"
     tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "set all gains to custom set 3 (alpha = 0.5)"
	 ;;
     
  	 gb00)
  	 gi="00"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${10#gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb01)
  	 gi="01"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb02)
  	 gi="02"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb03)
  	 gi="03"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb04)
  	 gi="04"
  	 value=${gainb[${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb05)
  	 gi="05"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb06)
  	 gi="06"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb07)
  	 gi="07"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[10#${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb08)
  	 gi="08"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[10#${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb09)
  	 gi="09"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[10#${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb10)
  	 gi="10"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb11)
  	 gi="11"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb12)
  	 gi="12"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb13)
  	 gi="13"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 

  	 gb14)
  	 gi="14"
  	 value=${gainb[10#${gi}]}
	 SelectValue01 100 1200 50
  	 gainb[${gi}]=${value}
  	 echo "${gainb[10#${gi}]}" > ./conf/conf_gainb${gi}.txt
  	 tmux send-keys -t aol${LOOPNUMBER}-ctr "aolsetmbgain ${gi} ${gainb[10#${gi}]} 1" C-m
	 aoconflog "block ${gi} set gain to ${value}"
  	 ;; 



    zpmult)
value=${zpmultcoeff}
SelectValue01 100 1001 50
zpmultcoeff=${value}
echo "${zpmultcoeff}" > ./conf/conf_zpmultcoeff.txt
tmuxname="aol${LOOPNUMBER}zpmult"
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "$execname -n ${tmuxname}" C-m
if [ "$CPUconfRT" -eq "1" ];then
tmux send-keys -t $tmuxname "csetpmove system" C-m
fi
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfsref" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfsref0" C-m
tmux send-keys -t $tmuxname "wfsref=${zpmult}*wfsref0"
tmux send-keys -t $tmuxname "exit" C-m
aoconflog "multiply ref by ${value}"
;;


	zplon2)
echo " ON" > ./status/stat_zploopON2.txt
tmuxname="aol${LOOPNUMBER}zploop2"
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}zploop2" C-m
if [ "$CPUconfRT" -eq "1" ];then
tmux send-keys -t $tmuxname "csetpmove aolRT" C-m
fi
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo2" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP2" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_zrespM" C-m
tmux send-keys -t $tmuxname "listim" C-m
tmux send-keys -t $tmuxname "aolzpwfsloop aol${LOOPNUMBER}_dmZP2 aol${LOOPNUMBER}_zrespM aol${LOOPNUMBER}_wfszpo2" C-m
menucontrolloop_default="zploff2"
aoconflog "start zero-point offset loop 2"
;; 
	zploff2)
echo "OFF" > ./status/stat_zploopON2.txt
tmuxname="aol${LOOPNUMBER}zploop2"
tmux kill-session -t $tmuxname 
menucontrolloop_default="zplon2"
aoconflog "stop zero-point offset loop 2"
	;;


	zplon3)
echo " ON" > ./status/stat_zploopON3.txt
tmuxname="aol${LOOPNUMBER}zploop3"
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}zploop3" C-m
if [ "$CPUconfRT" -eq "1" ];then
tmux send-keys -t $tmuxname "csetpmove aolRT" C-m
fi
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_wfszpo3" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP3" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_zrespM" C-m
tmux send-keys -t $tmuxname "listim" C-m
tmux send-keys -t $tmuxname "aolzpwfsloop aol${LOOPNUMBER}_dmZP3 aol${LOOPNUMBER}_zrespM aol${LOOPNUMBER}_wfszpo3" C-m
menucontrolloop_default="zploff3"
aoconflog "start zero-point offset loop 3"
;; 
	zploff3)
echo "OFF" > ./status/stat_zploopON3.txt
tmuxname="aol${LOOPNUMBER}zploop3"
tmux kill-session -t $tmuxname 
menucontrolloop_default="zplon3"
aoconflog "stop zero-point offset loop 3"
	;;
    
	zpinj)
ampl="0.03"
modenb="00030"
tmuxname="aol${LOOPNUMBER}zpinject3"
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "$execname -n aol${LOOPNUMBER}zpin" C-m
if [ "$CPUconfRT" -eq "1" ];then
tmux send-keys -t $tmuxname "csetpmove system" C-m
fi
tmux send-keys -t $tmuxname "loadfits \"mkmodestmp/fmodes0all.fits\" modec" C-m
tmux send-keys -t $tmuxname "breakcube modec" C-m
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP3" C-m
tmux send-keys -t $tmuxname "dmo=$ampl*modec_$modenb" C-m
tmux send-keys -t $tmuxname "cp dmo aol${LOOPNUMBER}_dmZP3" C-m
tmux send-keys -t $tmuxname "exit" C-m
aoconflog "inject fourier mode to zero-point"
	;;


	zpz)
tmuxname="aol${LOOPNUMBER}zpzero3"
tmux new-session -d -s $tmuxname
tmux send-keys -t $tmuxname "$execname -n $tmuxname" C-m
if [ "$CPUconfRT" -eq "1" ];then
tmux send-keys -t $tmuxname "csetpmove system" C-m
fi
tmux send-keys -t $tmuxname "readshmim aol${LOOPNUMBER}_dmZP3" C-m
tmux send-keys -t $tmuxname "imzero aol${LOOPNUMBER}_dmZP3" C-m
tmux send-keys -t $tmuxname "exit" C-m
aoconflog "zero the zero-point offset"
	;;
esac
;;
   1) state="menutop";;   
   2) state="menuexit";;
   255) state="menuexit";;
esac


fi











