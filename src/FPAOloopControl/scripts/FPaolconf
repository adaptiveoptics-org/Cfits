#!/bin/bash


aolconfFLAG="1"
NBARGS=0

if [ -f LOOPNAME ]; then
LOOPNAME=$( cat LOOPNAME )
else
LOOPNAME="null"
fi

# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`
#echo "pname = $pname"





# ======================= LOGGING =================================
# NOTE: copy logging functions to external scripts
# NOTE: dolog and dologext should be provided by user

# internal log - logs EVERYTHING
function FPaoconflog {
echo "$@" >> FPaolconf.log
dolog "$LOOPNAME" "$@"
}

# external log, use for less verbose log
function FPaoconflogext {
echo "$@" >> FPaolconf.log
dolog "$LOOPNAME" "$@"
dologext "$LOOPNAME $@"
}






printHELP_confFILES ()
{
echo "------------------------------------------------------------------------"
echo -e "\033[1m               CONFIGURATION FILES \033[0m"
echo "------------------------------------------------------------------------"
echo "	CONFNUMBER                    loop number (long)"
echo "	CONFNAME                      loop name"
echo "  conf/conf_dmC_name.txt        DM control"
echo "------------------------------------------------------------------------"
}





printHELP ()
{
echo
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname :  FP AO loop CONTROL - main script $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo " "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [options]"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "   --help -h             print (h)elp and exit"
echo "   --help1               print 1 line summary"
echo "   -H  <string>         (H)elp category"
echo "                 cf     configuration files"     
echo "   -L <long>            (L)oop number"
echo "   -N <string>          loop (N)ame. Run ./aosetup/aosetup_<string> if available"
echo "   -C                   run (C)PU config"
echo "   -c                   (c)lear all settings"
echo "   -n                   do (n)ot load configuration on startup"
echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
	printf "%20s       FP AO loop CONTROL - main script\n" "$0" 
}


# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done



LOADMEM=1
LOOPNAME_file="LOOPNAME"
LOOPNUMBER_file="LOOPNUMBER"
CPUconfRT="1"


### Start getopts code ###
while getopts :hH:L:N:Ccn FLAG; do
  case $FLAG in
    H) # detailed help
    if [ "$OPTARG" == "cf" ]; then
    printHELP_confFILES
    exit
    fi
    echo "ERROR: choice $OPTARG not recognized"
    exit
    ;;
    L)  #  set loop number
      LOOPNUMBER=$OPTARG
      echo "LOOP NUMBER = $LOOPNUMBER"
      echo "$LOOPNUMBER" > $LOOPNUMBER_file
      FPaoconflog "setting LOOPNUMBER to $LOOPNUMBER"
      ;;
    N) # set loop name
    LOOPNAME=$OPTARG
    echo "LOOP NAME = $LOOPNAME"
    echo "$LOOPNAME" > $LOOPNAME_file
    FPaoconflog "setting LOOPNAME to $LOOPNAME"
	./FPaosetup/FPaosetup_${LOOPNAME}
    ;;
    C) # configure CPU
    echo "Configure CPU"
    CPUconfRT=1
    ;;
    h)  #show help
	if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    c) # clear
    echo "Clearing all settings"
    rm LOOPNUMBER 2> /dev/null
    rm LOOPNAME 2> /dev/null
    rm conf/* 2> /dev/null
    rmdir conf 2> /dev/null
    rm status/* 2> /dev/null
    rmdir status 2> /dev/null
    rm tmp/* 2> /dev/null
    rmdir tmp 2> /dev/null
    rm FPaolconf.log 2> /dev/null
    exit
    ;;
    n) # do not load configuration upon startup
    LOADMEM=0
    ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1)) 

### End getopts code ###









if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo -e \\n"Illegal number of parameters ($NBARGS params required, $# entered)"\\n
fi
printHELP
        exit
fi












# help, warning, error
. ./FPaolconfscripts/FPaolconf_funcs




FPaoconflog " STARTING NEW FPaolconf SESSION"




# ====================== USER EDITS THIS SECTION =======================
execname="Cfits"  

# default parameters
LOOPNUMBER_default=7  # default loop number
CPUconfRT=0 # no CPU real-time configuration

DMindex=0




# CUSTOM USER-PROVIDED SCRIPTS:
if [ -f "FPAOloopsetup.bash" ]; then
. ./FPAOloopsetup.bash # executed here
else
printWARNING "File FPAOloopsetup.bash does not exist"
fi



# execute CPU configuration script if it exists
if [ -f "./FPaocustomscripts/cpuconfig_${LOOPNAME}" ]; then
if [ ! -f "FPcpuconfigOK" ]; then
. ./FPaocustomscripts/cpuconfig_${LOOPNAME}
fi
fi




shmimviewexec="shmimview"
shmimmonexec="shmimmon"


# ======================== END OF USER EDIT SECTION =====================



. ./aolconfscripts/FPaolconf_readconf






















# ===================== TEST MODE ========================
dmxsize=32
dmysize=32





# =================== some initial setup =======================


LINES=$( tput lines )
COLUMNS=$( tput cols )
let " nbwlines = $LINES - 10 "
let " nbwcols = $COLUMNS - 10 "
#echo "$COLUMNS -> $nbwcols"
actionmode="Select"

#confnbfile="./conf/conf_CONFNUMBER.txt"
mkdir -p conf
mkdir -p status
mkdir -p tmp

cp LOOPNAME ./conf/conf_LOOPNAME.txt



# CONFSELECTED (conf numnber)
#if [ ! -f $confnbfile ]
#then
#	echo "creating configuration number"
#	echo "$CONFSELECTED_default" > ./conf/conf_CONFNUMBER.txt
#else
#	CONFSELECTED=$(cat $confnbfile)
#	echo "selected configuration = $CONFSELECTED"
#fi




tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15










# ================ FREQUENTLY USED FUNCTIONS ===================

echo "FUNCTIONS..."

. ./FPaolconfscripts/FPaolconf_logfuncs








# =================== READ CONFIGURATION====================================

# =================== READ CONFIGURATION====================================


function AOloadMem {
# hardware I/O [shared memory]
ReaddmCname
getshmimsize FPaol${LOOPNUMBER}_dmC

ReaddmRMname
getshmimsize FPaol${LOOPNUMBER}_dmRM

Readwfsimcamname
getshmimsize FPaol${LOOPNUMBER}_wfsim

ReadWFSdarkfname
getshmimsize FPaol${LOOPNUMBER}_wfsdark



# SYSTEM CALIBRATION

ReadConfFile "FPzrespMamp"
getshmimsize FPaol${LOOPNUMBER}_zrespMamp

ReadConfFile "FPzrespMpha"
getshmimsize FPaol${LOOPNUMBER}_zrespMpha





# System response and control


echo "memory loaded"
}



if [ "$LOADMEM" -eq "1" ]
then
FPAOloadMem 1
fi





# =================== STATE MACHINE ====================================
state="menutop"

confselected=1
menuconfmanage_default=0
echo "START STATE MACHINE"


while true; do
stateok=0
. ./FPaolconfscripts/FPaolconf_menutop
. ./FPaolconfscripts/FPaolconf_menuconfigureloop
#. ./FPaolconfscripts/FPaolconf_menu_mkFModes
#. ./FPaolconfscripts/FPaolconf_menucontrolmatrix
#. ./FPaolconfscripts/FPaolconf_menucontrolloop
#. ./FPaolconfscripts/FPaolconf_menupredictivecontrol
#. ./FPaolconfscripts/FPaolconf_menudmCfiltering
#. ./FPaolconfscripts/FPaolconf_menutestmode
#. ./FPaolconfscripts/FPaolconf_menuview
. ./FPaolconfscripts/FPaolconf_menurecord

if [ $state = "menuexit" ]; then
stateok=1
echo "exit"
exit
fi


if [ $stateok = 0 ]; then
echo "state \"$state\" not recognized ... exit"
FPaoconflog "state \"$state\" not recognized ... exit"
exit
fi

done

